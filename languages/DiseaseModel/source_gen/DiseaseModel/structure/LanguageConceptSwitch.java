package DiseaseModel.structure;

/*Generated by MPS */

import jetbrains.mps.lang.smodel.LanguageConceptIndex;
import jetbrains.mps.lang.smodel.LanguageConceptIndexBuilder;
import jetbrains.mps.smodel.adapter.ids.SConceptId;
import org.jetbrains.mps.openapi.language.SAbstractConcept;

public final class LanguageConceptSwitch {
  private final LanguageConceptIndex myIndex;
  public static final int Asymptomatic = 0;
  public static final int CompositeDiagnosticCondition = 1;
  public static final int CompositeTest = 2;
  public static final int CompositeTestResultCondition = 3;
  public static final int ConditionalLine = 4;
  public static final int ConditionalSelection = 5;
  public static final int DiagnosticCondition = 6;
  public static final int Disease = 7;
  public static final int DiseaseSymptom = 8;
  public static final int DiseaseSymptomReference = 9;
  public static final int DiseaseTest = 10;
  public static final int Exposed = 11;
  public static final int ImmunocompromisedCondition = 12;
  public static final int Infected = 13;
  public static final int InfectionSpreadLine = 14;
  public static final int InfectionSpreadTable = 15;
  public static final int InfectionStatus = 16;
  public static final int InfectionStatusCondition = 17;
  public static final int ObservationTest = 18;
  public static final int ObservationsCondition = 19;
  public static final int ProbabilityDistribution = 20;
  public static final int ProbabilityDistributionLine = 21;
  public static final int ProcessingTimeLine = 22;
  public static final int ProcessingTimeTable = 23;
  public static final int ResultsMappingLine = 24;
  public static final int ResultsMappingTable = 25;
  public static final int SusceptibilityStatus = 26;
  public static final int Susceptible = 27;
  public static final int Symptomatic = 28;
  public static final int Test = 29;
  public static final int TestCapturedDisease = 30;
  public static final int TestOutcome = 31;
  public static final int TestSelectionRule = 32;
  public static final int TestSelectionRuleLine = 33;
  public static final int TestSelectionStrategy = 34;
  public static final int Unvaccinated = 35;
  public static final int Vaccinated = 36;
  public static final int VaccineStatus = 37;
  public static final int VaccineStatusCondition = 38;

  public LanguageConceptSwitch() {
    LanguageConceptIndexBuilder builder = new LanguageConceptIndexBuilder(0xbb69d08796cc48caL, 0xaeb6c2cb27e532b0L);
    builder.put(0x5dc1936ab311194bL, Asymptomatic);
    builder.put(0x19d87264f3d651cfL, CompositeDiagnosticCondition);
    builder.put(0x35a9749351b87564L, CompositeTest);
    builder.put(0x2c006337dddd52a9L, CompositeTestResultCondition);
    builder.put(0x465f14a415e67319L, ConditionalLine);
    builder.put(0x465f14a415e67306L, ConditionalSelection);
    builder.put(0x29f0721df36170cL, DiagnosticCondition);
    builder.put(0x25745663758ab012L, Disease);
    builder.put(0x6ca3e29db4791132L, DiseaseSymptom);
    builder.put(0x6ca3e29db4791247L, DiseaseSymptomReference);
    builder.put(0x4936c0ffc391ca7L, DiseaseTest);
    builder.put(0x1c9634cb4b0672f6L, Exposed);
    builder.put(0x18668ef2755ea288L, ImmunocompromisedCondition);
    builder.put(0x5dc1936ab3111910L, Infected);
    builder.put(0x1c9634cb4b041b5eL, InfectionSpreadLine);
    builder.put(0x1c9634cb4b041b5dL, InfectionSpreadTable);
    builder.put(0x5dc1936ab31118fbL, InfectionStatus);
    builder.put(0x18668ef27101e2faL, InfectionStatusCondition);
    builder.put(0x6ca3e29db47911a7L, ObservationTest);
    builder.put(0x6ca3e29db4926ae3L, ObservationsCondition);
    builder.put(0x35a9749351b8eff3L, ProbabilityDistribution);
    builder.put(0x35a9749351b8f00eL, ProbabilityDistributionLine);
    builder.put(0x16d45e8703e0ee1aL, ProcessingTimeLine);
    builder.put(0x16d45e8703e0edf5L, ProcessingTimeTable);
    builder.put(0x31419b89f2ca37faL, ResultsMappingLine);
    builder.put(0x31419b89f2ca37a8L, ResultsMappingTable);
    builder.put(0x5dc1936ab3111979L, SusceptibilityStatus);
    builder.put(0x5dc1936ab3111925L, Susceptible);
    builder.put(0x5dc1936ab3111938L, Symptomatic);
    builder.put(0x6ca3e29db479214fL, Test);
    builder.put(0x549fe0474671cd38L, TestCapturedDisease);
    builder.put(0x19d87264f3d59728L, TestOutcome);
    builder.put(0x35a9749351b87572L, TestSelectionRule);
    builder.put(0x35a9749351b8756dL, TestSelectionRuleLine);
    builder.put(0x35a9749351b8756cL, TestSelectionStrategy);
    builder.put(0x5dc1936ab3112032L, Unvaccinated);
    builder.put(0x5dc1936ab311201fL, Vaccinated);
    builder.put(0x5dc1936ab3111fd4L, VaccineStatus);
    builder.put(0x18668ef26f431e45L, VaccineStatusCondition);
    myIndex = builder.seal();
  }

  /*package*/ int index(SConceptId cid) {
    return myIndex.index(cid);
  }

  public int index(SAbstractConcept concept) {
    return myIndex.index(concept);
  }
}
