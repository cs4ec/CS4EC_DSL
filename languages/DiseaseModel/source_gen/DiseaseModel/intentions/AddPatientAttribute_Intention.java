package DiseaseModel.intentions;

/*Generated by MPS */

import jetbrains.mps.intentions.AbstractIntentionDescriptor;
import jetbrains.mps.openapi.intentions.IntentionFactory;
import java.util.Collection;
import jetbrains.mps.openapi.intentions.IntentionExecutable;
import jetbrains.mps.openapi.intentions.Kind;
import jetbrains.mps.smodel.SNodePointer;
import org.jetbrains.mps.openapi.model.SNode;
import jetbrains.mps.openapi.editor.EditorContext;
import java.util.Collections;
import jetbrains.mps.intentions.AbstractIntentionExecutable;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SConceptOperations;
import jetbrains.mps.smodel.adapter.structure.MetaAdapterFactory;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SLinkOperations;
import jetbrains.mps.internal.collections.runtime.Sequence;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SModelOperations;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SNodeOperations;
import jetbrains.mps.internal.collections.runtime.IWhereFilter;
import java.util.Objects;
import jetbrains.mps.internal.collections.runtime.ListSequence;
import jetbrains.mps.openapi.intentions.IntentionDescriptor;
import org.jetbrains.mps.openapi.language.SReferenceLink;
import org.jetbrains.mps.openapi.language.SContainmentLink;
import org.jetbrains.mps.openapi.language.SConcept;

public final class AddPatientAttribute_Intention extends AbstractIntentionDescriptor implements IntentionFactory {
  private Collection<IntentionExecutable> myCachedExecutable;

  public AddPatientAttribute_Intention() {
    super(Kind.ERROR, false, new SNodePointer("r:fa7a70e7-4bfa-49c3-ba94-93d463233bd8(DiseaseModel.intentions)", "3794530329751661836"));
  }

  @Override
  public String getPresentation() {
    return "AddPatientAttribute";
  }

  @Override
  public boolean isSurroundWith() {
    return false;
  }

  public Collection<IntentionExecutable> instances(final SNode node, final EditorContext context) {
    if (myCachedExecutable == null) {
      myCachedExecutable = Collections.<IntentionExecutable>singletonList(new IntentionImplementation());
    }
    return myCachedExecutable;
  }
  /*package*/ final class IntentionImplementation extends AbstractIntentionExecutable {
    public IntentionImplementation() {
    }

    @Override
    public String getDescription(final SNode node, final EditorContext editorContext) {
      return "Add a patient attribute for this conditional statement";
    }

    @Override
    public void execute(final SNode node, final EditorContext editorContext) {
      SNode newAttributeTable = SConceptOperations.createNewNode(MetaAdapterFactory.getConcept(0xb3cac82cd02446bcL, 0xb485624ad80c3cc2L, 0x25745663764b1a60L, "ActionCards.structure.AttributeTable"));
      SNode newInfectionStatus = SConceptOperations.createNewNode(MetaAdapterFactory.getConcept(0xb3cac82cd02446bcL, 0xb485624ad80c3cc2L, 0x18668ef26f3e7089L, "ActionCards.structure.InfectionStatusProperty"));
      SLinkOperations.setTarget(newInfectionStatus, LINKS.disease$NZ2B, SLinkOperations.getTarget(node, LINKS.disease$hEbp));
      SNode patientProperty = Sequence.fromIterable(SLinkOperations.collectMany(SModelOperations.roots(SNodeOperations.getModel(node), CONCEPTS.Patient$_D), LINKS.patientProperties$1osX)).where(new IWhereFilter<SNode>() {
        public boolean accept(SNode it) {
          return SNodeOperations.isInstanceOf(it, CONCEPTS.InfectionStatusProperty$al) && Objects.equals(SLinkOperations.getTarget(((SNode) it), LINKS.disease$NZ2B), SLinkOperations.getTarget(node, LINKS.disease$hEbp));
        }
      }).first();

      if ((patientProperty == null)) {
        ListSequence.fromList(SLinkOperations.getChildren(ListSequence.fromList(SModelOperations.roots(SNodeOperations.getModel(node), CONCEPTS.Patient$_D)).first(), LINKS.patientProperties$1osX)).addElement(newInfectionStatus);
      }

      SLinkOperations.setTarget(newAttributeTable, LINKS.patientProperty$d18a, Sequence.fromIterable(SLinkOperations.collectMany(SModelOperations.roots(SNodeOperations.getModel(node), CONCEPTS.Patient$_D), LINKS.patientProperties$1osX)).where(new IWhereFilter<SNode>() {
        public boolean accept(SNode it) {
          return SNodeOperations.isInstanceOf(it, CONCEPTS.InfectionStatusProperty$al) && Objects.equals(SLinkOperations.getTarget(((SNode) it), LINKS.disease$NZ2B), SLinkOperations.getTarget(node, LINKS.disease$hEbp));
        }
      }).first());
      for (int i = 0; i < 3; i++) {
        SNode newLine = SConceptOperations.createNewNode(MetaAdapterFactory.getConcept(0xb3cac82cd02446bcL, 0xb485624ad80c3cc2L, 0x25745663764b1a7cL, "ActionCards.structure.AttributeLine"));
        if (i == 0) {
          SLinkOperations.setTarget(newLine, LINKS.possibleValue$QY6s, SConceptOperations.createNewNode(MetaAdapterFactory.getConcept(0xbb69d08796cc48caL, 0xaeb6c2cb27e532b0L, 0x5dc1936ab3111925L, "DiseaseModel.structure.Susceptible")));
        } else if (i == 1) {
          SLinkOperations.setTarget(newLine, LINKS.possibleValue$QY6s, SConceptOperations.createNewNode(MetaAdapterFactory.getConcept(0xbb69d08796cc48caL, 0xaeb6c2cb27e532b0L, 0x5dc1936ab311194bL, "DiseaseModel.structure.Asymptomatic")));
        } else if (i == 2) {
          SLinkOperations.setTarget(newLine, LINKS.possibleValue$QY6s, SConceptOperations.createNewNode(MetaAdapterFactory.getConcept(0xbb69d08796cc48caL, 0xaeb6c2cb27e532b0L, 0x5dc1936ab3111938L, "DiseaseModel.structure.Symptomatic")));
        }
        ListSequence.fromList(SLinkOperations.getChildren(newAttributeTable, LINKS.attributeLines$amAy)).addElement(newLine);
      }
      ListSequence.fromList(SLinkOperations.getChildren(ListSequence.fromList(SModelOperations.roots(SNodeOperations.getModel(node), CONCEPTS.PatientProfile$he)).first(), LINKS.attributes$eds7)).addElement(newAttributeTable);
    }

    @Override
    public boolean isApplicable(final SNode node, final EditorContext editorContext) {
      if (!(isApplicableToNode(node, editorContext))) {
        return false;
      }
      return true;
    }

    private boolean isApplicableToNode(final SNode node, final EditorContext editorContext) {
      if (Sequence.fromIterable(SLinkOperations.collectMany(SModelOperations.roots(SNodeOperations.getModel(node), CONCEPTS.PatientProfile$he), LINKS.attributes$eds7)).where(new IWhereFilter<SNode>() {
        public boolean accept(SNode it) {
          return SNodeOperations.isInstanceOf(SLinkOperations.getTarget(it, LINKS.patientProperty$d18a), CONCEPTS.InfectionStatusProperty$al) && Objects.equals(SLinkOperations.getTarget(((SNode) SLinkOperations.getTarget(it, LINKS.patientProperty$d18a)), LINKS.disease$NZ2B), SLinkOperations.getTarget(node, LINKS.disease$hEbp));
        }
      }).isEmpty()) {

        return true;
      } else {
        return false;
      }
    }


    @Override
    public IntentionDescriptor getDescriptor() {
      return AddPatientAttribute_Intention.this;
    }

  }

  private static final class LINKS {
    /*package*/ static final SReferenceLink disease$NZ2B = MetaAdapterFactory.getReferenceLink(0xb3cac82cd02446bcL, 0xb485624ad80c3cc2L, 0x18668ef26f3e7089L, 0x18668ef26f40918bL, "disease");
    /*package*/ static final SReferenceLink disease$hEbp = MetaAdapterFactory.getReferenceLink(0xbb69d08796cc48caL, 0xaeb6c2cb27e532b0L, 0x29f0721df36170cL, 0x3f397d5ebb790a0cL, "disease");
    /*package*/ static final SContainmentLink patientProperties$1osX = MetaAdapterFactory.getContainmentLink(0x2fa21111132744d6L, 0x9000fd96b15fb9b6L, 0x4813ad0fbaa52b3L, 0x4813ad0fbaa52bdL, "patientProperties");
    /*package*/ static final SReferenceLink patientProperty$d18a = MetaAdapterFactory.getReferenceLink(0xb3cac82cd02446bcL, 0xb485624ad80c3cc2L, 0x25745663764b1a60L, 0x4813ad0fbaa5f13L, "patientProperty");
    /*package*/ static final SContainmentLink possibleValue$QY6s = MetaAdapterFactory.getContainmentLink(0xb3cac82cd02446bcL, 0xb485624ad80c3cc2L, 0x25745663764b1a7cL, 0x5dc1936ab296486eL, "possibleValue");
    /*package*/ static final SContainmentLink attributeLines$amAy = MetaAdapterFactory.getContainmentLink(0xb3cac82cd02446bcL, 0xb485624ad80c3cc2L, 0x25745663764b1a60L, 0x25745663764b1ad2L, "attributeLines");
    /*package*/ static final SContainmentLink attributes$eds7 = MetaAdapterFactory.getContainmentLink(0x2fa21111132744d6L, 0x9000fd96b15fb9b6L, 0xaabf015be947306L, 0xaabf015be951259L, "attributes");
  }

  private static final class CONCEPTS {
    /*package*/ static final SConcept Patient$_D = MetaAdapterFactory.getConcept(0x2fa21111132744d6L, 0x9000fd96b15fb9b6L, 0x4813ad0fbaa52b3L, "PatientLanguage.structure.Patient");
    /*package*/ static final SConcept InfectionStatusProperty$al = MetaAdapterFactory.getConcept(0xb3cac82cd02446bcL, 0xb485624ad80c3cc2L, 0x18668ef26f3e7089L, "ActionCards.structure.InfectionStatusProperty");
    /*package*/ static final SConcept PatientProfile$he = MetaAdapterFactory.getConcept(0x2fa21111132744d6L, 0x9000fd96b15fb9b6L, 0xaabf015be947306L, "PatientLanguage.structure.PatientProfile");
  }
}
