package BuiltEnvironment.editor;

/*Generated by MPS */

import jetbrains.mps.nodeEditor.EditorAspectDescriptorBase;
import jetbrains.mps.openapi.editor.descriptor.EditorHintsProvider;
import java.util.Collection;
import jetbrains.mps.openapi.editor.descriptor.ConceptEditorHint;
import java.util.Arrays;
import jetbrains.mps.editor.runtime.descriptor.ConceptEditorHintImpl;
import org.jetbrains.annotations.NotNull;
import jetbrains.mps.openapi.editor.descriptor.ConceptEditor;
import org.jetbrains.mps.openapi.language.SAbstractConcept;
import java.util.Collections;
import jetbrains.mps.openapi.editor.descriptor.SubstituteMenu;
import jetbrains.mps.lang.smodel.ConceptSwitchIndex;
import jetbrains.mps.lang.smodel.ConceptSwitchIndexBuilder;
import jetbrains.mps.smodel.adapter.ids.MetaIdFactory;

public class EditorAspectDescriptorImpl extends EditorAspectDescriptorBase implements EditorHintsProvider {
  private Collection<ConceptEditorHint> myHints = Arrays.<ConceptEditorHint>asList(new ConceptEditorHintImpl("diagram", "Diagram View", true, "BuiltEnvironment.editor.views.diagram"));
  @NotNull
  public Collection<ConceptEditor> getDeclaredEditors(SAbstractConcept concept) {
    SAbstractConcept cncpt = ((SAbstractConcept) concept);
    switch (conceptIndex.index(cncpt)) {
      case 0:
        return Collections.<ConceptEditor>singletonList(new ActorInstantiation_Editor());
      case 1:
        return Collections.<ConceptEditor>singletonList(new AdmissionBay_Editor());
      case 2:
        return Collections.<ConceptEditor>singletonList(new AdmissionBayList_Editor());
      case 3:
        return Arrays.asList(new ConceptEditor[]{new Area_Editor(), new Area_diagram_Editor()});
      case 4:
        return Collections.<ConceptEditor>singletonList(new DateTimeNowVariable_Editor());
      case 5:
        return Collections.<ConceptEditor>singletonList(new MapImporter_Editor());
      case 6:
        return Collections.<ConceptEditor>singletonList(new Resource_Editor());
      case 7:
        return Collections.<ConceptEditor>singletonList(new ResourceAllocation_Editor());
      case 8:
        return Collections.<ConceptEditor>singletonList(new ResourceAvailabilityVariable_Editor());
      case 9:
        return Arrays.asList(new ConceptEditor[]{new Room_Editor(), new Room_diagram_Editor()});
      case 10:
        return Collections.<ConceptEditor>singletonList(new RoomInstanceDefinition_Editor());
      case 11:
        return Collections.<ConceptEditor>singletonList(new ScenarioBuilder_Editor());
      case 12:
        return Collections.<ConceptEditor>singletonList(new TimeOfDayVariable_Editor());
      case 13:
        return Collections.<ConceptEditor>singletonList(new TimeOfDayWrapper_Editor());
      case 14:
        return Collections.<ConceptEditor>singletonList(new WallDefinition_Editor());
      case 15:
        return Collections.<ConceptEditor>singletonList(new WallInstanceDefinition_Editor());
      default:
    }
    return Collections.<ConceptEditor>emptyList();
  }

  public Collection<ConceptEditorHint> getHints() {
    return myHints;
  }

  @NotNull
  @Override
  public Collection<SubstituteMenu> getDeclaredDefaultSubstituteMenus(SAbstractConcept concept) {
    SAbstractConcept cncpt = concept;
    switch (conceptIndex1.index(cncpt)) {
      case 0:
        return Collections.<SubstituteMenu>singletonList(new ResourceAllocation_SubstituteMenu());
      case 1:
        return Collections.<SubstituteMenu>singletonList(new ResourceAvailabilityVariable_SubstituteMenu());
      case 2:
        return Collections.<SubstituteMenu>singletonList(new RoomInstanceDefinition_SubstituteMenu());
      default:
    }
    return Collections.<SubstituteMenu>emptyList();
  }

  private static final ConceptSwitchIndex conceptIndex = new ConceptSwitchIndexBuilder().put(MetaIdFactory.conceptId(0x1a0150acdda54129L, 0x824e01dce96fdea4L, 0x35463334ce2f7b02L), MetaIdFactory.conceptId(0x1a0150acdda54129L, 0x824e01dce96fdea4L, 0xc489c6b16b4a524L), MetaIdFactory.conceptId(0x1a0150acdda54129L, 0x824e01dce96fdea4L, 0xc489c6b16b4a529L), MetaIdFactory.conceptId(0x1a0150acdda54129L, 0x824e01dce96fdea4L, 0x3c282c112f249082L), MetaIdFactory.conceptId(0x1a0150acdda54129L, 0x824e01dce96fdea4L, 0x3bf86d07f43264edL), MetaIdFactory.conceptId(0x1a0150acdda54129L, 0x824e01dce96fdea4L, 0xaabf015bed74217L), MetaIdFactory.conceptId(0x1a0150acdda54129L, 0x824e01dce96fdea4L, 0x3bf86d07f032c8d7L), MetaIdFactory.conceptId(0x1a0150acdda54129L, 0x824e01dce96fdea4L, 0x3bf86d07ef54c6b7L), MetaIdFactory.conceptId(0x1a0150acdda54129L, 0x824e01dce96fdea4L, 0x3bf86d07f2b57f6bL), MetaIdFactory.conceptId(0x1a0150acdda54129L, 0x824e01dce96fdea4L, 0x3c282c112f249042L), MetaIdFactory.conceptId(0x1a0150acdda54129L, 0x824e01dce96fdea4L, 0x3c282c112f249045L), MetaIdFactory.conceptId(0x1a0150acdda54129L, 0x824e01dce96fdea4L, 0x35463334ce2f7b00L), MetaIdFactory.conceptId(0x1a0150acdda54129L, 0x824e01dce96fdea4L, 0x3bf86d07f429da00L), MetaIdFactory.conceptId(0x1a0150acdda54129L, 0x824e01dce96fdea4L, 0x3bf86d07f4a23f47L), MetaIdFactory.conceptId(0x1a0150acdda54129L, 0x824e01dce96fdea4L, 0x109830a68a82ca51L), MetaIdFactory.conceptId(0x1a0150acdda54129L, 0x824e01dce96fdea4L, 0x109830a68a78a1e8L)).seal();
  private static final ConceptSwitchIndex conceptIndex1 = new ConceptSwitchIndexBuilder().put(MetaIdFactory.conceptId(0x1a0150acdda54129L, 0x824e01dce96fdea4L, 0x3bf86d07ef54c6b7L), MetaIdFactory.conceptId(0x1a0150acdda54129L, 0x824e01dce96fdea4L, 0x3bf86d07f2b57f6bL), MetaIdFactory.conceptId(0x1a0150acdda54129L, 0x824e01dce96fdea4L, 0x3c282c112f249045L)).seal();
}
