package RunnerLanguage.behavior;

/*Generated by MPS */

import jetbrains.mps.core.aspects.behaviour.BaseBHDescriptor;
import org.jetbrains.mps.openapi.language.SAbstractConcept;
import jetbrains.mps.smodel.adapter.structure.MetaAdapterFactory;
import jetbrains.mps.core.aspects.behaviour.api.SMethod;
import jetbrains.mps.core.aspects.behaviour.SMethodBuilder;
import jetbrains.mps.core.aspects.behaviour.SJavaCompoundTypeImpl;
import jetbrains.mps.core.aspects.behaviour.AccessPrivileges;
import java.util.List;
import java.util.Arrays;
import org.jetbrains.annotations.NotNull;
import org.jetbrains.mps.openapi.model.SNode;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SPropertyOperations;
import jetbrains.mps.core.aspects.behaviour.api.SConstructor;
import org.jetbrains.annotations.Nullable;
import jetbrains.mps.core.aspects.behaviour.api.BHMethodNotFoundException;
import org.jetbrains.mps.openapi.language.SProperty;

public final class Runner__BehaviorDescriptor extends BaseBHDescriptor {
  private static final SAbstractConcept CONCEPT = MetaAdapterFactory.getConcept(0x3fb39b69f96e474bL, 0xa5f6477776571ddfL, 0x596b60deef3964dcL, "RunnerLanguage.structure.Runner");

  public static final SMethod<String> GetProjectAddress_id1wal9D1amCA = new SMethodBuilder<String>(new SJavaCompoundTypeImpl(String.class)).name("GetProjectAddress").modifiers(0, AccessPrivileges.PUBLIC).concept(CONCEPT).id("1wal9D1amCA").build();
  public static final SMethod<String> GetBaseAddress_id72S_VmfixC_ = new SMethodBuilder<String>(new SJavaCompoundTypeImpl(String.class)).name("GetBaseAddress").modifiers(0, AccessPrivileges.PUBLIC).concept(CONCEPT).id("72S_VmfixC_").build();
  public static final SMethod<String> getRepastSettingsFolder_id72S_Vmffr8J = new SMethodBuilder<String>(new SJavaCompoundTypeImpl(String.class)).name("getRepastSettingsFolder").modifiers(0, AccessPrivileges.PUBLIC).concept(CONCEPT).id("72S_Vmffr8J").build();
  public static final SMethod<String> getClassFolderFolder_id72S_Vmffs$u = new SMethodBuilder<String>(new SJavaCompoundTypeImpl(String.class)).name("getClassFolderFolder").modifiers(0, AccessPrivileges.PUBLIC).concept(CONCEPT).id("72S_Vmffs$u").build();
  public static final SMethod<String> getSourceFolderFolder_id72S_Vmfft02 = new SMethodBuilder<String>(new SJavaCompoundTypeImpl(String.class)).name("getSourceFolderFolder").modifiers(0, AccessPrivileges.PUBLIC).concept(CONCEPT).id("72S_Vmfft02").build();
  public static final SMethod<String> ReplaceForwardSlashesWithBackSlashes_id2vFOz$Gzz4V = new SMethodBuilder<String>(new SJavaCompoundTypeImpl(String.class)).name("ReplaceForwardSlashesWithBackSlashes").modifiers(0, AccessPrivileges.PUBLIC).concept(CONCEPT).id("2vFOz$Gzz4V").build(SMethodBuilder.createJavaParameter(String.class, ""));

  private static final List<SMethod<?>> BH_METHODS = Arrays.<SMethod<?>>asList(GetProjectAddress_id1wal9D1amCA, GetBaseAddress_id72S_VmfixC_, getRepastSettingsFolder_id72S_Vmffr8J, getClassFolderFolder_id72S_Vmffs$u, getSourceFolderFolder_id72S_Vmfft02, ReplaceForwardSlashesWithBackSlashes_id2vFOz$Gzz4V);

  private static void ___init___(@NotNull SNode __thisNode__) {
  }

  /*package*/ static String GetProjectAddress_id1wal9D1amCA(@NotNull SNode __thisNode__) {
    String s = SPropertyOperations.getString(__thisNode__, PROPS.addr$49ha) + "/solutions/" + SPropertyOperations.getString(__thisNode__, PROPS.projectName$p3Pl);

    return s;
  }
  /*package*/ static String GetBaseAddress_id72S_VmfixC_(@NotNull SNode __thisNode__) {
    return Runner__BehaviorDescriptor.ReplaceForwardSlashesWithBackSlashes_id2vFOz$Gzz4V.invoke(__thisNode__, SPropertyOperations.getString(__thisNode__, PROPS.addr$49ha));
  }
  /*package*/ static String getRepastSettingsFolder_id72S_Vmffr8J(@NotNull SNode __thisNode__) {
    return Runner__BehaviorDescriptor.GetProjectAddress_id1wal9D1amCA.invoke(__thisNode__) + "/classes_gen/" + SPropertyOperations.getString(__thisNode__, PROPS.projectName$p3Pl) + "/AC1";
    // WINDOWS BELOW
  }
  /*package*/ static String getClassFolderFolder_id72S_Vmffs$u(@NotNull SNode __thisNode__) {
    return Runner__BehaviorDescriptor.GetProjectAddress_id1wal9D1amCA.invoke(__thisNode__) + "/classes_gen/EDLanguage/sandbox";
    // WINDOWS BELOW
  }
  /*package*/ static String getSourceFolderFolder_id72S_Vmfft02(@NotNull SNode __thisNode__) {

    return Runner__BehaviorDescriptor.GetProjectAddress_id1wal9D1amCA.invoke(__thisNode__) + "/source_gen/EDLanguage/sandbox";

    // WINDOWS BELOW
  }
  /*package*/ static String ReplaceForwardSlashesWithBackSlashes_id2vFOz$Gzz4V(@NotNull SNode __thisNode__, String inputString) {
    String result = "";

    String[] addrs = inputString.split("\\\\");

    for (int i = 0; i < addrs.length; i++) {
      result += addrs[i];
      result += "\\\\";
    }

    return result;
  }

  /*package*/ Runner__BehaviorDescriptor() {
  }

  @Override
  protected void initNode(@NotNull SNode node, @NotNull SConstructor constructor, @Nullable Object[] parameters) {
    ___init___(node);
  }

  @Override
  protected <T> T invokeSpecial0(@NotNull SNode node, @NotNull SMethod<T> method, @Nullable Object[] parameters) {
    int methodIndex = BH_METHODS.indexOf(method);
    if (methodIndex < 0) {
      throw new BHMethodNotFoundException(this, method);
    }
    switch (methodIndex) {
      case 0:
        return (T) ((String) GetProjectAddress_id1wal9D1amCA(node));
      case 1:
        return (T) ((String) GetBaseAddress_id72S_VmfixC_(node));
      case 2:
        return (T) ((String) getRepastSettingsFolder_id72S_Vmffr8J(node));
      case 3:
        return (T) ((String) getClassFolderFolder_id72S_Vmffs$u(node));
      case 4:
        return (T) ((String) getSourceFolderFolder_id72S_Vmfft02(node));
      case 5:
        return (T) ((String) ReplaceForwardSlashesWithBackSlashes_id2vFOz$Gzz4V(node, (String) parameters[0]));
      default:
        throw new BHMethodNotFoundException(this, method);
    }
  }

  @Override
  protected <T> T invokeSpecial0(@NotNull SAbstractConcept concept, @NotNull SMethod<T> method, @Nullable Object[] parameters) {
    int methodIndex = BH_METHODS.indexOf(method);
    if (methodIndex < 0) {
      throw new BHMethodNotFoundException(this, method);
    }
    switch (methodIndex) {
      default:
        throw new BHMethodNotFoundException(this, method);
    }
  }

  @NotNull
  @Override
  public List<SMethod<?>> getDeclaredMethods() {
    return BH_METHODS;
  }

  @NotNull
  @Override
  public SAbstractConcept getConcept() {
    return CONCEPT;
  }

  private static final class PROPS {
    /*package*/ static final SProperty projectName$p3Pl = MetaAdapterFactory.getProperty(0x3fb39b69f96e474bL, 0xa5f6477776571ddfL, 0x596b60deef3964dcL, 0x70b897b58f3d5786L, "projectName");
    /*package*/ static final SProperty addr$49ha = MetaAdapterFactory.getProperty(0x3fb39b69f96e474bL, 0xa5f6477776571ddfL, 0x596b60deef3964dcL, 0x596b60deef396633L, "addr");
  }
}
