package ActionCards.structure;

/*Generated by MPS */

import jetbrains.mps.smodel.runtime.ConceptPresentationAspectBase;
import jetbrains.mps.smodel.runtime.ConceptPresentation;
import org.jetbrains.annotations.Nullable;
import org.jetbrains.mps.openapi.language.SAbstractConcept;
import jetbrains.mps.smodel.runtime.ConceptPresentationBuilder;

public class ConceptPresentationAspectImpl extends ConceptPresentationAspectBase {
  private ConceptPresentation props_Action;
  private ConceptPresentation props_ActionCard;
  private ConceptPresentation props_ActionStep;
  private ConceptPresentation props_AdmissionAction;
  private ConceptPresentation props_AtributeLine;
  private ConceptPresentation props_Attribute;
  private ConceptPresentation props_AttributeTable;
  private ConceptPresentation props_Branch;
  private ConceptPresentation props_DiagnosticCondition;
  private ConceptPresentation props_Disease;
  private ConceptPresentation props_DiseaseInitialiserLine;
  private ConceptPresentation props_DiseaseInitialiserTable;
  private ConceptPresentation props_DiseaseList;
  private ConceptPresentation props_EDScenario;
  private ConceptPresentation props_GoToAction;
  private ConceptPresentation props_PatientArrivalLine;
  private ConceptPresentation props_PatientArrivals;
  private ConceptPresentation props_PatientProfile;
  private ConceptPresentation props_ProcessingTimeLine;
  private ConceptPresentation props_ProcessingTimeTable;
  private ConceptPresentation props_Resource;
  private ConceptPresentation props_StaffNumber;
  private ConceptPresentation props_StaffType;
  private ConceptPresentation props_StaffTypeReference;
  private ConceptPresentation props_Test;
  private ConceptPresentation props_TestCapturedDisease;
  private ConceptPresentation props_Variable;

  @Override
  @Nullable
  public ConceptPresentation getDescriptor(SAbstractConcept c) {
    StructureAspectDescriptor structureDescriptor = (StructureAspectDescriptor) myLanguageRuntime.getAspect(jetbrains.mps.smodel.runtime.StructureAspectDescriptor.class);
    switch (structureDescriptor.internalIndex(c)) {
      case LanguageConceptSwitch.Action:
        if (props_Action == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.shortDesc("A task that must be completed");
          cpb.presentationByName();
          props_Action = cpb.create();
        }
        return props_Action;
      case LanguageConceptSwitch.ActionCard:
        if (props_ActionCard == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.shortDesc("Overall Description of a patient pathway");
          cpb.rawPresentation("Action Card");
          props_ActionCard = cpb.create();
        }
        return props_ActionCard;
      case LanguageConceptSwitch.ActionStep:
        if (props_ActionStep == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.shortDesc("Individual steps of an Action");
          cpb.rawPresentation("ActionStep");
          props_ActionStep = cpb.create();
        }
        return props_ActionStep;
      case LanguageConceptSwitch.AdmissionAction:
        if (props_AdmissionAction == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.presentationByName();
          props_AdmissionAction = cpb.create();
        }
        return props_AdmissionAction;
      case LanguageConceptSwitch.AtributeLine:
        if (props_AtributeLine == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.presentationByReference(0xb3cac82cd02446bcL, 0xb485624ad80c3cc2L, 0x25745663764b1a7cL, 0x25745663764b1ac7L, "attribute", "", "");
          props_AtributeLine = cpb.create();
        }
        return props_AtributeLine;
      case LanguageConceptSwitch.Attribute:
        if (props_Attribute == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.presentationByName();
          props_Attribute = cpb.create();
        }
        return props_Attribute;
      case LanguageConceptSwitch.AttributeTable:
        if (props_AttributeTable == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.rawPresentation("AttributeTable");
          props_AttributeTable = cpb.create();
        }
        return props_AttributeTable;
      case LanguageConceptSwitch.Branch:
        if (props_Branch == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.shortDesc("Connect Activities using this Branch");
          cpb.rawPresentation("Branch");
          props_Branch = cpb.create();
        }
        return props_Branch;
      case LanguageConceptSwitch.DiagnosticCondition:
        if (props_DiagnosticCondition == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.rawPresentation("diagnostic condition");
          props_DiagnosticCondition = cpb.create();
        }
        return props_DiagnosticCondition;
      case LanguageConceptSwitch.Disease:
        if (props_Disease == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.presentationByName();
          props_Disease = cpb.create();
        }
        return props_Disease;
      case LanguageConceptSwitch.DiseaseInitialiserLine:
        if (props_DiseaseInitialiserLine == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.rawPresentation("DiseaseInitialiserLine");
          props_DiseaseInitialiserLine = cpb.create();
        }
        return props_DiseaseInitialiserLine;
      case LanguageConceptSwitch.DiseaseInitialiserTable:
        if (props_DiseaseInitialiserTable == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.rawPresentation("DiseaseInitialiserTable");
          props_DiseaseInitialiserTable = cpb.create();
        }
        return props_DiseaseInitialiserTable;
      case LanguageConceptSwitch.DiseaseList:
        if (props_DiseaseList == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.rawPresentation("DiseaseList");
          props_DiseaseList = cpb.create();
        }
        return props_DiseaseList;
      case LanguageConceptSwitch.EDScenario:
        if (props_EDScenario == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.rawPresentation("EDScenario");
          props_EDScenario = cpb.create();
        }
        return props_EDScenario;
      case LanguageConceptSwitch.GoToAction:
        if (props_GoToAction == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.rawPresentation("Go to a place");
          props_GoToAction = cpb.create();
        }
        return props_GoToAction;
      case LanguageConceptSwitch.PatientArrivalLine:
        if (props_PatientArrivalLine == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.rawPresentation("PatientArrivalLine");
          props_PatientArrivalLine = cpb.create();
        }
        return props_PatientArrivalLine;
      case LanguageConceptSwitch.PatientArrivals:
        if (props_PatientArrivals == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.rawPresentation("Patient Arrivals");
          props_PatientArrivals = cpb.create();
        }
        return props_PatientArrivals;
      case LanguageConceptSwitch.PatientProfile:
        if (props_PatientProfile == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.shortDesc("The patient");
          cpb.presentationByName();
          props_PatientProfile = cpb.create();
        }
        return props_PatientProfile;
      case LanguageConceptSwitch.ProcessingTimeLine:
        if (props_ProcessingTimeLine == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.rawPresentation("ProcessingTimeLine");
          props_ProcessingTimeLine = cpb.create();
        }
        return props_ProcessingTimeLine;
      case LanguageConceptSwitch.ProcessingTimeTable:
        if (props_ProcessingTimeTable == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.rawPresentation("Test processing time table");
          props_ProcessingTimeTable = cpb.create();
        }
        return props_ProcessingTimeTable;
      case LanguageConceptSwitch.Resource:
        if (props_Resource == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.shortDesc("A resource in the hospital");
          cpb.presentationByName();
          props_Resource = cpb.create();
        }
        return props_Resource;
      case LanguageConceptSwitch.StaffNumber:
        if (props_StaffNumber == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.presentationByReference(0xb3cac82cd02446bcL, 0xb485624ad80c3cc2L, 0x4af9c647eff82e7bL, 0x4af9c647eff82e87L, "staff", "", "");
          props_StaffNumber = cpb.create();
        }
        return props_StaffNumber;
      case LanguageConceptSwitch.StaffType:
        if (props_StaffType == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.shortDesc("Staff type in the ED");
          cpb.presentationByName();
          props_StaffType = cpb.create();
        }
        return props_StaffType;
      case LanguageConceptSwitch.StaffTypeReference:
        if (props_StaffTypeReference == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.presentationByReference(0xb3cac82cd02446bcL, 0xb485624ad80c3cc2L, 0x4af9c647efda3a80L, 0x4af9c647efda3aa5L, "staffType", "", "");
          props_StaffTypeReference = cpb.create();
        }
        return props_StaffTypeReference;
      case LanguageConceptSwitch.Test:
        if (props_Test == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.shortDesc("Type of a test");
          cpb.presentationByName();
          props_Test = cpb.create();
        }
        return props_Test;
      case LanguageConceptSwitch.TestCapturedDisease:
        if (props_TestCapturedDisease == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.presentationByName();
          props_TestCapturedDisease = cpb.create();
        }
        return props_TestCapturedDisease;
      case LanguageConceptSwitch.Variable:
        if (props_Variable == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.rawPresentation("Variable");
          props_Variable = cpb.create();
        }
        return props_Variable;
    }
    return null;
  }
}
