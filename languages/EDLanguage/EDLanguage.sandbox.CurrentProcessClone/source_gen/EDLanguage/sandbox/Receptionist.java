package EDLanguage.sandbox;

/*Generated by MPS */

import simcore.action.Behaviour;
import repast.simphony.space.continuous.ContinuousSpace;
import repast.simphony.space.grid.Grid;
import simcore.Signals.Signal;
import simcore.action.BehaviourStep;
import simcore.basicStructures.RoomType;
import simcore.basicStructures.Room;
import simcore.basicStructures.Occupiable;
import simcore.basicStructures.Desk;
import simcore.agents.Patient;
import simcore.Signals.Orders.MoveToOrder;
import simcore.action.PassiveBehaviourStep;
import simcore.basicStructures.Board;
import java.util.ArrayList;

public class Receptionist extends Staff {

  public double groupStress = Double.parseDouble("" + "0");
  public Behaviour behaviourBuilder;

  public Receptionist(ContinuousSpace<Object> space, Grid<Object> grid) {
    super(space, grid);
    mintMyMaxPatients = 0;
  }

  public Receptionist(ContinuousSpace<Object> space, Grid<Object> grid, String pstrStartLocation) {
    super(space, grid, pstrStartLocation);
  }

  public Behaviour BuildActionFromSignal(Signal s) {
    switch (s.getName()) {
      case "":
        break;
      case "NewPatientArrive":
        behaviourBuilder = new Behaviour("NewPatientArrive");
        this.InitInspect(s);
        break;
      default:
        System.out.println("Set mission: " + s.getName() + " failed!");
        return behaviourBuilder;
    }
    return behaviourBuilder;
  }

  public class MoveAction_a0a_3 extends BehaviourStep {
    /*package*/ Behaviour behaviour;
    /*package*/ Object target;
    /*package*/ Object concreteTarget;
    public MoveAction_a0a_3(Behaviour behaviour) {
      target = ReadMap().FindPlace("Triage");
      this.behaviour = behaviour;
    }

    public void execute() {
      if (concreteTarget == null) {
        if (target instanceof RoomType) {
          concreteTarget = SelectLocation(((RoomType) target));
        } else {
          concreteTarget = target;
        }
      }

      if (target instanceof RoomType) {
        if (EvaluateRoomChoice(((Room) concreteTarget)) == 0) {
          concreteTarget = SelectLocation(((RoomType) target));
        }
      }

      MoveTowards(concreteTarget);
    }

    public boolean finishCondition() {
      return ImAt(concreteTarget);
    }
  }
  public class OccupyAction_b0a_3 extends BehaviourStep {
    /*package*/ Behaviour behaviour;
    /*package*/ Class target;
    /*package*/ Occupiable concreteTarget;
    public OccupyAction_b0a_3(Behaviour behaviour) {
      target = Desk.class;
      this.behaviour = behaviour;
    }

    public void execute() {
      if (concreteTarget == null) {
        concreteTarget = SelectOccupiable(curInside, target);
      } else if (concreteTarget.getOccupier() != null && concreteTarget.getOccupier() != Receptionist.this) {
        FindAnOccupiable(target);
      }


      MoveTowards(concreteTarget);
    }

    public boolean finishCondition() {
      if (ImAt(concreteTarget)) {
        concreteTarget.setOccupier(Receptionist.this);
        return true;
      } else {
        return false;
      }
    }
  }
  public class OrderAction_c0a_3 extends BehaviourStep {
    /*package*/ Behaviour behaviour;
    public OrderAction_c0a_3(Behaviour behaviour) {
      this.behaviour = behaviour;
    }

    public void execute() {
      Patient p = behaviour.getPatient();

      p.TakeOrder(new MoveToOrder().WithDestination(Receptionist.this));
    }
  }
  public class StayAction_d0a_3 extends PassiveBehaviourStep {
    /*package*/ Behaviour behaviour;
    /*package*/ int timeExecuted = 0;
    public StayAction_d0a_3(Behaviour behaviour) {
      this.behaviour = behaviour;
    }

    public void execute() {
      // Do nothing 
      timeExecuted++;
    }

    public boolean finishCondition() {
      return timeExecuted == 3;
    }
  }
  public class OrderAction_e0a extends BehaviourStep {
    /*package*/ Behaviour behaviour;
    public OrderAction_e0a(Behaviour behaviour) {
      this.behaviour = behaviour;
    }

    public void execute() {
      Patient p = behaviour.getPatient();

      p.TakeOrder(new MoveToOrder().WithDestination(ReadMap().FindPlace("TriageWaitingRoom")));
    }
  }
  public class SendSignalAction_f0a extends BehaviourStep {
    /*package*/ Behaviour behaviour;

    public SendSignalAction_f0a(Behaviour behaviour) {
      this.behaviour = behaviour;
    }

    public void execute() {
      Board b = ReadBoard();
      Signal sendSignalTemp = new Signal();
      sendSignalTemp = new PatientWaitingForMajorsSignal();
      sendSignalTemp.AddData("patient", behaviour.getSignalTrigger().GetData("patient"));

      b.PushMission(sendSignalTemp);
    }
  }
  public class MoveAction_a0a_5 extends BehaviourStep {
    /*package*/ Behaviour behaviour;
    /*package*/ Object target;
    /*package*/ Object concreteTarget;
    public MoveAction_a0a_5(Behaviour behaviour) {
      target = ReadMap().FindPlace("Triage");
      this.behaviour = behaviour;
    }

    public void execute() {
      if (concreteTarget == null) {
        if (target instanceof RoomType) {
          concreteTarget = SelectLocation(((RoomType) target));
        } else {
          concreteTarget = target;
        }
      }

      if (target instanceof RoomType) {
        if (EvaluateRoomChoice(((Room) concreteTarget)) == 0) {
          concreteTarget = SelectLocation(((RoomType) target));
        }
      }

      MoveTowards(concreteTarget);
    }

    public boolean finishCondition() {
      return ImAt(concreteTarget);
    }
  }
  public class OccupyAction_b0a_5 extends BehaviourStep {
    /*package*/ Behaviour behaviour;
    /*package*/ Class target;
    /*package*/ Occupiable concreteTarget;
    public OccupyAction_b0a_5(Behaviour behaviour) {
      target = Desk.class;
      this.behaviour = behaviour;
    }

    public void execute() {
      if (concreteTarget == null) {
        concreteTarget = SelectOccupiable(curInside, target);
      } else if (concreteTarget.getOccupier() != null && concreteTarget.getOccupier() != Receptionist.this) {
        FindAnOccupiable(target);
      }


      MoveTowards(concreteTarget);
    }

    public boolean finishCondition() {
      if (ImAt(concreteTarget)) {
        concreteTarget.setOccupier(Receptionist.this);
        return true;
      } else {
        return false;
      }
    }
  }
  public class OrderAction_c0a_5 extends BehaviourStep {
    /*package*/ Behaviour behaviour;
    public OrderAction_c0a_5(Behaviour behaviour) {
      this.behaviour = behaviour;
    }

    public void execute() {
      Patient p = behaviour.getPatient();

      p.TakeOrder(new MoveToOrder().WithDestination(Receptionist.this));
    }
  }
  public class StayAction_d0a_5 extends PassiveBehaviourStep {
    /*package*/ Behaviour behaviour;
    /*package*/ int timeExecuted = 0;
    public StayAction_d0a_5(Behaviour behaviour) {
      this.behaviour = behaviour;
    }

    public void execute() {
      // Do nothing 
      timeExecuted++;
    }

    public boolean finishCondition() {
      return timeExecuted == 3;
    }
  }
  public class OrderAction_e0a_1 extends BehaviourStep {
    /*package*/ Behaviour behaviour;
    public OrderAction_e0a_1(Behaviour behaviour) {
      this.behaviour = behaviour;
    }

    public void execute() {
      Patient p = behaviour.getPatient();

      p.TakeOrder(new MoveToOrder().WithDestination(ReadMap().FindPlace("TriageWaitingRoom")));
    }
  }
  public class SendSignalAction_f0a_1 extends BehaviourStep {
    /*package*/ Behaviour behaviour;

    public SendSignalAction_f0a_1(Behaviour behaviour) {
      this.behaviour = behaviour;
    }

    public void execute() {
      Board b = ReadBoard();
      Signal sendSignalTemp = new Signal();
      sendSignalTemp = new PatientWaitingForMajorsSignal();
      sendSignalTemp.AddData("patient", behaviour.getSignalTrigger().GetData("patient"));

      b.PushMission(sendSignalTemp);
    }
  }
  public class OrderAction_a0b extends BehaviourStep {
    /*package*/ Behaviour behaviour;
    public OrderAction_a0b(Behaviour behaviour) {
      this.behaviour = behaviour;
    }

    public void execute() {
      Patient p = behaviour.getPatient();

      p.TakeOrder(new MoveToOrder().WithDestination(ReadMap().FindPlace("TriageWaitingRoom")));
    }
  }
  public class SendSignalAction_b0b extends BehaviourStep {
    /*package*/ Behaviour behaviour;

    public SendSignalAction_b0b(Behaviour behaviour) {
      this.behaviour = behaviour;
    }

    public void execute() {
      Board b = ReadBoard();
      Signal sendSignalTemp = new Signal();
      sendSignalTemp = new PatientWaitingForMajorsABSignal();
      sendSignalTemp.AddData("patient", behaviour.getSignalTrigger().GetData("patient"));

      b.PushMission(sendSignalTemp);
    }
  }
  public class OrderAction_a0b_1 extends BehaviourStep {
    /*package*/ Behaviour behaviour;
    public OrderAction_a0b_1(Behaviour behaviour) {
      this.behaviour = behaviour;
    }

    public void execute() {
      Patient p = behaviour.getPatient();

      p.TakeOrder(new MoveToOrder().WithDestination(ReadMap().FindPlace("TriageWaitingRoom")));
    }
  }
  public class SendSignalAction_b0b_1 extends BehaviourStep {
    /*package*/ Behaviour behaviour;

    public SendSignalAction_b0b_1(Behaviour behaviour) {
      this.behaviour = behaviour;
    }

    public void execute() {
      Board b = ReadBoard();
      Signal sendSignalTemp = new Signal();
      sendSignalTemp = new PatientWaitingForMajorsABSignal();
      sendSignalTemp.AddData("patient", behaviour.getSignalTrigger().GetData("patient"));

      b.PushMission(sendSignalTemp);
    }
  }


  public void InitInspect(Signal s) {
    behaviourBuilder.setSignalTrigger(s);
    ArrayList<BehaviourStep> plstSteps = new ArrayList();
    plstSteps.add(new MoveAction_a0a_3(behaviourBuilder));
    plstSteps.add(new OccupyAction_b0a_3(behaviourBuilder));
    plstSteps.add(new OrderAction_c0a_3(behaviourBuilder));
    plstSteps.add(new StayAction_d0a_3(behaviourBuilder));
    plstSteps.add(new OrderAction_e0a(behaviourBuilder));
    plstSteps.add(new SendSignalAction_f0a(behaviourBuilder));
    behaviourBuilder.setSteps(plstSteps);

    Signal sendSignalTemp = new Signal();

  }

}
