package EDLanguage.sandbox;

/*Generated by MPS */

import simcore.action.Behaviour;
import repast.simphony.space.continuous.ContinuousSpace;
import repast.simphony.space.grid.Grid;
import simcore.Signals.Signal;
import simcore.action.BehaviourStep;
import simcore.basicStructures.Board;
import simcore.diagnosis.TestResult;
import java.util.ArrayList;
import simcore.Signals.DirectSignal;

public class LIATMachine extends Staff {

  public double groupStress = Double.parseDouble("" + "0");
  public Behaviour behaviourBuilder;

  public LIATMachine(ContinuousSpace<Object> space, Grid<Object> grid) {
    super(space, grid);
    mintMyMaxPatients = 0;
  }

  public LIATMachine(ContinuousSpace<Object> space, Grid<Object> grid, String pstrStartLocation) {
    super(space, grid, pstrStartLocation);
  }

  public Behaviour BuildActionFromSignal(Signal s) {
    switch (s.getName()) {
      case "":
        break;
      case "IsLIATReady":
        behaviourBuilder = new Behaviour("IsLIATReady");
        this.InitStateFree(s);
        break;
      case "ConductLIAT":
        behaviourBuilder = new Behaviour("ConductLIAT");
        this.InitTestPatientGeneral(s);
        break;
      case "ConductLIATTrackAndTrace":
        behaviourBuilder = new Behaviour("ConductLIATTrackAndTrace");
        this.InitTestPatientTrackAndTrace(s);
        break;
      default:
        System.out.println("Set mission: " + s.getName() + " failed!");
        return behaviourBuilder;
    }
    return behaviourBuilder;
  }

  public class SendSignalAction_a0a extends BehaviourStep {
    /*package*/ Behaviour behaviour;

    public SendSignalAction_a0a(Behaviour behaviour) {
      this.behaviour = behaviour;
    }

    public void execute() {
      Board b = ReadBoard();
      Signal sendSignalTemp = new Signal();
      sendSignalTemp = new LIATIsReadySignal();

      b.PushMission(sendSignalTemp);
    }
  }
  public class SendSignalAction_a0a_1 extends BehaviourStep {
    /*package*/ Behaviour behaviour;

    public SendSignalAction_a0a_1(Behaviour behaviour) {
      this.behaviour = behaviour;
    }

    public void execute() {
      Board b = ReadBoard();
      Signal sendSignalTemp = new Signal();
      sendSignalTemp = new LIATIsReadySignal();

      b.PushMission(sendSignalTemp);
    }
  }
  public class TestAction_a0b_3 extends BehaviourStep {
    /*package*/ Behaviour behaviour;
    /*package*/ int testingTime = LIAT.getInstance().getProcessingTime();
    /*package*/ int timeExecuted = 0;
    /*package*/ TestResult testResult;
    public TestAction_a0b_3(Behaviour behaviour) {
      this.behaviour = behaviour;
    }

    public void execute() {
      if (timeExecuted == 0) {
        testResult = LIAT.getInstance().TestPatient(behaviour.getPatient());
      }

      timeExecuted++;

      if (timeExecuted == testingTime) {
        if (testResult.isInfected()) {
          ArrayList<BehaviourStep> plstSteps = new ArrayList();
          plstSteps.add(new SendSignalAction_a0a0b_7(behaviour));
          behaviour.injectSteps(plstSteps);
        } else {
          ArrayList<BehaviourStep> plstSteps = new ArrayList();
          plstSteps.add(new SendSignalAction_a0a0b_11(behaviour));
          behaviour.injectSteps(plstSteps);
        }
      }
    }

    public boolean finishCondition() {
      return timeExecuted == testingTime;
    }
  }
  public class TestAction_a0b_5 extends BehaviourStep {
    /*package*/ Behaviour behaviour;
    /*package*/ int testingTime = LIAT.getInstance().getProcessingTime();
    /*package*/ int timeExecuted = 0;
    /*package*/ TestResult testResult;
    public TestAction_a0b_5(Behaviour behaviour) {
      this.behaviour = behaviour;
    }

    public void execute() {
      if (timeExecuted == 0) {
        testResult = LIAT.getInstance().TestPatient(behaviour.getPatient());
      }

      timeExecuted++;

      if (timeExecuted == testingTime) {
        if (testResult.isInfected()) {
          ArrayList<BehaviourStep> plstSteps = new ArrayList();
          plstSteps.add(new SendSignalAction_a0a0b_7(behaviour));
          behaviour.injectSteps(plstSteps);
        } else {
          ArrayList<BehaviourStep> plstSteps = new ArrayList();
          plstSteps.add(new SendSignalAction_a0a0b_11(behaviour));
          behaviour.injectSteps(plstSteps);
        }
      }
    }

    public boolean finishCondition() {
      return timeExecuted == testingTime;
    }
  }
  public class SendSignalAction_a0a0b_7 extends BehaviourStep {
    /*package*/ Behaviour behaviour;

    public SendSignalAction_a0a0b_7(Behaviour behaviour) {
      this.behaviour = behaviour;
    }

    public void execute() {
      Board b = ReadBoard();
      Signal sendSignalTemp = new Signal();
      sendSignalTemp = new LIATCompleteSignal();
      ((DirectSignal) sendSignalTemp).setTarget(behaviour.getSignalTrigger().GetData("replyTo"));
      sendSignalTemp.AddData("patient", behaviour.getSignalTrigger().GetData("patient"));

      b.PushMission(sendSignalTemp);
    }
  }
  public class SendSignalAction_a0a0b_9 extends BehaviourStep {
    /*package*/ Behaviour behaviour;

    public SendSignalAction_a0a0b_9(Behaviour behaviour) {
      this.behaviour = behaviour;
    }

    public void execute() {
      Board b = ReadBoard();
      Signal sendSignalTemp = new Signal();
      sendSignalTemp = new LIATCompleteSignal();
      ((DirectSignal) sendSignalTemp).setTarget(behaviour.getSignalTrigger().GetData("replyTo"));
      sendSignalTemp.AddData("patient", behaviour.getSignalTrigger().GetData("patient"));

      b.PushMission(sendSignalTemp);
    }
  }
  public class SendSignalAction_a0a0b_11 extends BehaviourStep {
    /*package*/ Behaviour behaviour;

    public SendSignalAction_a0a0b_11(Behaviour behaviour) {
      this.behaviour = behaviour;
    }

    public void execute() {
      Board b = ReadBoard();
      Signal sendSignalTemp = new Signal();
      sendSignalTemp = new LIATCompleteSignal();
      ((DirectSignal) sendSignalTemp).setTarget(behaviour.getSignalTrigger().GetData("replyTo"));
      sendSignalTemp.AddData("patient", behaviour.getSignalTrigger().GetData("patient"));

      b.PushMission(sendSignalTemp);
    }
  }
  public class SendSignalAction_a0a0b_13 extends BehaviourStep {
    /*package*/ Behaviour behaviour;

    public SendSignalAction_a0a0b_13(Behaviour behaviour) {
      this.behaviour = behaviour;
    }

    public void execute() {
      Board b = ReadBoard();
      Signal sendSignalTemp = new Signal();
      sendSignalTemp = new LIATCompleteSignal();
      ((DirectSignal) sendSignalTemp).setTarget(behaviour.getSignalTrigger().GetData("replyTo"));
      sendSignalTemp.AddData("patient", behaviour.getSignalTrigger().GetData("patient"));

      b.PushMission(sendSignalTemp);
    }
  }
  public class TestAction_a0c extends BehaviourStep {
    /*package*/ Behaviour behaviour;
    /*package*/ int testingTime = LIAT.getInstance().getProcessingTime();
    /*package*/ int timeExecuted = 0;
    /*package*/ TestResult testResult;
    public TestAction_a0c(Behaviour behaviour) {
      this.behaviour = behaviour;
    }

    public void execute() {
      if (timeExecuted == 0) {
        testResult = LIAT.getInstance().TestPatient(behaviour.getPatient());
      }

      timeExecuted++;

      if (timeExecuted == testingTime) {
        if (testResult.isInfected()) {
          ArrayList<BehaviourStep> plstSteps = new ArrayList();
          plstSteps.add(new SendSignalAction_a0a0c(behaviour));
          behaviour.injectSteps(plstSteps);
        } else {
          ArrayList<BehaviourStep> plstSteps = new ArrayList();
          plstSteps.add(new SendSignalAction_a0a0c_3(behaviour));
          behaviour.injectSteps(plstSteps);
        }
      }
    }

    public boolean finishCondition() {
      return timeExecuted == testingTime;
    }
  }
  public class TestAction_a0c_1 extends BehaviourStep {
    /*package*/ Behaviour behaviour;
    /*package*/ int testingTime = LIAT.getInstance().getProcessingTime();
    /*package*/ int timeExecuted = 0;
    /*package*/ TestResult testResult;
    public TestAction_a0c_1(Behaviour behaviour) {
      this.behaviour = behaviour;
    }

    public void execute() {
      if (timeExecuted == 0) {
        testResult = LIAT.getInstance().TestPatient(behaviour.getPatient());
      }

      timeExecuted++;

      if (timeExecuted == testingTime) {
        if (testResult.isInfected()) {
          ArrayList<BehaviourStep> plstSteps = new ArrayList();
          plstSteps.add(new SendSignalAction_a0a0c(behaviour));
          behaviour.injectSteps(plstSteps);
        } else {
          ArrayList<BehaviourStep> plstSteps = new ArrayList();
          plstSteps.add(new SendSignalAction_a0a0c_3(behaviour));
          behaviour.injectSteps(plstSteps);
        }
      }
    }

    public boolean finishCondition() {
      return timeExecuted == testingTime;
    }
  }
  public class SendSignalAction_a0a0c extends BehaviourStep {
    /*package*/ Behaviour behaviour;

    public SendSignalAction_a0a0c(Behaviour behaviour) {
      this.behaviour = behaviour;
    }

    public void execute() {
      Board b = ReadBoard();
      Signal sendSignalTemp = new Signal();
      sendSignalTemp = new LIATCompleteTrackAndTraceSignal();
      ((DirectSignal) sendSignalTemp).setTarget(behaviour.getSignalTrigger().GetData("replyTo"));
      sendSignalTemp.AddData("patient", behaviour.getSignalTrigger().GetData("patient"));

      b.PushMission(sendSignalTemp);
    }
  }
  public class SendSignalAction_a0a0c_1 extends BehaviourStep {
    /*package*/ Behaviour behaviour;

    public SendSignalAction_a0a0c_1(Behaviour behaviour) {
      this.behaviour = behaviour;
    }

    public void execute() {
      Board b = ReadBoard();
      Signal sendSignalTemp = new Signal();
      sendSignalTemp = new LIATCompleteTrackAndTraceSignal();
      ((DirectSignal) sendSignalTemp).setTarget(behaviour.getSignalTrigger().GetData("replyTo"));
      sendSignalTemp.AddData("patient", behaviour.getSignalTrigger().GetData("patient"));

      b.PushMission(sendSignalTemp);
    }
  }
  public class SendSignalAction_a0a0c_3 extends BehaviourStep {
    /*package*/ Behaviour behaviour;

    public SendSignalAction_a0a0c_3(Behaviour behaviour) {
      this.behaviour = behaviour;
    }

    public void execute() {
      Board b = ReadBoard();
      Signal sendSignalTemp = new Signal();
      sendSignalTemp = new LIATCompleteTrackAndTraceSignal();
      ((DirectSignal) sendSignalTemp).setTarget(behaviour.getSignalTrigger().GetData("replyTo"));
      sendSignalTemp.AddData("patient", behaviour.getSignalTrigger().GetData("patient"));

      b.PushMission(sendSignalTemp);
    }
  }
  public class SendSignalAction_a0a0c_5 extends BehaviourStep {
    /*package*/ Behaviour behaviour;

    public SendSignalAction_a0a0c_5(Behaviour behaviour) {
      this.behaviour = behaviour;
    }

    public void execute() {
      Board b = ReadBoard();
      Signal sendSignalTemp = new Signal();
      sendSignalTemp = new LIATCompleteTrackAndTraceSignal();
      ((DirectSignal) sendSignalTemp).setTarget(behaviour.getSignalTrigger().GetData("replyTo"));
      sendSignalTemp.AddData("patient", behaviour.getSignalTrigger().GetData("patient"));

      b.PushMission(sendSignalTemp);
    }
  }


  public void InitStateFree(Signal s) {
    behaviourBuilder.setSignalTrigger(s);
    ArrayList<BehaviourStep> plstSteps = new ArrayList();
    plstSteps.add(new SendSignalAction_a0a(behaviourBuilder));
    behaviourBuilder.setSteps(plstSteps);

    Signal sendSignalTemp = new Signal();

  }
  public void InitTestPatientGeneral(Signal s) {
    behaviourBuilder.setSignalTrigger(s);
    ArrayList<BehaviourStep> plstSteps = new ArrayList();
    plstSteps.add(new TestAction_a0b_3(behaviourBuilder));
    behaviourBuilder.setSteps(plstSteps);

    Signal sendSignalTemp = new Signal();

  }
  public void InitTestPatientTrackAndTrace(Signal s) {
    behaviourBuilder.setSignalTrigger(s);
    ArrayList<BehaviourStep> plstSteps = new ArrayList();
    plstSteps.add(new TestAction_a0c(behaviourBuilder));
    behaviourBuilder.setSteps(plstSteps);

    Signal sendSignalTemp = new Signal();

  }

}
