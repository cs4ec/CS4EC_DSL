package EDLanguage.sandbox;

/*Generated by MPS */

import simcore.action.Behaviour;
import repast.simphony.space.continuous.ContinuousSpace;
import repast.simphony.space.grid.Grid;
import simcore.Signals.Signal;
import simcore.action.BehaviourStep;
import simcore.diagnosis.TestResult;
import java.util.ArrayList;

public class LFDDevice extends Staff {

  public double groupStress = Double.parseDouble("" + "0");
  public Behaviour behaviourBuilder;

  public LFDDevice(ContinuousSpace<Object> space, Grid<Object> grid) {
    super(space, grid);
    mintMyMaxPatients = 0;
  }

  public LFDDevice(ContinuousSpace<Object> space, Grid<Object> grid, String pstrStartLocation) {
    super(space, grid, pstrStartLocation);
  }

  public Behaviour BuildActionFromSignal(Signal s) {
    switch (s.getName()) {
      case "":
        break;
      case "ConductTrackAndTraceLFD":
        behaviourBuilder = new Behaviour("ConductTrackAndTraceLFD");
        this.InitTestPatientTrackAndTrace(s);
        break;
      default:
        System.out.println("Set mission: " + s.getName() + " failed!");
        return behaviourBuilder;
    }
    return behaviourBuilder;
  }

  public class TestAction_a0a extends BehaviourStep {
    /*package*/ Behaviour behaviour;
    /*package*/ int testingTime = SURESCREEN.getInstance().getProcessingTime();
    /*package*/ int timeExecuted = 0;
    /*package*/ TestResult testResult;
    public TestAction_a0a(Behaviour b) {
      behaviour = b;
    }

    public void execute() {
      if (timeExecuted == 0) {
        testResult = SURESCREEN.getInstance().TestPatient(behaviour.getPatient());
      }

      timeExecuted++;

      if (timeExecuted == testingTime) {
        if (testResult.isInfected()) {
          ArrayList<BehaviourStep> plstSteps = new ArrayList();
          plstSteps.add(new BehaviourStep());
          behaviour.injectSteps(plstSteps);
        } else {
          ArrayList<BehaviourStep> plstSteps = new ArrayList();
          plstSteps.add(new BehaviourStep());
          behaviour.injectSteps(plstSteps);
        }
      }
    }

    public boolean finishCondition() {
      return timeExecuted == testingTime;
    }
  }


  public void InitTestPatientTrackAndTrace(Signal s) {
    behaviourBuilder.setSignalTrigger(s);
    ArrayList<BehaviourStep> plstSteps = new ArrayList();
    plstSteps.add(new TestAction_a0a(behaviourBuilder));
    behaviourBuilder.setSteps(plstSteps);

    Signal sendSignalTemp = new Signal();

  }

}
