package EDLanguage.sandbox;

/*Generated by MPS */

import repast.simphony.dataLoader.ContextBuilder;
import repast.simphony.context.Context;
import repast.simphony.context.space.continuous.ContinuousSpaceFactory;
import repast.simphony.context.space.continuous.ContinuousSpaceFactoryFinder;
import repast.simphony.space.continuous.ContinuousSpace;
import repast.simphony.space.continuous.RandomCartesianAdder;
import repast.simphony.space.continuous.StrictBorders;
import repast.simphony.context.space.grid.GridFactory;
import repast.simphony.context.space.grid.GridFactoryFinder;
import repast.simphony.space.grid.Grid;
import repast.simphony.space.grid.GridBuilderParameters;
import repast.simphony.space.grid.SimpleGridAdder;
import edHello.basicStructures.Board;
import edHello.basicStructures.PatientAdder;
import repast.simphony.valueLayer.GridValueLayer;
import demo2.Location;
import repast.simphony.space.continuous.NdPoint;

public class EDBuilder implements ContextBuilder<Object> {

  public Context build(Context<Object> context) {

    context.setId("EDProject");


    ContinuousSpaceFactory spaceFactory = ContinuousSpaceFactoryFinder.createContinuousSpaceFactory(null);
    ContinuousSpace<Object> space = spaceFactory.createContinuousSpace("space", context, new RandomCartesianAdder<Object>(), new StrictBorders(), 50, 50);

    GridFactory gridFactory = GridFactoryFinder.createGridFactory(null);
    Grid<Object> grid = gridFactory.createGrid("grid", context, new GridBuilderParameters<Object>(new repast.simphony.space.grid.StrictBorders(), new SimpleGridAdder<Object>(), true, 50, 50));

    context.add(new Board());
    context.add(new PatientAdder(space, grid).WithTimeSpan(60));


    // add Agents 
    for (int i = 0; i < 2; i++) {
      context.add(new Doctor(space, grid));
    }
    for (int i = 0; i < 7; i++) {
      context.add(new Nurse(space, grid));
    }
    for (int i = 0; i < 2; i++) {
      context.add(new ENP(space, grid));
    }


    GridValueLayer vl = new GridValueLayer("cellbox", true, new repast.simphony.space.grid.StrictBorders(), 50, 50);
    context.addValueLayer(vl);



    // add Locations here 
    Location diagnosticroom1_a = new Location("diagnostic room 1", context, space, grid, 15, 40, 6, 9, 1, 40, "Left");
    Location office1_b = new Location("office1", context, space, grid, 5, 20, 6, 9, 1, 40, "Left");
    Location restRoom1_c = new Location("restRoom1", context, space, grid, 24, 15, 6, 6, 1, 20, "Left");
    Location exit_d = new Location("exit", context, space, grid, 40, 3, 2, 2, 1, 200, "Left");
    Location preDiagnosticArea_e = new Location("preDiagnosticArea", context, space, grid, 35, 20, 5, 3, 1, 200, "Left");
    Location pharmacy_f = new Location("pharmacy", context, space, grid, 12, 4, 9, 6, 1, 10, "Left");
    Location XRayRoom1_g = new Location("XRayRoom1", context, space, grid, 22, 4, 9, 6, 1, 10, "Left");
    Location waitingArea_h = new Location("waitingArea", context, space, grid, 35, 10, 5, 3, 1, 200, "Left");
    Location XRayRoom2_i = new Location("XRayRoom2", context, space, grid, 5, 40, 6, 9, 1, 10, "Left");


    Location ent = new Location("Entrance", context, space, grid, 40, 40, 2, 2, 3, 20, "Left");





    for (Object obj : context) {
      NdPoint pt = space.getLocation(obj);
      grid.moveTo(obj, (int) pt.getX(), (int) pt.getY());
    }


    return context;
  }
}
