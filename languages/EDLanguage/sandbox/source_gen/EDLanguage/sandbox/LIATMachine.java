package EDLanguage.sandbox;

/*Generated by MPS */

import repast.simphony.space.continuous.ContinuousSpace;
import repast.simphony.space.grid.Grid;
import simcore.Signals.Signal;
import simcore.action.Action;
import simcore.Signals.DirectSignal;
import simcore.action.ActionStep;
import simcore.action.basicAction.SendSignalAction;

public class LIATMachine extends Staff {

  public double groupStress = Double.parseDouble("" + "0");

  public LIATMachine(ContinuousSpace<Object> space, Grid<Object> grid) {
    super(space, grid);
    mintMyMaxPatients = 0;
  }

  public LIATMachine(ContinuousSpace<Object> space, Grid<Object> grid, String pstrStartLocation) {
    super(space, grid, pstrStartLocation);
  }

  public void SetMission(Signal s) {
    switch (s.getName()) {
      case "":
        break;
      case "IsLIATReady":
        curMission = new Action("StateFree");
        this.InitStateFree(s);
        break;
      default:
        System.out.println("Set mission: " + s.getName() + " failed!");
        return;
    }
    curActionStep = 0;
  }

  public void InitStateFree(Signal s) {
    System.out.println("StateFree" + " function called");

    Signal sendSignalTemp = new Signal();

    sendSignalTemp = new LIATIsReadySignal();
    if (sendSignalTemp instanceof DirectSignal) {
      ((DirectSignal) sendSignalTemp).setTarget();
    }
    curMission.WithStep(new ActionStep().WithName("").WithAction(new SendSignalAction().WithSignal(sendSignalTemp)));

  }

}
