package EDLanguage.behavior;

/*Generated by MPS */

import jetbrains.mps.core.aspects.behaviour.BaseBHDescriptor;
import org.jetbrains.mps.openapi.language.SAbstractConcept;
import jetbrains.mps.smodel.adapter.structure.MetaAdapterFactory;
import jetbrains.mps.core.aspects.behaviour.api.SMethod;
import jetbrains.mps.scope.Scope;
import jetbrains.mps.core.aspects.behaviour.SMethodBuilder;
import jetbrains.mps.core.aspects.behaviour.SJavaCompoundTypeImpl;
import jetbrains.mps.core.aspects.behaviour.SModifiersImpl;
import jetbrains.mps.core.aspects.behaviour.AccessPrivileges;
import org.jetbrains.mps.openapi.model.SNode;
import java.util.List;
import java.util.Arrays;
import org.jetbrains.annotations.NotNull;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SConceptOperations;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SNodeOperations;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SModelOperations;
import jetbrains.mps.lang.scopes.runtime.NamedElementsScope;
import java.util.ArrayList;
import jetbrains.mps.internal.collections.runtime.ListSequence;
import jetbrains.mps.lang.scopes.runtime.ScopeUtils;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SLinkOperations;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SPropertyOperations;
import jetbrains.mps.core.aspects.behaviour.api.SConstructor;
import org.jetbrains.annotations.Nullable;
import jetbrains.mps.core.aspects.behaviour.api.BHMethodNotFoundException;
import org.jetbrains.mps.openapi.language.SConcept;
import org.jetbrains.mps.openapi.language.SProperty;
import org.jetbrains.mps.openapi.language.SReferenceLink;
import org.jetbrains.mps.openapi.language.SContainmentLink;

public final class BehaviourElement__BehaviorDescriptor extends BaseBHDescriptor {
  private static final SAbstractConcept CONCEPT = MetaAdapterFactory.getConcept(0x7dcff301ba01414eL, 0x8574a8f6da31876bL, 0x35463334ce306b7aL, "EDLanguage.structure.BehaviourElement");

  public static final SMethod<Scope> getScope_id52_Geb4QDV$ = new SMethodBuilder<Scope>(new SJavaCompoundTypeImpl(Scope.class)).name("getScope").modifiers(SModifiersImpl.create(8, AccessPrivileges.PUBLIC)).concept(CONCEPT).id("52_Geb4QDV$").build(SMethodBuilder.createJavaParameter((Class<SAbstractConcept>) ((Class) Object.class), ""), SMethodBuilder.createJavaParameter((Class<SNode>) ((Class) Object.class), ""));
  public static final SMethod<Boolean> IsIn_id29F2V$jyINI = new SMethodBuilder<Boolean>(new SJavaCompoundTypeImpl(Boolean.TYPE)).name("IsIn").modifiers(SModifiersImpl.create(0, AccessPrivileges.PUBLIC)).concept(CONCEPT).id("29F2V$jyINI").build(SMethodBuilder.createJavaParameter((Class<SNode>) ((Class) Object.class), ""), SMethodBuilder.createJavaParameter((Class<List<SNode>>) ((Class) Object.class), ""));
  public static final SMethod<Boolean> NotYetBeenUsed_id6tNT_P6vKBg = new SMethodBuilder<Boolean>(new SJavaCompoundTypeImpl(Boolean.TYPE)).name("NotYetBeenUsed").modifiers(SModifiersImpl.create(0, AccessPrivileges.PUBLIC)).concept(CONCEPT).id("6tNT_P6vKBg").build(SMethodBuilder.createJavaParameter((Class<SNode>) ((Class) Object.class), ""));
  public static final SMethod<String> GetSignalName_id2YIKz$5l9Hf = new SMethodBuilder<String>(new SJavaCompoundTypeImpl(String.class)).name("GetSignalName").modifiers(SModifiersImpl.create(0, AccessPrivileges.PUBLIC)).concept(CONCEPT).id("2YIKz$5l9Hf").build();

  private static final List<SMethod<?>> BH_METHODS = Arrays.<SMethod<?>>asList(getScope_id52_Geb4QDV$, IsIn_id29F2V$jyINI, NotYetBeenUsed_id6tNT_P6vKBg, GetSignalName_id2YIKz$5l9Hf);

  private static void ___init___(@NotNull SNode __thisNode__) {
  }

  /*package*/ static Scope getScope_id52_Geb4QDV$(@NotNull SNode __thisNode__, SAbstractConcept kind, SNode child) {
    if (SConceptOperations.isSubConceptOf(SNodeOperations.asSConcept(kind), CONCEPTS.SignalReference$qb)) {

      List<SNode> signals = SModelOperations.nodes(SNodeOperations.getModel(__thisNode__), CONCEPTS.Signal$i8);

      {
        final SNode sr = child;
        if (SNodeOperations.isInstanceOf(sr, CONCEPTS.SignalReference$qb)) {
          return new NamedElementsScope(signals);
        }
      }

      List<SNode> actorList = Actor__BehaviorDescriptor.GetAllInheritanceList_id29F2V$jrHY3.invoke(SNodeOperations.getNodeAncestor(__thisNode__, CONCEPTS.Actor$CU, false, false));
      List<SNode> nli = new ArrayList<SNode>();

      for (SNode signal : ListSequence.fromList(signals)) {
        if (((boolean) BehaviourElement__BehaviorDescriptor.IsIn_id29F2V$jyINI.invoke(__thisNode__, signal, actorList)) && ((boolean) BehaviourElement__BehaviorDescriptor.NotYetBeenUsed_id6tNT_P6vKBg.invoke(__thisNode__, signal))) {
          ListSequence.fromList(nli).addElement(signal);
        }
      }

      return new NamedElementsScope(nli);
    }
    return ScopeUtils.lazyParentScope(__thisNode__, kind);
  }
  /*package*/ static boolean IsIn_id29F2V$jyINI(@NotNull SNode __thisNode__, SNode signal, List<SNode> actors) {
    for (SNode actor : ListSequence.fromList(actors)) {
      for (SNode receiver : ListSequence.fromList(SLinkOperations.getChildren(signal, LINKS.receivers$t10J))) {
        if (SPropertyOperations.getString(actor, PROPS.name$MnvL).equals(SPropertyOperations.getString(SLinkOperations.getTarget(receiver, LINKS.actor$ls$v), PROPS.name$MnvL))) {
          return true;
        }
      }
    }
    return false;
  }
  /*package*/ static boolean NotYetBeenUsed_id6tNT_P6vKBg(@NotNull SNode __thisNode__, SNode signal) {

    SNode baseActor = SNodeOperations.getNodeAncestor(__thisNode__, CONCEPTS.Actor$CU, false, false);
    List<SNode> behaviours = SLinkOperations.getChildren(baseActor, LINKS.behaviours$zTMQ);

    for (SNode behaviour : ListSequence.fromList(behaviours)) {
      if ((SLinkOperations.getTarget(behaviour, LINKS.signal$k9aw) != null)) {
        if (BehaviourElement__BehaviorDescriptor.GetSignalName_id2YIKz$5l9Hf.invoke(behaviour).equals(SPropertyOperations.getString(signal, PROPS.name$MnvL))) {
          return false;
        }
      }
    }


    return true;
  }
  /*package*/ static String GetSignalName_id2YIKz$5l9Hf(@NotNull SNode __thisNode__) {
    {
      final SNode sr = SLinkOperations.getTarget(__thisNode__, LINKS.signal$k9aw);
      if (SNodeOperations.isInstanceOf(sr, CONCEPTS.SignalReference$qb)) {
        return SPropertyOperations.getString(SLinkOperations.getTarget(sr, LINKS.signal$j_fv), PROPS.name$MnvL);
      }
    }

    {
      final SNode ns = SLinkOperations.getTarget(__thisNode__, LINKS.signal$k9aw);
      if (SNodeOperations.isInstanceOf(ns, CONCEPTS.NewPatientSignal$mL)) {
        return "NewPatientArrive";
      }
    }

    return "Error";
  }

  /*package*/ BehaviourElement__BehaviorDescriptor() {
  }

  @Override
  protected void initNode(@NotNull SNode node, @NotNull SConstructor constructor, @Nullable Object[] parameters) {
    ___init___(node);
  }

  @Override
  protected <T> T invokeSpecial0(@NotNull SNode node, @NotNull SMethod<T> method, @Nullable Object[] parameters) {
    int methodIndex = BH_METHODS.indexOf(method);
    if (methodIndex < 0) {
      throw new BHMethodNotFoundException(this, method);
    }
    switch (methodIndex) {
      case 0:
        return (T) ((Scope) getScope_id52_Geb4QDV$(node, (SAbstractConcept) parameters[0], (SNode) parameters[1]));
      case 1:
        return (T) ((Boolean) IsIn_id29F2V$jyINI(node, (SNode) parameters[0], (List<SNode>) parameters[1]));
      case 2:
        return (T) ((Boolean) NotYetBeenUsed_id6tNT_P6vKBg(node, (SNode) parameters[0]));
      case 3:
        return (T) ((String) GetSignalName_id2YIKz$5l9Hf(node));
      default:
        throw new BHMethodNotFoundException(this, method);
    }
  }

  @Override
  protected <T> T invokeSpecial0(@NotNull SAbstractConcept concept, @NotNull SMethod<T> method, @Nullable Object[] parameters) {
    int methodIndex = BH_METHODS.indexOf(method);
    if (methodIndex < 0) {
      throw new BHMethodNotFoundException(this, method);
    }
    switch (methodIndex) {
      default:
        throw new BHMethodNotFoundException(this, method);
    }
  }

  @NotNull
  @Override
  public List<SMethod<?>> getDeclaredMethods() {
    return BH_METHODS;
  }

  @NotNull
  @Override
  public SAbstractConcept getConcept() {
    return CONCEPT;
  }

  private static final class CONCEPTS {
    /*package*/ static final SConcept Signal$i8 = MetaAdapterFactory.getConcept(0x7dcff301ba01414eL, 0x8574a8f6da31876bL, 0x71ffe5bd010732aL, "EDLanguage.structure.Signal");
    /*package*/ static final SConcept SignalReference$qb = MetaAdapterFactory.getConcept(0x7dcff301ba01414eL, 0x8574a8f6da31876bL, 0x71ffe5bd013d59eL, "EDLanguage.structure.SignalReference");
    /*package*/ static final SConcept Actor$CU = MetaAdapterFactory.getConcept(0x7dcff301ba01414eL, 0x8574a8f6da31876bL, 0x35463334ce2f6271L, "EDLanguage.structure.Actor");
    /*package*/ static final SConcept NewPatientSignal$mL = MetaAdapterFactory.getConcept(0x7dcff301ba01414eL, 0x8574a8f6da31876bL, 0x2faec239055220ccL, "EDLanguage.structure.NewPatientSignal");
  }

  private static final class PROPS {
    /*package*/ static final SProperty name$MnvL = MetaAdapterFactory.getProperty(0xceab519525ea4f22L, 0x9b92103b95ca8c0cL, 0x110396eaaa4L, 0x110396ec041L, "name");
  }

  private static final class LINKS {
    /*package*/ static final SReferenceLink actor$ls$v = MetaAdapterFactory.getReferenceLink(0x7dcff301ba01414eL, 0x8574a8f6da31876bL, 0x71ffe5bd0118aabL, 0x71ffe5bd0118aacL, "actor");
    /*package*/ static final SContainmentLink receivers$t10J = MetaAdapterFactory.getContainmentLink(0x7dcff301ba01414eL, 0x8574a8f6da31876bL, 0x71ffe5bd010732aL, 0x71ffe5bd0118aa9L, "receivers");
    /*package*/ static final SContainmentLink behaviours$zTMQ = MetaAdapterFactory.getContainmentLink(0x7dcff301ba01414eL, 0x8574a8f6da31876bL, 0x35463334ce2f6271L, 0x270efea19372e41eL, "behaviours");
    /*package*/ static final SContainmentLink signal$k9aw = MetaAdapterFactory.getContainmentLink(0x7dcff301ba01414eL, 0x8574a8f6da31876bL, 0x35463334ce306b7aL, 0x71ffe5bd0133e89L, "signal");
    /*package*/ static final SReferenceLink signal$j_fv = MetaAdapterFactory.getReferenceLink(0x7dcff301ba01414eL, 0x8574a8f6da31876bL, 0x71ffe5bd013d59eL, 0x71ffe5bd013d59fL, "signal");
  }
}
