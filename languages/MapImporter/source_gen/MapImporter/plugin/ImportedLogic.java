package MapImporter.plugin;

/*Generated by MPS */

import org.jetbrains.mps.openapi.model.SNode;
import java.io.IOException;
import com.google.gson.stream.JsonReader;
import java.nio.file.Files;
import java.nio.file.Paths;
import com.google.gson.JsonElement;
import com.google.gson.JsonParser;
import com.google.gson.JsonArray;
import java.util.Map;
import jetbrains.mps.internal.collections.runtime.MapSequence;
import java.util.HashMap;
import jetbrains.mps.internal.collections.runtime.ListSequence;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SModelOperations;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SNodeOperations;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SPropertyOperations;
import java.util.LinkedHashMap;
import jetbrains.mps.internal.collections.runtime.Sequence;
import com.google.gson.JsonObject;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SLinkOperations;
import jetbrains.mps.internal.collections.runtime.IWhereFilter;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SConceptOperations;
import jetbrains.mps.smodel.adapter.structure.MetaAdapterFactory;
import org.jetbrains.mps.openapi.language.SEnumerationLiteral;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SEnumOperations;
import org.jetbrains.mps.openapi.language.SProperty;
import org.jetbrains.mps.openapi.language.SConcept;
import org.jetbrains.mps.openapi.language.SContainmentLink;
import org.jetbrains.mps.openapi.language.SReferenceLink;

public class ImportedLogic {

  public static void ImportJson(String path, SNode targetContainer) throws IOException, JsonFormatException {

    try (JsonReader rea = new JsonReader(Files.newBufferedReader(Paths.get(path)))) {

    }

    try (JsonReader reader = new JsonReader(Files.newBufferedReader(Paths.get(path)))) {
      JsonElement element = JsonParser.parseReader(reader);

      if (!(element.isJsonArray())) {
        throw new JsonFormatException("Expected an array at top level, got " + element.getClass());

      }

      JsonArray array = element.getAsJsonArray();

      Map<String, SNode> roomTypesByName = MapSequence.fromMap(new HashMap<String, SNode>());

      for (SNode roomType : ListSequence.fromList(SModelOperations.roots(SNodeOperations.getModel(targetContainer), CONCEPTS.RoomType$1b))) {
        MapSequence.fromMap(roomTypesByName).put(SPropertyOperations.getString(roomType, PROPS.name$MnvL), roomType);
      }
      Map<Integer, SNode> importedRooms = MapSequence.fromMap(new LinkedHashMap<Integer, SNode>(16, (float) 0.75, false));

      int index = 0;
      for (JsonElement item : Sequence.fromIterable(array)) {
        index++;
        String prefixForErrors = "item " + index;
        if (!(item.isJsonObject())) {
          throw new JsonFormatException(prefixForErrors + ": expected an object in the topmost array, got " + item);
        }
        JsonObject object = item.getAsJsonObject();
        final int id = ImportedLogic.getInt(object, "ID", prefixForErrors);
        if (MapSequence.fromMap(importedRooms).containsKey(id)) {
          throw new JsonFormatException(prefixForErrors + ": duplicate room ID " + id);
        }

        SNode room = ListSequence.fromList(SLinkOperations.getChildren(targetContainer, LINKS.rooms$Qimv)).findFirst(new IWhereFilter<SNode>() {
          public boolean accept(SNode it) {
            return SPropertyOperations.getInteger(it, PROPS.ID$gLXG) == id;
          }
        });
        if (room == null) {
          room = SConceptOperations.createNewNode(MetaAdapterFactory.getConcept(0x7dcff301ba01414eL, 0x8574a8f6da31876bL, 0x3c282c112f249045L, "AgentLanguage.structure.RoomInstanceDefinition"));
          SPropertyOperations.assign(room, PROPS.ID$gLXG, id);
        }
        MapSequence.fromMap(importedRooms).put(id, room);
        // ReadsimplepropertiesdirectlyfromJSON 
        SPropertyOperations.assign(room, PROPS.name$MnvL, ImportedLogic.getString(object, "name of the room", prefixForErrors));
        SPropertyOperations.assign(room, PROPS.x$8h86, ImportedLogic.getInt(object, "x coordinate", prefixForErrors));
        SPropertyOperations.assign(room, PROPS.y$8hA8, ImportedLogic.getInt(object, "y coordinate", prefixForErrors));
        SPropertyOperations.assign(room, PROPS.width$g4wh, ImportedLogic.getInt(object, "width", prefixForErrors));
        SPropertyOperations.assign(room, PROPS.height$g5sl, ImportedLogic.getInt(object, "height", prefixForErrors));
        SPropertyOperations.assign(room, PROPS.desks$VmIX, ImportedLogic.getInt(object, "desks", prefixForErrors));
        SPropertyOperations.assign(room, PROPS.seats$VfGv, ImportedLogic.getInt(object, "seats", prefixForErrors));
        SPropertyOperations.assign(room, PROPS.beds$zE0I, ImportedLogic.getInt(object, "beds", prefixForErrors));

        String colourName = ImportedLogic.getString(object, "color", prefixForErrors);
        SEnumerationLiteral colour = SEnumOperations.getMemberForPresentation(MetaAdapterFactory.getEnumeration(0x7dcff301ba01414eL, 0x8574a8f6da31876bL, 0x66029deba11b7155L, "AgentLanguage.structure.Colour"), colourName);
        if (colour == null) {
          throw new JsonFormatException("Unknown Colour");
        }
        SPropertyOperations.assignEnum(room, PROPS.colour$7icN, (SEnumerationLiteral) colour);


        String roomTypeName = ImportedLogic.getString(object, "type of the room", prefixForErrors);
        SNode roomType = MapSequence.fromMap(roomTypesByName).get(roomTypeName);
        if (roomType == null) {
          throw new JsonFormatException(prefixForErrors + "unknown room type" + roomType);
        }
        SLinkOperations.setTarget(room, LINKS.roomType$2uZL, roomType);
      }

      ListSequence.fromList(SLinkOperations.getChildren(targetContainer, LINKS.rooms$Qimv)).clear();
      ListSequence.fromList(SLinkOperations.getChildren(targetContainer, LINKS.rooms$Qimv)).addSequence(Sequence.fromIterable(MapSequence.fromMap(importedRooms).values()));

    }
  }



  private static int getInt(JsonObject object, String name, String errorPrefix) throws JsonFormatException {
    JsonElement element = object.get(name);
    if (element == null) {
      throw new JsonFormatException(errorPrefix + ": missing required member '" + name + "'");
    }
    if (!(element.isJsonPrimitive()) || !(element.getAsJsonPrimitive().isNumber())) {
      throw new JsonFormatException(errorPrefix + ": expected '" + name + "' to be a number but got " + element);
    }
    return element.getAsInt();
  }

  private static String getString(JsonObject object, String name, String errorPrefix) throws JsonFormatException {
    JsonElement element = object.get(name);
    if (element == null) {
      throw new JsonFormatException(errorPrefix + ": missing required member '" + name + "'");
    }
    if (!(element.isJsonPrimitive()) || !(element.getAsJsonPrimitive().isString())) {
      throw new JsonFormatException(errorPrefix + ": expected '" + name + "' to be a string but got " + element);
    }
    return element.getAsString();
  }


  private static final class PROPS {
    /*package*/ static final SProperty name$MnvL = MetaAdapterFactory.getProperty(0xceab519525ea4f22L, 0x9b92103b95ca8c0cL, 0x110396eaaa4L, 0x110396ec041L, "name");
    /*package*/ static final SProperty ID$gLXG = MetaAdapterFactory.getProperty(0x7dcff301ba01414eL, 0x8574a8f6da31876bL, 0x3c282c112f249045L, 0xaabf015beeb4a25L, "ID");
    /*package*/ static final SProperty x$8h86 = MetaAdapterFactory.getProperty(0x7dcff301ba01414eL, 0x8574a8f6da31876bL, 0x3c282c112f249045L, 0x497144425f482c7fL, "x");
    /*package*/ static final SProperty y$8hA8 = MetaAdapterFactory.getProperty(0x7dcff301ba01414eL, 0x8574a8f6da31876bL, 0x3c282c112f249045L, 0x497144425f482c81L, "y");
    /*package*/ static final SProperty width$g4wh = MetaAdapterFactory.getProperty(0x7dcff301ba01414eL, 0x8574a8f6da31876bL, 0x3c282c112f249045L, 0x497144425f7f2d45L, "width");
    /*package*/ static final SProperty height$g5sl = MetaAdapterFactory.getProperty(0x7dcff301ba01414eL, 0x8574a8f6da31876bL, 0x3c282c112f249045L, 0x497144425f7f2d49L, "height");
    /*package*/ static final SProperty desks$VmIX = MetaAdapterFactory.getProperty(0x7dcff301ba01414eL, 0x8574a8f6da31876bL, 0x3c282c112f249045L, 0x757b60e1223559c2L, "desks");
    /*package*/ static final SProperty seats$VfGv = MetaAdapterFactory.getProperty(0x7dcff301ba01414eL, 0x8574a8f6da31876bL, 0x3c282c112f249045L, 0x757b60e1223559b9L, "seats");
    /*package*/ static final SProperty beds$zE0I = MetaAdapterFactory.getProperty(0x7dcff301ba01414eL, 0x8574a8f6da31876bL, 0x3c282c112f249045L, 0x22d5ede83b4138f3L, "beds");
    /*package*/ static final SProperty colour$7icN = MetaAdapterFactory.getProperty(0x7dcff301ba01414eL, 0x8574a8f6da31876bL, 0x3c282c112f249045L, 0x66029deba11b71c3L, "colour");
  }

  private static final class CONCEPTS {
    /*package*/ static final SConcept RoomType$1b = MetaAdapterFactory.getConcept(0x7dcff301ba01414eL, 0x8574a8f6da31876bL, 0x5dafd33966e8fe19L, "AgentLanguage.structure.RoomType");
  }

  private static final class LINKS {
    /*package*/ static final SContainmentLink rooms$Qimv = MetaAdapterFactory.getContainmentLink(0x7dcff301ba01414eL, 0x8574a8f6da31876bL, 0x3c282c112f249082L, 0x3c282c112f249083L, "rooms");
    /*package*/ static final SReferenceLink roomType$2uZL = MetaAdapterFactory.getReferenceLink(0x7dcff301ba01414eL, 0x8574a8f6da31876bL, 0x3c282c112f249045L, 0x5dafd33966edbfc9L, "roomType");
  }
}
