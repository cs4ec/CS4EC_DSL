package AgentLanguage.structure;

/*Generated by MPS */

import jetbrains.mps.lang.smodel.LanguageConceptIndex;
import jetbrains.mps.lang.smodel.LanguageConceptIndexBuilder;
import jetbrains.mps.smodel.adapter.ids.SConceptId;
import org.jetbrains.mps.openapi.language.SAbstractConcept;

public final class LanguageConceptSwitch {
  private final LanguageConceptIndex myIndex;
  public static final int Actor = 0;
  public static final int ActorReference = 1;
  public static final int ActorTypeSignal = 2;
  public static final int AdmitAction = 3;
  public static final int AgentAttributeReference = 4;
  public static final int AgentGenerator = 5;
  public static final int AgentGeneratorLine = 6;
  public static final int AggregateAttributeMonitor = 7;
  public static final int AndCondition = 8;
  public static final int Attribute = 9;
  public static final int AttributeCondition = 10;
  public static final int AttributeDistributionLine = 11;
  public static final int AttributeDistributionTable = 12;
  public static final int AttributeExpressionReference = 13;
  public static final int AttributeMonitor = 14;
  public static final int AttributeMonitorReference = 15;
  public static final int AttributeReference = 16;
  public static final int Behaviour = 17;
  public static final int BehaviourElement = 18;
  public static final int BehaviourElementReference = 19;
  public static final int BehaviourSequence = 20;
  public static final int BinaryCondition = 21;
  public static final int Choice = 22;
  public static final int CompositeOrder = 23;
  public static final int Condition = 24;
  public static final int ConsequenceElement = 25;
  public static final int ConsequenceInStep = 26;
  public static final int DataInstanceMap = 27;
  public static final int DataMap = 28;
  public static final int DeSpawnAction = 29;
  public static final int Description = 30;
  public static final int DirectSignal = 31;
  public static final int DischargeAction = 32;
  public static final int ExpressionWrapper = 33;
  public static final int FollowOrder = 34;
  public static final int HumanInstance = 35;
  public static final int HumanInstanceFromSignal = 36;
  public static final int IAmAtCondition = 37;
  public static final int InSameRoomCondition = 38;
  public static final int InfectionState = 39;
  public static final int IsExactlyOperator = 40;
  public static final int IsLessThanOperator = 41;
  public static final int KernelFCondition = 42;
  public static final int MessageSelectionStrategy = 43;
  public static final int MoveAction = 44;
  public static final int MoveOrder = 45;
  public static final int MyRoomInstance = 46;
  public static final int NewPatientSignal = 47;
  public static final int ObjectInstance = 48;
  public static final int OccupiableAvailabilityCondition = 49;
  public static final int OccupiableReference = 50;
  public static final int OccupyAction = 51;
  public static final int OccupyOrder = 52;
  public static final int Operator = 53;
  public static final int Order = 54;
  public static final int OrderPatientAction = 55;
  public static final int PassiveWaitAction = 56;
  public static final int PassiveWaitUntil = 57;
  public static final int PatientInstance = 58;
  public static final int PlaceInstance = 59;
  public static final int PlaceInstanceCollection = 60;
  public static final int PlaceInstanceFromSignal = 61;
  public static final int PlaceInstanceReference = 62;
  public static final int PossibilityCondition = 63;
  public static final int PossibleValuesTuple = 64;
  public static final int ProbabilityDistribution = 65;
  public static final int ProbabilityDistributionLine = 66;
  public static final int Relationship = 67;
  public static final int RemoveRelationshipAction = 68;
  public static final int RepastParam = 69;
  public static final int RoomIsEmptyOrContainsRelationshipMemberCondition = 70;
  public static final int RoomSelectionCondition = 71;
  public static final int RoomSelectionRule = 72;
  public static final int RoomSelectionStrategy = 73;
  public static final int RoomSelectionStrategyLine = 74;
  public static final int RoomTypeCondition = 75;
  public static final int RoomTypeIsAvailableCondition = 76;
  public static final int RoomTypeReference = 77;
  public static final int SelectClosestRoom = 78;
  public static final int SelectFirstSignal = 79;
  public static final int SelectNotRelationshipDataSignal = 80;
  public static final int SelectRandomSignal = 81;
  public static final int SelectRelationshipDataSignal = 82;
  public static final int SelectRoomByCapacity = 83;
  public static final int SelectRoomByRelationshipToOccupier = 84;
  public static final int SelectRoomWithNoAgentsOfType = 85;
  public static final int SelfInstance = 86;
  public static final int SendSignalAction = 87;
  public static final int Signal = 88;
  public static final int SignalDefinition = 89;
  public static final int SignalInitReference = 90;
  public static final int SignalReference = 91;
  public static final int SignalSelectionRule = 92;
  public static final int SignalSelectionRuleLine = 93;
  public static final int SignalTrigger = 94;
  public static final int SpaceAtCondition = 95;
  public static final int StayAction = 96;
  public static final int StayForConditionAction = 97;
  public static final int StayForTimeAction = 98;
  public static final int StopOrder = 99;
  public static final int TimeDistributionLine = 100;
  public static final int TimeDistributionTable = 101;
  public static final int UpdateAttributeAction = 102;
  public static final int UseResourceAction = 103;

  public LanguageConceptSwitch() {
    LanguageConceptIndexBuilder builder = new LanguageConceptIndexBuilder(0x7dcff301ba01414eL, 0x8574a8f6da31876bL);
    builder.put(0x35463334ce2f6271L, Actor);
    builder.put(0x71ffe5bd0118aabL, ActorReference);
    builder.put(0x139a759561627f4L, ActorTypeSignal);
    builder.put(0x139a75955f0be54L, AdmitAction);
    builder.put(0x31419b89f31842dcL, AgentAttributeReference);
    builder.put(0x637eade0e62ce2b8L, AgentGenerator);
    builder.put(0x27ebd2392beaa324L, AgentGeneratorLine);
    builder.put(0x6ca3e29db4287123L, AggregateAttributeMonitor);
    builder.put(0x142c08a9440cdabL, AndCondition);
    builder.put(0x3c282c112f125516L, Attribute);
    builder.put(0x3c282c112f125515L, AttributeCondition);
    builder.put(0x296f74efb466f367L, AttributeDistributionLine);
    builder.put(0x296f74efb466f407L, AttributeDistributionTable);
    builder.put(0x6773e65d466277fcL, AttributeExpressionReference);
    builder.put(0x7117c8e6083740b4L, AttributeMonitor);
    builder.put(0x70b897b58be2575eL, AttributeMonitorReference);
    builder.put(0x3c282c112f125519L, AttributeReference);
    builder.put(0x35463334ce308547L, Behaviour);
    builder.put(0x35463334ce306b7aL, BehaviourElement);
    builder.put(0x3ee12f7242ef3be0L, BehaviourElementReference);
    builder.put(0x35463334ce308546L, BehaviourSequence);
    builder.put(0x142c08a9440bcbdL, BinaryCondition);
    builder.put(0x35463334ce30854aL, Choice);
    builder.put(0x314f6777a655b3faL, CompositeOrder);
    builder.put(0x3ee12f7242ebbb42L, Condition);
    builder.put(0x50f1fbdc6defea52L, ConsequenceElement);
    builder.put(0xbc00e5badf6b520L, ConsequenceInStep);
    builder.put(0x45056e1fe037ad68L, DataInstanceMap);
    builder.put(0x3a7166f1d96f0c96L, DataMap);
    builder.put(0x5f9a2e1a9ac95055L, DeSpawnAction);
    builder.put(0x7ba98c3ed5361882L, Description);
    builder.put(0x139a759560ba2b4L, DirectSignal);
    builder.put(0x139a75955df55b4L, DischargeAction);
    builder.put(0x6773e65d465e21e9L, ExpressionWrapper);
    builder.put(0x7606d63a99b483beL, FollowOrder);
    builder.put(0x7606d63a99b863a2L, HumanInstance);
    builder.put(0x7606d63a99baabefL, HumanInstanceFromSignal);
    builder.put(0x334005c7659a27beL, IAmAtCondition);
    builder.put(0x4e1460f1a0816ab9L, InSameRoomCondition);
    builder.put(0x4936c0ffdc6342bL, InfectionState);
    builder.put(0x3bf86d07f26980c5L, IsExactlyOperator);
    builder.put(0x3bf86d07f26980e2L, IsLessThanOperator);
    builder.put(0x142c08a93d880afL, KernelFCondition);
    builder.put(0x78ac3095f379c3L, MessageSelectionStrategy);
    builder.put(0x35463334ce308554L, MoveAction);
    builder.put(0x7606d63a99b483bdL, MoveOrder);
    builder.put(0x4e1460f1a0f8864aL, MyRoomInstance);
    builder.put(0x2faec239055220ccL, NewPatientSignal);
    builder.put(0x3c282c112f1255b0L, ObjectInstance);
    builder.put(0x4ab0a0c760d9b8f3L, OccupiableAvailabilityCondition);
    builder.put(0x757b60e121ce55abL, OccupiableReference);
    builder.put(0x757b60e121ce5041L, OccupyAction);
    builder.put(0x139a75957e06520L, OccupyOrder);
    builder.put(0x3bf86d07f26980bbL, Operator);
    builder.put(0x7606d63a99b483bcL, Order);
    builder.put(0x7606d63a99b483bbL, OrderPatientAction);
    builder.put(0x296f74efb560f155L, PassiveWaitAction);
    builder.put(0x3111466f1f9f64beL, PassiveWaitUntil);
    builder.put(0x7606d63a99b863a4L, PatientInstance);
    builder.put(0x7606d63a99b863a3L, PlaceInstance);
    builder.put(0xa159abb4e9e65L, PlaceInstanceCollection);
    builder.put(0x3c282c112f1255b3L, PlaceInstanceFromSignal);
    builder.put(0x3c282c112f27bdc3L, PlaceInstanceReference);
    builder.put(0x3c282c112f12564bL, PossibilityCondition);
    builder.put(0x70b897b58bc16ef7L, PossibleValuesTuple);
    builder.put(0x35a97493533736a5L, ProbabilityDistribution);
    builder.put(0x35a97493533736c2L, ProbabilityDistributionLine);
    builder.put(0x78ac3096379b5dL, Relationship);
    builder.put(0xaabf015bded4881L, RemoveRelationshipAction);
    builder.put(0x2f4b56ecb8075c8eL, RepastParam);
    builder.put(0x4813ad0fcd2c154L, RoomIsEmptyOrContainsRelationshipMemberCondition);
    builder.put(0x334005c7663c2373L, RoomSelectionCondition);
    builder.put(0x6e3a4f6d5ccab90aL, RoomSelectionRule);
    builder.put(0x6e3a4f6d5ccaa76fL, RoomSelectionStrategy);
    builder.put(0x6e3a4f6d5ccaaf60L, RoomSelectionStrategyLine);
    builder.put(0x334005c7663c2585L, RoomTypeCondition);
    builder.put(0x20b46d6281e5db6L, RoomTypeIsAvailableCondition);
    builder.put(0x5dafd33967953caaL, RoomTypeReference);
    builder.put(0x6e3a4f6d5de9fe40L, SelectClosestRoom);
    builder.put(0x78ac3095f38ad7L, SelectFirstSignal);
    builder.put(0x78ac3095f78dbfL, SelectNotRelationshipDataSignal);
    builder.put(0x78ac3095f38affL, SelectRandomSignal);
    builder.put(0x78ac3095f38b27L, SelectRelationshipDataSignal);
    builder.put(0x3dab4295aec9b125L, SelectRoomByCapacity);
    builder.put(0x6e3a4f6d5e0c94b5L, SelectRoomByRelationshipToOccupier);
    builder.put(0x6e3a4f6d5ccac9a5L, SelectRoomWithNoAgentsOfType);
    builder.put(0x7606d63a99b5cf14L, SelfInstance);
    builder.put(0x3a7166f1d96f1890L, SendSignalAction);
    builder.put(0x71ffe5bd010732aL, Signal);
    builder.put(0x71ffe5bd010732dL, SignalDefinition);
    builder.put(0x3a7166f1d96f0c93L, SignalInitReference);
    builder.put(0x71ffe5bd013d59eL, SignalReference);
    builder.put(0x78ac3095f379eeL, SignalSelectionRule);
    builder.put(0x78ac3095f379d6L, SignalSelectionRuleLine);
    builder.put(0x2faec239055220c9L, SignalTrigger);
    builder.put(0x3c282c112f125578L, SpaceAtCondition);
    builder.put(0x3a7166f1d96f188fL, StayAction);
    builder.put(0x3c282c112f19d58aL, StayForConditionAction);
    builder.put(0x3c282c112f19d52dL, StayForTimeAction);
    builder.put(0x7606d63a99b483bfL, StopOrder);
    builder.put(0x296f74efb5610eb7L, TimeDistributionLine);
    builder.put(0x296f74efb5610e89L, TimeDistributionTable);
    builder.put(0x50f1fbdc6defec6aL, UpdateAttributeAction);
    builder.put(0x3bf86d07f0a062f6L, UseResourceAction);
    myIndex = builder.seal();
  }

  /*package*/ int index(SConceptId cid) {
    return myIndex.index(cid);
  }

  public int index(SAbstractConcept concept) {
    return myIndex.index(concept);
  }
}
