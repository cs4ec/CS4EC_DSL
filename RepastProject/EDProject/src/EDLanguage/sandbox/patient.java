package EDLanguage.sandbox;

/*Generated by MPS */

import simcore.agents.Actor;
import simcore.action.BackgroundBehaviour;
import simcore.action.Behaviour;
import simcore.action.BehaviourStep;
import repast.simphony.space.continuous.ContinuousSpace;
import repast.simphony.space.grid.Grid;
import repast.simphony.util.collections.IndexedIterable;
import repast.simphony.context.Context;
import repast.simphony.engine.schedule.ScheduledMethod;
import repast.simphony.engine.watcher.Watch;
import repast.simphony.engine.watcher.WatcherTriggerSchedule;
import repast.simphony.query.space.projection.WithinMoore;
import simcore.Signals.Signal;
import simcore.basicStructures.Board;
import java.util.List;
import java.util.function.Predicate;
import java.util.stream.Collectors;
import java.util.stream.Stream;

import EDLanguage.sandbox.Doctor.Consequence_e0a;
import EDLanguage.sandbox.Doctor.DespawnAction_f0a;
import EDLanguage.sandbox.Doctor.MoveAction_a0a;
import EDLanguage.sandbox.Doctor.MoveAction_b0a;
import EDLanguage.sandbox.Doctor.OrderAction_c0a;
import EDLanguage.sandbox.Doctor.RemoveRelationshipAction_g0a;
import EDLanguage.sandbox.Doctor.StayForConditionAction_d0a;
import simcore.basicStructures.Room;
import simcore.basicStructures.RoomType;
import java.util.ArrayList;
import java.util.Comparator;
import simcore.agents.Agent;
import repast.simphony.space.graph.Network;

public class patient extends Actor {

  public String placeholder = "PlaceholderAttribute";
  public String admittedTo = "NA";
  public String admissionRoute = "UnConfigured";
  public String Immunocompromised = "NotConfigured";
  public String CovidInfectionStatus = "NotConfigured";

  public Behaviour behaviourBuilder;

  public patient(ContinuousSpace<Object> space, Grid<Object> grid, Context<Object> context) {
    super(space, grid, context);
    mintMyMaxPatients = 1;
  }
  

  protected Signal searchForSignals(Board board) {
    // Read the board for signals, and find ones for me - filter out any signals that I don't meet the pre-condition for 
    List<Signal> plstDirectSignals = board.GetDirectSignalsForMe(this).stream().filter(new Predicate<Signal>() {
      public boolean test(Signal s) {
        return s.checkPreCondition(context, patient.this);
      }
    }).collect(Collectors.toList());
    List<Signal> plstSignals = board.GetSignalListBySubject(this.getClass()).stream().filter(new Predicate<Signal>() {
      public boolean test(Signal s) {
        return s.checkPreCondition(context, patient.this);
      }
    }).collect(Collectors.toList());

    if (plstDirectSignals.isEmpty() && plstSignals.isEmpty()) {
      return null;
    }
    // First see if there are any direct messages for me and prioritise those 
    Signal s = selectSignal(plstDirectSignals);
    if (s == null) {
      // If none, select a message for my class type 
      s = selectSignal(plstSignals);
    }
    return s;
  }


  protected Signal selectSignal(List<Signal> plstSignals) {
    if (plstSignals.isEmpty()) {
      return null;
    }
    return null;
  }

  protected Room SelectLocation(RoomType pRoomType, Behaviour behaviour) {
    ArrayList<Room> pRooms = (ArrayList<Room>) ReadMap().FindInstancesOfRoomType(pRoomType);
    // First, select the room that contains my patient (if my current action involves the patient) 
    for (Room pRoom : pRooms) {
      if (behaviour.getSignalTrigger() != null && behaviour.getSignalTrigger().GetData("patient") != null && pRoom.getOccupiers().contains(behaviour.getSignalTrigger().GetData("patient"))) {
        return pRoom;
      }
    }
    // If my patient isn't currently in that room, then consider other options 
    Room selectedRoom = pRooms.stream().sorted(new Comparator<Room>() {
      public int compare(Room r1, Room r2) {
        return Double.compare(EvaluateRoomChoice(r1), EvaluateRoomChoice(r2));
      }
    }).filter(new Predicate<Room>() {
      public boolean test(Room r) {
        return EvaluateRoomChoice(r) != Double.MAX_VALUE;
      }
    }).findFirst().orElse(null);
    return selectedRoom;
  }


  protected double EvaluateRoomChoice(Room pRoom) {
    ArrayList<Agent> occupiers = new ArrayList<Agent>(pRoom.getOccupiers());

    if (pRoom == null) {
      return 0;
    }
    return 0;

  }





  public Behaviour BuildActionFromSignal(Signal s) {
    if (s.GetData("patient") != null) {
      ((Network) context.getProjection("CurrentPatientAllocations")).addEdge(this, s.GetData("patient"));
    }
    switch (s.getName()) {
      case "":
        break;
      default:
        System.out.println("Set mission: " + s.getName() + " failed!");
        return behaviourBuilder;
    }
    return behaviourBuilder;
  }


  public int getImmunocompromisedisYes() {
    if (this.Immunocompromised == "Yes") {
      return 1;
    }
    return 0;
  }
  public int getImmunocompromisedisNo() {
    if (this.Immunocompromised == "No") {
      return 1;
    }
    return 0;
  }
  public int getadmittedToisCOVIDPositiveCohort() {
    if (this.admittedTo == "COVIDPositiveCohort") {
      return 1;
    }
    return 0;
  }
  public int getadmittedToisCOVIDPositiveCohortgetImmunocompromisedisYes() {
    if (this.admittedTo == "COVIDPositiveCohort" && this.Immunocompromised == "Yes") {
      return 1;
    }
    return 0;
  }
  public int getadmittedToisCOVIDPositiveCohortgetImmunocompromisedisNo() {
    if (this.admittedTo == "COVIDPositiveCohort" && this.Immunocompromised == "No") {
      return 1;
    }
    return 0;
  }

	@ScheduledMethod(start = 1, interval = 1)
	public void infectionRiskOld() {
		IndexedIterable allPatients = context.getObjects(patient.class);
		for (Object o : allPatients){
			patient p = (patient) o;
			if(p.admittedTo == "NA" && distanceTo(p) < 5) {
				System.out.println("I am near someone");
			}
		}
		
	}
	
  @ScheduledMethod(start = 1, interval = 1)
  public void BackgroundBehaviourFactory() {
		IndexedIterable allPatients = context.getObjects(patient.class);
		for (Object o : allPatients){
			patient p = (patient) o;
			Signal s = new Signal();
			s.setName("patient"+p.agentName());
			s.setDescription("InfectionSpread");
			s.AddActor("patient");
			s.AddData("patient", p);
			infectionSpreadMethod(s);
		}
  }
  
  public void infectionSpreadMethod(Signal s) {
		if(((patient)s.GetData("patient")).admittedTo == "NA" && distanceTo(((patient)s.GetData("patient"))) < 5) {
			BackgroundBehaviour bgBehaviour = new BackgroundBehaviour("infectionSpreadBackgroundBehaviour", this);

			
			// Create Background Behaviour Steps
			ArrayList<BehaviourStep> plstSteps = new ArrayList();
		    plstSteps.add(new checkAttribute(bgBehaviour));
		    plstSteps.add(new updateAttribute(bgBehaviour));
		    bgBehaviour.setSteps(plstSteps);
		    
		    myBackgroundBehaviours.add(bgBehaviour);
		}

	  }
	  

	public class checkAttribute extends BehaviourStep {
	    /*package*/ Behaviour behaviour;
	    /*package*/ Object target;
	    /*package*/ Object concreteTarget;
	    public checkAttribute(Behaviour behaviour) {
	      target = behaviour.getSignalTrigger().GetData("patient");
	      this.behaviour = behaviour;
	    }

	    public void execute() {

	    }
	}
	
	public class updateAttribute extends BehaviourStep {
	    /*package*/ Behaviour behaviour;
	    /*package*/ Object target;
	    /*package*/ Object concreteTarget;
	    public updateAttribute(Behaviour behaviour) {
	      target = behaviour.getSignalTrigger().GetData("patient");
	      this.behaviour = behaviour;
	    }

	    public void execute() {

	    }
	}


  public int patientgetAliveTime() {
    if (deSpawnTime == 0) {
      deSpawnTime = ToolBox().getTime();
    }
    return (int) (deSpawnTime - spawnTime);
  }
}
