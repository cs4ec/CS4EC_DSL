package EDLanguage.sandbox;

/*Generated by MPS */

import repast.simphony.dataLoader.ContextBuilder;
import repast.simphony.context.Context;
import repast.simphony.parameter.Parameters;
import repast.simphony.engine.environment.RunEnvironment;
import simcore.utilities.ModelParameterStore;
import repast.simphony.context.space.continuous.ContinuousSpaceFactory;
import repast.simphony.context.space.continuous.ContinuousSpaceFactoryFinder;
import repast.simphony.space.continuous.ContinuousSpace;
import simcore.utilities.StaffAdder;
import repast.simphony.space.continuous.StrictBorders;
import repast.simphony.context.space.grid.GridFactory;
import repast.simphony.context.space.grid.GridFactoryFinder;
import repast.simphony.space.grid.Grid;
import repast.simphony.space.grid.GridBuilderParameters;
import repast.simphony.space.grid.SimpleGridAdder;
import simcore.basicStructures.Board;
import repast.simphony.valueLayer.GridValueLayer;
import simcore.basicStructures.Room;
import java.awt.Color;
import repast.simphony.space.continuous.NdPoint;
import java.util.HashMap;
import simcore.utilities.PatientArrivalStore;
import java.util.Map;
import simcore.basicStructures.Wall;

public class EDBuilder implements ContextBuilder<Object> {

  public Context build(Context<Object> context) {

    context.setId("EDProject");

    Parameters params = RunEnvironment.getInstance().getParameters();

    Double pPrev = params.getDouble("Prevalence");
    Double pProportionSymptomatic = params.getDouble("PercentagePrevSymptomatic");

    Boolean pBool = params.getBoolean("UsePathFinding");
    ModelParameterStore.UsePathFinding = pBool;

    RunEnvironment.getInstance().endAt(86400);

    CreatePatientArrivalMap();

    ContinuousSpaceFactory spaceFactory = ContinuousSpaceFactoryFinder.createContinuousSpaceFactory(null);
    ContinuousSpace<Object> space = spaceFactory.createContinuousSpace("space", context, new StaffAdder<Object>(), new StrictBorders(), 400, 400);

    GridFactory gridFactory = GridFactoryFinder.createGridFactory(null);
    Grid<Object> grid = gridFactory.createGrid("grid", context, new GridBuilderParameters<Object>(new repast.simphony.space.grid.StrictBorders(), new SimpleGridAdder<Object>(), true, 400, 400));

    context.add(new patientGenerator(space, grid, context));
    context.add(new Board());

    // add Agents 
    for (int i = 0; i < 5; i++) {
      context.add(new Doc(space, grid, context));
    }


    GridValueLayer vl = new GridValueLayer("cellbox", true, new repast.simphony.space.grid.StrictBorders(), 400, 400);
    context.addValueLayer(vl);

    // add Locations here 
    Room Ward1_a = new Room("Ward1", context, space, grid, 1, 1, 1, 1, 1, 2, Ward.getInstance(), Color.BLACK);
    try {
      Ward1_a.setSeats(1);
      Ward1_a.setDesks(0);
      Ward1_a.setBeds(0);
    } catch (NumberFormatException e) {
    }


    for (Object obj : context) {
      NdPoint pt = space.getLocation(obj);
      grid.moveTo(obj, (int) pt.getX(), (int) pt.getY());
    }

    return context;
  }

  public void CreatePatientArrivalMap() {
    HashMap ArrivalPerHour = new HashMap();
    ArrivalPerHour.put(1, 5);
    ArrivalPerHour.put(2, 4);
    ArrivalPerHour.put(3, 5);
    ArrivalPerHour.put(4, 6);
    ArrivalPerHour.put(5, 5);
    ArrivalPerHour.put(6, 4);
    ArrivalPerHour.put(7, 5);
    ArrivalPerHour.put(8, 6);
    ArrivalPerHour.put(9, 7);
    ArrivalPerHour.put(10, 3);
    ArrivalPerHour.put(11, 8);
    ArrivalPerHour.put(12, 4);
    ArrivalPerHour.put(13, 6);
    ArrivalPerHour.put(14, 3);
    ArrivalPerHour.put(15, 3);
    ArrivalPerHour.put(16, 3);
    ArrivalPerHour.put(17, 6);
    ArrivalPerHour.put(18, 3);
    ArrivalPerHour.put(19, 4);
    ArrivalPerHour.put(20, 5);
    ArrivalPerHour.put(21, 6);
    ArrivalPerHour.put(22, 7);
    ArrivalPerHour.put(23, 3);
    ArrivalPerHour.put(24, 4);
    PatientArrivalStore.Initialise((Map<Integer, Integer>) ArrivalPerHour);
  }

  private void createWallBetween(int x1, int y1, int x2, int y2, Context<Object> context, ContinuousSpace<Object> space, Grid<Object> grid) {
    if (x1 == x2) {
      for (int i = y1; i < y2; i++) {
        Wall pWall = new Wall("", context, space, grid, x1, i);
      }
    } else {
      float ratio = (y2 - y1) / (x2 - x1);
      int width = x2 - x1;
      for (int i = 0; i < width; i++) {
        float x = x1 + i;
        float y = y1 + (ratio * i);
        Wall pWall = new Wall("", context, space, grid, ((int) x), ((int) y));
      }

    }
  }
}
