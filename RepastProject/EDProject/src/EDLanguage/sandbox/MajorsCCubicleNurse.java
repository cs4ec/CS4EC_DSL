package EDLanguage.sandbox;

/*Generated by MPS */

import simcore.agents.Actor;
import simcore.action.Behaviour;
import repast.simphony.space.continuous.ContinuousSpace;
import repast.simphony.space.grid.Grid;
import repast.simphony.context.Context;
import simcore.Signals.Signal;
import simcore.basicStructures.Board;
import java.util.List;
import java.util.function.Predicate;
import java.util.stream.Collectors;
import repast.simphony.space.graph.Network;
import java.util.stream.StreamSupport;
import repast.simphony.space.graph.RepastEdge;
import simcore.basicStructures.Room;
import simcore.basicStructures.RoomType;
import java.util.ArrayList;
import java.util.Comparator;
import simcore.agents.Agent;
import simcore.action.BehaviourStep;
import repast.simphony.engine.environment.RunEnvironment;
import simcore.Signals.Orders.MoveToOrder;
import simcore.action.InstantBehaviourStep;
import simcore.action.PassiveBehaviourStep;
import org.iets3.core.expr.simpleTypes.runtime.AH;
import simcore.basicStructures.TimeKeeper;

public class MajorsCCubicleNurse extends Actor {

  public Behaviour behaviourBuilder;

  public MajorsCCubicleNurse(ContinuousSpace<Object> space, Grid<Object> grid, Context<Object> context) {
    super(space, grid, context);
    mintMyMaxPatients = 5;
  }

  protected Signal searchForSignals(Board board) {
    // Read the board for signals, and find ones for me - filter out any signals that I don't meet the pre-condition for
    List<Signal> plstDirectSignals = board.GetDirectSignalsForMe(this).stream().filter(new Predicate<Signal>() {
      public boolean test(Signal s) {
        return s.checkPreCondition(context, MajorsCCubicleNurse.this);
      }
    }).collect(Collectors.toList());



    List<Signal> plstSignals = board.GetSignalListBySubject(this.getClass()).stream().filter(new Predicate<Signal>() {
      public boolean test(Signal s) {
        return s.checkPreCondition(context, MajorsCCubicleNurse.this);
      }
    }).collect(Collectors.toList());

    if (plstDirectSignals.isEmpty() && plstSignals.isEmpty()) {
      return null;
    }
    // First see if there are any direct messages for me and prioritise those
    Signal s = selectSignal(plstDirectSignals);
    if (s == null) {
      // If none, select a message for my class type
      s = selectSignal(plstSignals);
    }
    return s;
  }


  protected Signal selectSignal(List<Signal> plstSignals) {
    if (!(plstSignals.isEmpty())) {
      if (plstSignals.stream().filter(new Predicate<Signal>() {
        public boolean test(Signal s) {
          return ((Network) context.getProjection("CurrentPatientAllocations")).getEdge(MajorsCCubicleNurse.this, s.GetData("patient")) != null;
        }
      }).findFirst().orElse(null) != null) {
        return plstSignals.stream().filter(new Predicate<Signal>() {
          public boolean test(Signal s) {
            return ((Network) context.getProjection("CurrentPatientAllocations")).getEdge(MajorsCCubicleNurse.this, s.GetData("patient")) != null;
          }
        }).findFirst().orElse(null);
      }
      if (plstSignals.stream().filter(new Predicate<Signal>() {
        public boolean test(Signal s) {
          return StreamSupport.stream(((Network) context.getProjection("CurrentPatientAllocations")).getEdges(s.GetData("patient")).spliterator(), false).filter(new Predicate<RepastEdge<Object>>() {
            public boolean test(RepastEdge<Object> e) {
              return e.getSource().getClass() == MajorsCCubicleNurse.class;
            }
          }).count() < 1 && ((Network) context.getProjection("CurrentPatientAllocations")).getDegree(MajorsCCubicleNurse.this) < mintMyMaxPatients;
        }
      }).findFirst().orElse(null) != null) {
        return plstSignals.stream().filter(new Predicate<Signal>() {
          public boolean test(Signal s) {
            return StreamSupport.stream(((Network) context.getProjection("CurrentPatientAllocations")).getEdges(s.GetData("patient")).spliterator(), false).filter(new Predicate<RepastEdge<Object>>() {
              public boolean test(RepastEdge<Object> e) {
                return e.getSource().getClass() == MajorsCCubicleNurse.class;
              }
            }).count() < 1 && ((Network) context.getProjection("CurrentPatientAllocations")).getDegree(MajorsCCubicleNurse.this) < mintMyMaxPatients;
          }
        }).findFirst().orElse(null);
      }
    }
    return null;
  }

  protected Room SelectLocation(RoomType pRoomType, final Behaviour behaviour) {
    if (curInside != null && curInside.getRoomType() == pRoomType && EvaluateRoomChoice(curInside, behaviour) != Double.MAX_VALUE) {
      return curInside;
    }
    ArrayList<Room> pRooms = (ArrayList<Room>) ReadMap().FindInstancesOfRoomType(pRoomType);
    // First, select the room that contains my patient (if my current action involves the patient)
    for (Room pRoom : pRooms) {
      if (behaviour.getSignalTrigger() != null && behaviour.getSignalTrigger().GetData("patient") != null && pRoom.getOccupiers().contains(behaviour.getSignalTrigger().GetData("patient"))) {
        return pRoom;
      }
    }
    // If my patient isn't currently in that room, then consider other options
    Room selectedRoom = pRooms.stream().sorted(new Comparator<Room>() {
      public int compare(Room r1, Room r2) {
        return Double.compare(EvaluateRoomChoice(r1, behaviour), EvaluateRoomChoice(r2, behaviour));
      }
    }).filter(new Predicate<Room>() {
      public boolean test(Room r) {
        return EvaluateRoomChoice(r, behaviour) != Double.MAX_VALUE;
      }
    }).findFirst().orElse(null);
    return selectedRoom;
  }


  protected double EvaluateRoomChoice(Room pRoom, final Behaviour behaviour) {
    ArrayList<Agent> occupiers = new ArrayList<Agent>(pRoom.getOccupiers());

    if (true) {
      if (behaviour.getSignalTrigger() != null && pRoom.getOccupiers().stream().anyMatch(new Predicate<Agent>() {
        public boolean test(Agent a) {
          return a == behaviour.getSignalTrigger().GetData("patient");
        }
      })) {
        return Double.MIN_VALUE;
      }
    }
    if (true) {
      if (!(pRoom.hasCapacity(this))) {
        return Double.MAX_VALUE;
      }
    }
    if (true) {
      return (CalcDistance(grid.getLocation(this), grid.getLocation(pRoom)));
    }
    return 0;

  }

  public Behaviour isIdleAction(Signal s) {
    behaviourBuilder = new Behaviour("isIdleAction", this);
    behaviourBuilder.setSignalTrigger(s);
    ArrayList<BehaviourStep> plstSteps = new ArrayList();
    plstSteps.add(new MoveAction_a0a_5(behaviourBuilder));
    behaviourBuilder.setSteps(plstSteps);

    Signal sendSignalTemp = new Signal();

    return behaviourBuilder;
  }




  public Behaviour BuildActionFromSignal(Signal s) {
    if (s.GetData("patient") != null) {
      ((Network) context.getProjection("CurrentPatientAllocations")).addEdge(this, s.GetData("patient"));
    }
    switch (s.getName()) {
      case "":
        break;
      case "LFDTrigger_b":
        behaviourBuilder = new Behaviour("LFDTrigger_b", this);
        this.InitLFD_b_0(s);
        break;
      case "CheckClinicalSusipicionTrigger_c":
        behaviourBuilder = new Behaviour("CheckClinicalSusipicionTrigger_c", this);
        this.InitCheckClinicalSusipicion_c_0(s);
        break;
      case "PerformLIATorCepheidTrigger_d":
        behaviourBuilder = new Behaviour("PerformLIATorCepheidTrigger_d", this);
        this.InitPerformLIATorCepheid_d_0(s);
        break;
      case "IspatientbeingadmittedtovulnerableareaTrigger_f":
        behaviourBuilder = new Behaviour("IspatientbeingadmittedtovulnerableareaTrigger_f", this);
        this.InitIspatientbeingadmittedtovulnerablearea_f_0(s);
        break;
      case "PerformLIATorCepheidTrigger_g":
        behaviourBuilder = new Behaviour("PerformLIATorCepheidTrigger_g", this);
        this.InitPerformLIATorCepheid_g_0(s);
        break;
      case "NurseTreatmentsTrigger_m":
        behaviourBuilder = new Behaviour("NurseTreatmentsTrigger_m", this);
        this.InitNurseTreatments_m(s);
        break;
      case "NurseTreatmentsTrigger_n":
        behaviourBuilder = new Behaviour("NurseTreatmentsTrigger_n", this);
        this.InitNurseTreatments_n_0(s);
        break;
      default:
        System.out.println("Set mission: " + s.getName() + " failed!");
        return behaviourBuilder;
    }
    return behaviourBuilder;
  }




  public class MoveAction_a0a_4 extends BehaviourStep {
    /*package*/ Behaviour behaviour;
    /*package*/ Object target;
    /*package*/ Object concreteTarget;
    public MoveAction_a0a_4(Behaviour behaviour) {
      target = MajorsC_Cubicle.getInstance();
      this.behaviour = behaviour;
    }

    public void execute() {
      int count = 0;

      while (count < RunEnvironment.getInstance().getParameters().getInteger("SecondsPerTick")) {
        count++;
        if (finishCondition()) {
          return;
        }
        if (concreteTarget == null) {
          if (target instanceof RoomType) {
            concreteTarget = SelectLocation(((RoomType) target), behaviour);
          } else {
            concreteTarget = target;
          }
        }

        if (concreteTarget != null) {
          if (target instanceof RoomType) {
            if (EvaluateRoomChoice(((Room) concreteTarget), behaviour) == Double.MAX_VALUE) {
              concreteTarget = SelectLocation(((RoomType) target), behaviour);
            }
          }

          MoveTowards(concreteTarget);

        }
      }
    }

    public boolean finishCondition() {
      return concreteTarget != null && ImAt(concreteTarget);
    }
  }
  public class OrderAction_b0a_1 extends BehaviourStep {
    /*package*/ Behaviour behaviour;
    public OrderAction_b0a_1(Behaviour behaviour) {
      this.behaviour = behaviour;
    }

    public void execute() {
      Actor a = (Actor) behaviour.getSignalTrigger().GetData("patient");

      a.TakeOrder(new MoveToOrder().WithDestination(MajorsCCubicleNurse.this.curInside).andThen(new MoveToOrder().WithDestination(Bed.class)));
    }
  }
  public class StayForConditionAction_c0a_1 extends BehaviourStep {
    /*package*/ Behaviour behaviour;

    public StayForConditionAction_c0a_1(Behaviour behaviour) {
      this.behaviour = behaviour;
    }

    public void execute() {
      // Do nothing
    }

    public boolean finishCondition() {
      return curInside != null && curInside == ((Actor) behaviour.getSignalTrigger().GetData("patient")).getRoom();
    }
  }
  public class StayAction_d0a_0 extends BehaviourStep {
    /*package*/ Behaviour behaviour;
    /*package*/ int timeExecuted = 0;
    public StayAction_d0a_0(Behaviour behaviour) {
      this.behaviour = behaviour;
    }

    public void execute() {
      // Do nothing
      timeExecuted++;
    }

    public boolean finishCondition() {
      return (timeExecuted == (300 / RunEnvironment.getInstance().getParameters().getInteger("SecondsPerTick")));

    }
  }
  public class UseAction_e0a_0 extends InstantBehaviourStep {
    /*package*/ Behaviour behaviour;
    public UseAction_e0a_0(Behaviour behaviour) {
      this.behaviour = behaviour;
    }

    public void execute() {

      ((Room) ToolBox().ReadMap().getCurrentRoom(MajorsCCubicleNurse.this)).getParentArea().decrementResource(LateralFlow.getInstance());
    }
  }
  public class StayAction_f0a_0 extends PassiveBehaviourStep {
    /*package*/ Behaviour behaviour;
    /*package*/ int testingTime = LateralFlowExecutionTimeMap.getInstance().getProcessingTime();
    /*package*/ int timeExecuted = 0;
    public StayAction_f0a_0(Behaviour behaviour) {
      this.behaviour = behaviour;
    }

    public void execute() {
      // Do nothing
      timeExecuted++;
    }

    public boolean finishCondition() {
      return timeExecuted == testingTime;
    }
  }
  public class Consequence_a0a0g0a_7 extends InstantBehaviourStep {
    /*package*/ Behaviour behaviour;
    public Consequence_a0a0g0a_7(Behaviour behaviour) {
      this.behaviour = behaviour;
    }

    public void execute() {
      ((patient) behaviour.getSignalTrigger().GetData("patient")).LateralFlowCOVIDResult = "Positive";

    }
  }
  public class Consequence_a0a0g0a_8 extends InstantBehaviourStep {
    /*package*/ Behaviour behaviour;
    public Consequence_a0a0g0a_8(Behaviour behaviour) {
      this.behaviour = behaviour;
    }

    public void execute() {
      ((patient) behaviour.getSignalTrigger().GetData("patient")).LateralFlowCOVIDResult = "Negative";

    }
  }
  public class Choice_a0g0a_3 extends InstantBehaviourStep {
    /*package*/ Behaviour behaviour;
    public Choice_a0g0a_3(Behaviour behaviour) {
      this.behaviour = behaviour;
    }

    public void execute() {
      if (Dice(RunEnvironment.getInstance().getParameters().getDouble("LateralFlowCOVIDSensitivity"))) {
        ArrayList<BehaviourStep> plstSteps = new ArrayList();
        plstSteps.add(new Consequence_a0a0g0a_7(behaviour));
        behaviour.injectSteps(plstSteps);
      } else {
        ArrayList<BehaviourStep> plstSteps = new ArrayList();
        plstSteps.add(new Consequence_a0a0g0a_8(behaviour));
        behaviour.injectSteps(plstSteps);
      }
    }
  }
  public class Consequence_a0a0g0a_9 extends InstantBehaviourStep {
    /*package*/ Behaviour behaviour;
    public Consequence_a0a0g0a_9(Behaviour behaviour) {
      this.behaviour = behaviour;
    }

    public void execute() {
      ((patient) behaviour.getSignalTrigger().GetData("patient")).LateralFlowCOVIDResult = "Negative";

    }
  }
  public class Consequence_a0a0g0a_10 extends InstantBehaviourStep {
    /*package*/ Behaviour behaviour;
    public Consequence_a0a0g0a_10(Behaviour behaviour) {
      this.behaviour = behaviour;
    }

    public void execute() {
      ((patient) behaviour.getSignalTrigger().GetData("patient")).LateralFlowCOVIDResult = "Positive";

    }
  }
  public class Choice_a0g0a_4 extends InstantBehaviourStep {
    /*package*/ Behaviour behaviour;
    public Choice_a0g0a_4(Behaviour behaviour) {
      this.behaviour = behaviour;
    }

    public void execute() {
      if (Dice(RunEnvironment.getInstance().getParameters().getDouble("LateralFlowCOVIDSpecificity"))) {
        ArrayList<BehaviourStep> plstSteps = new ArrayList();
        plstSteps.add(new Consequence_a0a0g0a_9(behaviour));
        behaviour.injectSteps(plstSteps);
      } else {
        ArrayList<BehaviourStep> plstSteps = new ArrayList();
        plstSteps.add(new Consequence_a0a0g0a_10(behaviour));
        behaviour.injectSteps(plstSteps);
      }
    }
  }
  public class Choice_g0a_1 extends InstantBehaviourStep {
    /*package*/ Behaviour behaviour;
    public Choice_g0a_1(Behaviour behaviour) {
      this.behaviour = behaviour;
    }

    public void execute() {
      if ((((patient) behaviour.getSignalTrigger().GetData("patient")).COVIDInfectionStatus == "Symptomatic") || (((patient) behaviour.getSignalTrigger().GetData("patient")).COVIDInfectionStatus == "Asymptomatic")) {
        ArrayList<BehaviourStep> plstSteps = new ArrayList();
        plstSteps.add(new Choice_a0g0a_3(behaviour));
        behaviour.injectSteps(plstSteps);
      } else {
        ArrayList<BehaviourStep> plstSteps = new ArrayList();
        plstSteps.add(new Choice_a0g0a_4(behaviour));
        behaviour.injectSteps(plstSteps);
      }
    }
  }
  public class Consequence_a0a0h0a_7 extends InstantBehaviourStep {
    /*package*/ Behaviour behaviour;
    public Consequence_a0a0h0a_7(Behaviour behaviour) {
      this.behaviour = behaviour;
    }

    public void execute() {
      ((patient) behaviour.getSignalTrigger().GetData("patient")).LateralFlowFluAResult = "Positive";

    }
  }
  public class Consequence_a0a0h0a_8 extends InstantBehaviourStep {
    /*package*/ Behaviour behaviour;
    public Consequence_a0a0h0a_8(Behaviour behaviour) {
      this.behaviour = behaviour;
    }

    public void execute() {
      ((patient) behaviour.getSignalTrigger().GetData("patient")).LateralFlowFluAResult = "Negative";

    }
  }
  public class Choice_a0h0a_3 extends InstantBehaviourStep {
    /*package*/ Behaviour behaviour;
    public Choice_a0h0a_3(Behaviour behaviour) {
      this.behaviour = behaviour;
    }

    public void execute() {
      if (Dice(RunEnvironment.getInstance().getParameters().getDouble("LateralFlowFluASensitivity"))) {
        ArrayList<BehaviourStep> plstSteps = new ArrayList();
        plstSteps.add(new Consequence_a0a0h0a_7(behaviour));
        behaviour.injectSteps(plstSteps);
      } else {
        ArrayList<BehaviourStep> plstSteps = new ArrayList();
        plstSteps.add(new Consequence_a0a0h0a_8(behaviour));
        behaviour.injectSteps(plstSteps);
      }
    }
  }
  public class Consequence_a0a0h0a_9 extends InstantBehaviourStep {
    /*package*/ Behaviour behaviour;
    public Consequence_a0a0h0a_9(Behaviour behaviour) {
      this.behaviour = behaviour;
    }

    public void execute() {
      ((patient) behaviour.getSignalTrigger().GetData("patient")).LateralFlowFluAResult = "Negative";

    }
  }
  public class Consequence_a0a0h0a_10 extends InstantBehaviourStep {
    /*package*/ Behaviour behaviour;
    public Consequence_a0a0h0a_10(Behaviour behaviour) {
      this.behaviour = behaviour;
    }

    public void execute() {
      ((patient) behaviour.getSignalTrigger().GetData("patient")).LateralFlowFluAResult = "Positive";

    }
  }
  public class Choice_a0h0a_4 extends InstantBehaviourStep {
    /*package*/ Behaviour behaviour;
    public Choice_a0h0a_4(Behaviour behaviour) {
      this.behaviour = behaviour;
    }

    public void execute() {
      if (Dice(RunEnvironment.getInstance().getParameters().getDouble("LateralFlowFluASpecificity"))) {
        ArrayList<BehaviourStep> plstSteps = new ArrayList();
        plstSteps.add(new Consequence_a0a0h0a_9(behaviour));
        behaviour.injectSteps(plstSteps);
      } else {
        ArrayList<BehaviourStep> plstSteps = new ArrayList();
        plstSteps.add(new Consequence_a0a0h0a_10(behaviour));
        behaviour.injectSteps(plstSteps);
      }
    }
  }
  public class Choice_h0a_1 extends InstantBehaviourStep {
    /*package*/ Behaviour behaviour;
    public Choice_h0a_1(Behaviour behaviour) {
      this.behaviour = behaviour;
    }

    public void execute() {
      if ((((patient) behaviour.getSignalTrigger().GetData("patient")).FluAInfectionStatus == "Symptomatic") || (((patient) behaviour.getSignalTrigger().GetData("patient")).FluAInfectionStatus == "Asymptomatic")) {
        ArrayList<BehaviourStep> plstSteps = new ArrayList();
        plstSteps.add(new Choice_a0h0a_3(behaviour));
        behaviour.injectSteps(plstSteps);
      } else {
        ArrayList<BehaviourStep> plstSteps = new ArrayList();
        plstSteps.add(new Choice_a0h0a_4(behaviour));
        behaviour.injectSteps(plstSteps);
      }
    }
  }
  public class Consequence_a0a0i0a_3 extends InstantBehaviourStep {
    /*package*/ Behaviour behaviour;
    public Consequence_a0a0i0a_3(Behaviour behaviour) {
      this.behaviour = behaviour;
    }

    public void execute() {
      ((patient) behaviour.getSignalTrigger().GetData("patient")).LateralFlowFluBResult = "Positive";

    }
  }
  public class Consequence_a0a0i0a_4 extends InstantBehaviourStep {
    /*package*/ Behaviour behaviour;
    public Consequence_a0a0i0a_4(Behaviour behaviour) {
      this.behaviour = behaviour;
    }

    public void execute() {
      ((patient) behaviour.getSignalTrigger().GetData("patient")).LateralFlowFluBResult = "Negative";

    }
  }
  public class Choice_a0i0a_1 extends InstantBehaviourStep {
    /*package*/ Behaviour behaviour;
    public Choice_a0i0a_1(Behaviour behaviour) {
      this.behaviour = behaviour;
    }

    public void execute() {
      if (Dice(RunEnvironment.getInstance().getParameters().getDouble("LateralFlowFluBSensitivity"))) {
        ArrayList<BehaviourStep> plstSteps = new ArrayList();
        plstSteps.add(new Consequence_a0a0i0a_3(behaviour));
        behaviour.injectSteps(plstSteps);
      } else {
        ArrayList<BehaviourStep> plstSteps = new ArrayList();
        plstSteps.add(new Consequence_a0a0i0a_4(behaviour));
        behaviour.injectSteps(plstSteps);
      }
    }
  }
  public class Consequence_a0a0i0a_5 extends InstantBehaviourStep {
    /*package*/ Behaviour behaviour;
    public Consequence_a0a0i0a_5(Behaviour behaviour) {
      this.behaviour = behaviour;
    }

    public void execute() {
      ((patient) behaviour.getSignalTrigger().GetData("patient")).LateralFlowFluBResult = "Negative";

    }
  }
  public class Consequence_a0a0i0a_6 extends InstantBehaviourStep {
    /*package*/ Behaviour behaviour;
    public Consequence_a0a0i0a_6(Behaviour behaviour) {
      this.behaviour = behaviour;
    }

    public void execute() {
      ((patient) behaviour.getSignalTrigger().GetData("patient")).LateralFlowFluBResult = "Positive";

    }
  }
  public class Choice_a0i0a_2 extends InstantBehaviourStep {
    /*package*/ Behaviour behaviour;
    public Choice_a0i0a_2(Behaviour behaviour) {
      this.behaviour = behaviour;
    }

    public void execute() {
      if (Dice(RunEnvironment.getInstance().getParameters().getDouble("LateralFlowFluBSpecificity"))) {
        ArrayList<BehaviourStep> plstSteps = new ArrayList();
        plstSteps.add(new Consequence_a0a0i0a_5(behaviour));
        behaviour.injectSteps(plstSteps);
      } else {
        ArrayList<BehaviourStep> plstSteps = new ArrayList();
        plstSteps.add(new Consequence_a0a0i0a_6(behaviour));
        behaviour.injectSteps(plstSteps);
      }
    }
  }
  public class Choice_i0a_0 extends InstantBehaviourStep {
    /*package*/ Behaviour behaviour;
    public Choice_i0a_0(Behaviour behaviour) {
      this.behaviour = behaviour;
    }

    public void execute() {
      if ((((patient) behaviour.getSignalTrigger().GetData("patient")).FluBInfectionStatus == "Symptomatic") || (((patient) behaviour.getSignalTrigger().GetData("patient")).FluBInfectionStatus == "Asymptomatic")) {
        ArrayList<BehaviourStep> plstSteps = new ArrayList();
        plstSteps.add(new Choice_a0i0a_1(behaviour));
        behaviour.injectSteps(plstSteps);
      } else {
        ArrayList<BehaviourStep> plstSteps = new ArrayList();
        plstSteps.add(new Choice_a0i0a_2(behaviour));
        behaviour.injectSteps(plstSteps);
      }
    }
  }
  public class OrderAction_j0a_0 extends BehaviourStep {
    /*package*/ Behaviour behaviour;
    public OrderAction_j0a_0(Behaviour behaviour) {
      this.behaviour = behaviour;
    }

    public void execute() {
      Actor a = (Actor) behaviour.getSignalTrigger().GetData("patient");

      a.TakeOrder(new MoveToOrder().WithDestination(MajorsCWaitingRoom.getInstance()));
    }
  }
  public class OrderAction_k0a extends BehaviourStep {
    /*package*/ Behaviour behaviour;
    public OrderAction_k0a(Behaviour behaviour) {
      this.behaviour = behaviour;
    }

    public void execute() {
      Actor a = (Actor) behaviour.getSignalTrigger().GetData("patient");

      a.TakeOrder(new MoveToOrder().WithDestination(Seat.class));
    }
  }
  public class SendSignalAction_l0a extends BehaviourStep {
    /*package*/ Behaviour behaviour;

    public SendSignalAction_l0a(Behaviour behaviour) {
      this.behaviour = behaviour;
    }

    public void execute() {
      Board b = ReadBoard();
      Signal sendSignalTemp = new Signal();
      sendSignalTemp = new DoctorAssessmentTrigger_kSignal();
      sendSignalTemp.AddData("patient", behaviour.getSignalTrigger().GetData("patient"));

      b.PushMission(sendSignalTemp);
    }
  }
  public class MoveAction_a0b_1 extends BehaviourStep {
    /*package*/ Behaviour behaviour;
    /*package*/ Object target;
    /*package*/ Object concreteTarget;
    public MoveAction_a0b_1(Behaviour behaviour) {
      target = MajorsC_Cubicle.getInstance();
      this.behaviour = behaviour;
    }

    public void execute() {
      int count = 0;

      while (count < RunEnvironment.getInstance().getParameters().getInteger("SecondsPerTick")) {
        count++;
        if (finishCondition()) {
          return;
        }
        if (concreteTarget == null) {
          if (target instanceof RoomType) {
            concreteTarget = SelectLocation(((RoomType) target), behaviour);
          } else {
            concreteTarget = target;
          }
        }

        if (concreteTarget != null) {
          if (target instanceof RoomType) {
            if (EvaluateRoomChoice(((Room) concreteTarget), behaviour) == Double.MAX_VALUE) {
              concreteTarget = SelectLocation(((RoomType) target), behaviour);
            }
          }

          MoveTowards(concreteTarget);

        }
      }
    }

    public boolean finishCondition() {
      return concreteTarget != null && ImAt(concreteTarget);
    }
  }
  public class OrderAction_b0b_0 extends BehaviourStep {
    /*package*/ Behaviour behaviour;
    public OrderAction_b0b_0(Behaviour behaviour) {
      this.behaviour = behaviour;
    }

    public void execute() {
      Actor a = (Actor) behaviour.getSignalTrigger().GetData("patient");

      a.TakeOrder(new MoveToOrder().WithDestination(MajorsCCubicleNurse.this.curInside).andThen(new MoveToOrder().WithDestination(Bed.class)));
    }
  }
  public class StayForConditionAction_c0b_0 extends BehaviourStep {
    /*package*/ Behaviour behaviour;

    public StayForConditionAction_c0b_0(Behaviour behaviour) {
      this.behaviour = behaviour;
    }

    public void execute() {
      // Do nothing
    }

    public boolean finishCondition() {
      return curInside != null && curInside == ((Actor) behaviour.getSignalTrigger().GetData("patient")).getRoom();
    }
  }
  public class StayAction_d0b_0 extends BehaviourStep {
    /*package*/ Behaviour behaviour;
    /*package*/ int timeExecuted = 0;
    public StayAction_d0b_0(Behaviour behaviour) {
      this.behaviour = behaviour;
    }

    public void execute() {
      // Do nothing
      timeExecuted++;
    }

    public boolean finishCondition() {
      return (timeExecuted == (180 / RunEnvironment.getInstance().getParameters().getInteger("SecondsPerTick")));

    }
  }
  public class UseAction_e0b_0 extends InstantBehaviourStep {
    /*package*/ Behaviour behaviour;
    public UseAction_e0b_0(Behaviour behaviour) {
      this.behaviour = behaviour;
    }

    public void execute() {

      ((Room) ToolBox().ReadMap().getCurrentRoom(MajorsCCubicleNurse.this)).getParentArea().decrementResource(PHEThree.getInstance());
    }
  }
  public class StayAction_f0b_0 extends PassiveBehaviourStep {
    /*package*/ Behaviour behaviour;
    /*package*/ int testingTime = PHEThreeExecutionTimeMap.getInstance().getProcessingTime();
    /*package*/ int timeExecuted = 0;
    public StayAction_f0b_0(Behaviour behaviour) {
      this.behaviour = behaviour;
    }

    public void execute() {
      // Do nothing
      timeExecuted++;
    }

    public boolean finishCondition() {
      return timeExecuted == testingTime;
    }
  }
  public class Consequence_a0a0g0b_3 extends InstantBehaviourStep {
    /*package*/ Behaviour behaviour;
    public Consequence_a0a0g0b_3(Behaviour behaviour) {
      this.behaviour = behaviour;
    }

    public void execute() {
      ((patient) behaviour.getSignalTrigger().GetData("patient")).PHEThreeCOVIDResult = "Positive";

    }
  }
  public class Consequence_a0a0g0b_4 extends InstantBehaviourStep {
    /*package*/ Behaviour behaviour;
    public Consequence_a0a0g0b_4(Behaviour behaviour) {
      this.behaviour = behaviour;
    }

    public void execute() {
      ((patient) behaviour.getSignalTrigger().GetData("patient")).PHEThreeCOVIDResult = "Negative";

    }
  }
  public class Choice_a0g0b_1 extends InstantBehaviourStep {
    /*package*/ Behaviour behaviour;
    public Choice_a0g0b_1(Behaviour behaviour) {
      this.behaviour = behaviour;
    }

    public void execute() {
      if (Dice(RunEnvironment.getInstance().getParameters().getDouble("PHEThreeCOVIDSensitivity"))) {
        ArrayList<BehaviourStep> plstSteps = new ArrayList();
        plstSteps.add(new Consequence_a0a0g0b_3(behaviour));
        behaviour.injectSteps(plstSteps);
      } else {
        ArrayList<BehaviourStep> plstSteps = new ArrayList();
        plstSteps.add(new Consequence_a0a0g0b_4(behaviour));
        behaviour.injectSteps(plstSteps);
      }
    }
  }
  public class Consequence_a0a0g0b_5 extends InstantBehaviourStep {
    /*package*/ Behaviour behaviour;
    public Consequence_a0a0g0b_5(Behaviour behaviour) {
      this.behaviour = behaviour;
    }

    public void execute() {
      ((patient) behaviour.getSignalTrigger().GetData("patient")).PHEThreeCOVIDResult = "Negative";

    }
  }
  public class Consequence_a0a0g0b_6 extends InstantBehaviourStep {
    /*package*/ Behaviour behaviour;
    public Consequence_a0a0g0b_6(Behaviour behaviour) {
      this.behaviour = behaviour;
    }

    public void execute() {
      ((patient) behaviour.getSignalTrigger().GetData("patient")).PHEThreeCOVIDResult = "Positive";

    }
  }
  public class Choice_a0g0b_2 extends InstantBehaviourStep {
    /*package*/ Behaviour behaviour;
    public Choice_a0g0b_2(Behaviour behaviour) {
      this.behaviour = behaviour;
    }

    public void execute() {
      if (Dice(RunEnvironment.getInstance().getParameters().getDouble("PHEThreeCOVIDSpecificity"))) {
        ArrayList<BehaviourStep> plstSteps = new ArrayList();
        plstSteps.add(new Consequence_a0a0g0b_5(behaviour));
        behaviour.injectSteps(plstSteps);
      } else {
        ArrayList<BehaviourStep> plstSteps = new ArrayList();
        plstSteps.add(new Consequence_a0a0g0b_6(behaviour));
        behaviour.injectSteps(plstSteps);
      }
    }
  }
  public class Choice_g0b_0 extends InstantBehaviourStep {
    /*package*/ Behaviour behaviour;
    public Choice_g0b_0(Behaviour behaviour) {
      this.behaviour = behaviour;
    }

    public void execute() {
      if ((((patient) behaviour.getSignalTrigger().GetData("patient")).COVIDInfectionStatus == "Symptomatic") || (((patient) behaviour.getSignalTrigger().GetData("patient")).COVIDInfectionStatus == "Asymptomatic")) {
        ArrayList<BehaviourStep> plstSteps = new ArrayList();
        plstSteps.add(new Choice_a0g0b_1(behaviour));
        behaviour.injectSteps(plstSteps);
      } else {
        ArrayList<BehaviourStep> plstSteps = new ArrayList();
        plstSteps.add(new Choice_a0g0b_2(behaviour));
        behaviour.injectSteps(plstSteps);
      }
    }
  }
  public class Consequence_a0a0h0b_3 extends InstantBehaviourStep {
    /*package*/ Behaviour behaviour;
    public Consequence_a0a0h0b_3(Behaviour behaviour) {
      this.behaviour = behaviour;
    }

    public void execute() {
      ((patient) behaviour.getSignalTrigger().GetData("patient")).PHEThreeFluAResult = "Positive";

    }
  }
  public class Consequence_a0a0h0b_4 extends InstantBehaviourStep {
    /*package*/ Behaviour behaviour;
    public Consequence_a0a0h0b_4(Behaviour behaviour) {
      this.behaviour = behaviour;
    }

    public void execute() {
      ((patient) behaviour.getSignalTrigger().GetData("patient")).PHEThreeFluAResult = "Negative";

    }
  }
  public class Choice_a0h0b_1 extends InstantBehaviourStep {
    /*package*/ Behaviour behaviour;
    public Choice_a0h0b_1(Behaviour behaviour) {
      this.behaviour = behaviour;
    }

    public void execute() {
      if (Dice(RunEnvironment.getInstance().getParameters().getDouble("PHEThreeFluASensitivity"))) {
        ArrayList<BehaviourStep> plstSteps = new ArrayList();
        plstSteps.add(new Consequence_a0a0h0b_3(behaviour));
        behaviour.injectSteps(plstSteps);
      } else {
        ArrayList<BehaviourStep> plstSteps = new ArrayList();
        plstSteps.add(new Consequence_a0a0h0b_4(behaviour));
        behaviour.injectSteps(plstSteps);
      }
    }
  }
  public class Consequence_a0a0h0b_5 extends InstantBehaviourStep {
    /*package*/ Behaviour behaviour;
    public Consequence_a0a0h0b_5(Behaviour behaviour) {
      this.behaviour = behaviour;
    }

    public void execute() {
      ((patient) behaviour.getSignalTrigger().GetData("patient")).PHEThreeFluAResult = "Negative";

    }
  }
  public class Consequence_a0a0h0b_6 extends InstantBehaviourStep {
    /*package*/ Behaviour behaviour;
    public Consequence_a0a0h0b_6(Behaviour behaviour) {
      this.behaviour = behaviour;
    }

    public void execute() {
      ((patient) behaviour.getSignalTrigger().GetData("patient")).PHEThreeFluAResult = "Positive";

    }
  }
  public class Choice_a0h0b_2 extends InstantBehaviourStep {
    /*package*/ Behaviour behaviour;
    public Choice_a0h0b_2(Behaviour behaviour) {
      this.behaviour = behaviour;
    }

    public void execute() {
      if (Dice(RunEnvironment.getInstance().getParameters().getDouble("PHEThreeFluASpecificity"))) {
        ArrayList<BehaviourStep> plstSteps = new ArrayList();
        plstSteps.add(new Consequence_a0a0h0b_5(behaviour));
        behaviour.injectSteps(plstSteps);
      } else {
        ArrayList<BehaviourStep> plstSteps = new ArrayList();
        plstSteps.add(new Consequence_a0a0h0b_6(behaviour));
        behaviour.injectSteps(plstSteps);
      }
    }
  }
  public class Choice_h0b_0 extends InstantBehaviourStep {
    /*package*/ Behaviour behaviour;
    public Choice_h0b_0(Behaviour behaviour) {
      this.behaviour = behaviour;
    }

    public void execute() {
      if ((((patient) behaviour.getSignalTrigger().GetData("patient")).FluAInfectionStatus == "Symptomatic") || (((patient) behaviour.getSignalTrigger().GetData("patient")).FluAInfectionStatus == "Asymptomatic")) {
        ArrayList<BehaviourStep> plstSteps = new ArrayList();
        plstSteps.add(new Choice_a0h0b_1(behaviour));
        behaviour.injectSteps(plstSteps);
      } else {
        ArrayList<BehaviourStep> plstSteps = new ArrayList();
        plstSteps.add(new Choice_a0h0b_2(behaviour));
        behaviour.injectSteps(plstSteps);
      }
    }
  }
  public class Consequence_a0a0i0b_3 extends InstantBehaviourStep {
    /*package*/ Behaviour behaviour;
    public Consequence_a0a0i0b_3(Behaviour behaviour) {
      this.behaviour = behaviour;
    }

    public void execute() {
      ((patient) behaviour.getSignalTrigger().GetData("patient")).PHEThreeFluBResult = "Positive";

    }
  }
  public class Consequence_a0a0i0b_4 extends InstantBehaviourStep {
    /*package*/ Behaviour behaviour;
    public Consequence_a0a0i0b_4(Behaviour behaviour) {
      this.behaviour = behaviour;
    }

    public void execute() {
      ((patient) behaviour.getSignalTrigger().GetData("patient")).PHEThreeFluBResult = "Negative";

    }
  }
  public class Choice_a0i0b_1 extends InstantBehaviourStep {
    /*package*/ Behaviour behaviour;
    public Choice_a0i0b_1(Behaviour behaviour) {
      this.behaviour = behaviour;
    }

    public void execute() {
      if (Dice(RunEnvironment.getInstance().getParameters().getDouble("PHEThreeFluBSensitivity"))) {
        ArrayList<BehaviourStep> plstSteps = new ArrayList();
        plstSteps.add(new Consequence_a0a0i0b_3(behaviour));
        behaviour.injectSteps(plstSteps);
      } else {
        ArrayList<BehaviourStep> plstSteps = new ArrayList();
        plstSteps.add(new Consequence_a0a0i0b_4(behaviour));
        behaviour.injectSteps(plstSteps);
      }
    }
  }
  public class Consequence_a0a0i0b_5 extends InstantBehaviourStep {
    /*package*/ Behaviour behaviour;
    public Consequence_a0a0i0b_5(Behaviour behaviour) {
      this.behaviour = behaviour;
    }

    public void execute() {
      ((patient) behaviour.getSignalTrigger().GetData("patient")).PHEThreeFluBResult = "Negative";

    }
  }
  public class Consequence_a0a0i0b_6 extends InstantBehaviourStep {
    /*package*/ Behaviour behaviour;
    public Consequence_a0a0i0b_6(Behaviour behaviour) {
      this.behaviour = behaviour;
    }

    public void execute() {
      ((patient) behaviour.getSignalTrigger().GetData("patient")).PHEThreeFluBResult = "Positive";

    }
  }
  public class Choice_a0i0b_2 extends InstantBehaviourStep {
    /*package*/ Behaviour behaviour;
    public Choice_a0i0b_2(Behaviour behaviour) {
      this.behaviour = behaviour;
    }

    public void execute() {
      if (Dice(RunEnvironment.getInstance().getParameters().getDouble("PHEThreeFluBSpecificity"))) {
        ArrayList<BehaviourStep> plstSteps = new ArrayList();
        plstSteps.add(new Consequence_a0a0i0b_5(behaviour));
        behaviour.injectSteps(plstSteps);
      } else {
        ArrayList<BehaviourStep> plstSteps = new ArrayList();
        plstSteps.add(new Consequence_a0a0i0b_6(behaviour));
        behaviour.injectSteps(plstSteps);
      }
    }
  }
  public class Choice_i0b_0 extends InstantBehaviourStep {
    /*package*/ Behaviour behaviour;
    public Choice_i0b_0(Behaviour behaviour) {
      this.behaviour = behaviour;
    }

    public void execute() {
      if ((((patient) behaviour.getSignalTrigger().GetData("patient")).FluBInfectionStatus == "Symptomatic") || (((patient) behaviour.getSignalTrigger().GetData("patient")).FluBInfectionStatus == "Asymptomatic")) {
        ArrayList<BehaviourStep> plstSteps = new ArrayList();
        plstSteps.add(new Choice_a0i0b_1(behaviour));
        behaviour.injectSteps(plstSteps);
      } else {
        ArrayList<BehaviourStep> plstSteps = new ArrayList();
        plstSteps.add(new Choice_a0i0b_2(behaviour));
        behaviour.injectSteps(plstSteps);
      }
    }
  }
  public class OrderAction_j0b extends BehaviourStep {
    /*package*/ Behaviour behaviour;
    public OrderAction_j0b(Behaviour behaviour) {
      this.behaviour = behaviour;
    }

    public void execute() {
      Actor a = (Actor) behaviour.getSignalTrigger().GetData("patient");

      a.TakeOrder(new MoveToOrder().WithDestination(MajorsCWaitingRoom.getInstance()));
    }
  }
  public class OrderAction_k0b extends BehaviourStep {
    /*package*/ Behaviour behaviour;
    public OrderAction_k0b(Behaviour behaviour) {
      this.behaviour = behaviour;
    }

    public void execute() {
      Actor a = (Actor) behaviour.getSignalTrigger().GetData("patient");

      a.TakeOrder(new MoveToOrder().WithDestination(Seat.class));
    }
  }
  public class SendSignalAction_a0l0b extends BehaviourStep {
    /*package*/ Behaviour behaviour;

    public SendSignalAction_a0l0b(Behaviour behaviour) {
      this.behaviour = behaviour;
    }

    public void execute() {
      Board b = ReadBoard();
      Signal sendSignalTemp = new Signal();
      sendSignalTemp = new PerformLIATorCepheidTrigger_dSignal();
      sendSignalTemp.AddData("patient", behaviour.getSignalTrigger().GetData("patient"));

      b.PushMission(sendSignalTemp);
    }
  }
  public class Choice_l0b extends InstantBehaviourStep {
    /*package*/ Behaviour behaviour;
    public Choice_l0b(Behaviour behaviour) {
      this.behaviour = behaviour;
    }

    public void execute() {
      if (((patient) behaviour.getSignalTrigger().GetData("patient")).PHEThreeCOVIDResult == "Positive" || ((patient) behaviour.getSignalTrigger().GetData("patient")).PHEThreeFluBResult == "Positive" || ((patient) behaviour.getSignalTrigger().GetData("patient")).PHEThreeFluAResult == "Positive") {
        ArrayList<BehaviourStep> plstSteps = new ArrayList();
        plstSteps.add(new SendSignalAction_a0l0b(behaviour));
        behaviour.injectSteps(plstSteps);
      } else {
        ArrayList<BehaviourStep> plstSteps = new ArrayList();
        behaviour.injectSteps(plstSteps);
      }
    }
  }
  public class SendSignalAction_a0m0b extends BehaviourStep {
    /*package*/ Behaviour behaviour;

    public SendSignalAction_a0m0b(Behaviour behaviour) {
      this.behaviour = behaviour;
    }

    public void execute() {
      Board b = ReadBoard();
      Signal sendSignalTemp = new Signal();
      sendSignalTemp = new AdmittoGreenBayTrigger_eSignal();
      sendSignalTemp.AddData("patient", behaviour.getSignalTrigger().GetData("patient"));

      b.PushMission(sendSignalTemp);
    }
  }
  public class Choice_m0b extends InstantBehaviourStep {
    /*package*/ Behaviour behaviour;
    public Choice_m0b(Behaviour behaviour) {
      this.behaviour = behaviour;
    }

    public void execute() {
      if (((patient) behaviour.getSignalTrigger().GetData("patient")).PHEThreeCOVIDResult == "Negative" && ((patient) behaviour.getSignalTrigger().GetData("patient")).PHEThreeFluBResult == "Negative" && ((patient) behaviour.getSignalTrigger().GetData("patient")).PHEThreeFluAResult == "Negative") {
        ArrayList<BehaviourStep> plstSteps = new ArrayList();
        plstSteps.add(new SendSignalAction_a0m0b(behaviour));
        behaviour.injectSteps(plstSteps);
      } else {
        ArrayList<BehaviourStep> plstSteps = new ArrayList();
        behaviour.injectSteps(plstSteps);
      }
    }
  }
  public class MoveAction_a0c_2 extends BehaviourStep {
    /*package*/ Behaviour behaviour;
    /*package*/ Object target;
    /*package*/ Object concreteTarget;
    public MoveAction_a0c_2(Behaviour behaviour) {
      target = MajorsC_Cubicle.getInstance();
      this.behaviour = behaviour;
    }

    public void execute() {
      int count = 0;

      while (count < RunEnvironment.getInstance().getParameters().getInteger("SecondsPerTick")) {
        count++;
        if (finishCondition()) {
          return;
        }
        if (concreteTarget == null) {
          if (target instanceof RoomType) {
            concreteTarget = SelectLocation(((RoomType) target), behaviour);
          } else {
            concreteTarget = target;
          }
        }

        if (concreteTarget != null) {
          if (target instanceof RoomType) {
            if (EvaluateRoomChoice(((Room) concreteTarget), behaviour) == Double.MAX_VALUE) {
              concreteTarget = SelectLocation(((RoomType) target), behaviour);
            }
          }

          MoveTowards(concreteTarget);

        }
      }
    }

    public boolean finishCondition() {
      return concreteTarget != null && ImAt(concreteTarget);
    }
  }
  public class OrderAction_b0c_2 extends BehaviourStep {
    /*package*/ Behaviour behaviour;
    public OrderAction_b0c_2(Behaviour behaviour) {
      this.behaviour = behaviour;
    }

    public void execute() {
      Actor a = (Actor) behaviour.getSignalTrigger().GetData("patient");

      a.TakeOrder(new MoveToOrder().WithDestination(MajorsCCubicleNurse.this.curInside).andThen(new MoveToOrder().WithDestination(Bed.class)));
    }
  }
  public class StayForConditionAction_c0c_2 extends BehaviourStep {
    /*package*/ Behaviour behaviour;

    public StayForConditionAction_c0c_2(Behaviour behaviour) {
      this.behaviour = behaviour;
    }

    public void execute() {
      // Do nothing
    }

    public boolean finishCondition() {
      return curInside != null && curInside == ((Actor) behaviour.getSignalTrigger().GetData("patient")).getRoom();
    }
  }
  public class StayAction_d0c_0 extends BehaviourStep {
    /*package*/ Behaviour behaviour;
    /*package*/ int timeExecuted = 0;
    public StayAction_d0c_0(Behaviour behaviour) {
      this.behaviour = behaviour;
    }

    public void execute() {
      // Do nothing
      timeExecuted++;
    }

    public boolean finishCondition() {
      return (timeExecuted == (300 / RunEnvironment.getInstance().getParameters().getInteger("SecondsPerTick")));

    }
  }
  public class UseAction_a0e0c_0 extends InstantBehaviourStep {
    /*package*/ Behaviour behaviour;
    public UseAction_a0e0c_0(Behaviour behaviour) {
      this.behaviour = behaviour;
    }

    public void execute() {

      ((Room) ToolBox().ReadMap().getCurrentRoom(MajorsCCubicleNurse.this)).getParentArea().decrementResource(LIAT.getInstance());
    }
  }
  public class StayAction_b0e0c_0 extends PassiveBehaviourStep {
    /*package*/ Behaviour behaviour;
    /*package*/ int testingTime = LIATExecutionTimeMap.getInstance().getProcessingTime();
    /*package*/ int timeExecuted = 0;
    public StayAction_b0e0c_0(Behaviour behaviour) {
      this.behaviour = behaviour;
    }

    public void execute() {
      // Do nothing
      timeExecuted++;
    }

    public boolean finishCondition() {
      return timeExecuted == testingTime;
    }
  }
  public class Consequence_a0a0c0e0c_3 extends InstantBehaviourStep {
    /*package*/ Behaviour behaviour;
    public Consequence_a0a0c0e0c_3(Behaviour behaviour) {
      this.behaviour = behaviour;
    }

    public void execute() {
      ((patient) behaviour.getSignalTrigger().GetData("patient")).LIATCOVIDResult = "Positive";

    }
  }
  public class Consequence_a0a0c0e0c_4 extends InstantBehaviourStep {
    /*package*/ Behaviour behaviour;
    public Consequence_a0a0c0e0c_4(Behaviour behaviour) {
      this.behaviour = behaviour;
    }

    public void execute() {
      ((patient) behaviour.getSignalTrigger().GetData("patient")).LIATCOVIDResult = "Negative";

    }
  }
  public class Choice_a0c0e0c_1 extends InstantBehaviourStep {
    /*package*/ Behaviour behaviour;
    public Choice_a0c0e0c_1(Behaviour behaviour) {
      this.behaviour = behaviour;
    }

    public void execute() {
      if (Dice(RunEnvironment.getInstance().getParameters().getDouble("LIATCOVIDSensitivity"))) {
        ArrayList<BehaviourStep> plstSteps = new ArrayList();
        plstSteps.add(new Consequence_a0a0c0e0c_3(behaviour));
        behaviour.injectSteps(plstSteps);
      } else {
        ArrayList<BehaviourStep> plstSteps = new ArrayList();
        plstSteps.add(new Consequence_a0a0c0e0c_4(behaviour));
        behaviour.injectSteps(plstSteps);
      }
    }
  }
  public class Consequence_a0a0c0e0c_5 extends InstantBehaviourStep {
    /*package*/ Behaviour behaviour;
    public Consequence_a0a0c0e0c_5(Behaviour behaviour) {
      this.behaviour = behaviour;
    }

    public void execute() {
      ((patient) behaviour.getSignalTrigger().GetData("patient")).LIATCOVIDResult = "Negative";

    }
  }
  public class Consequence_a0a0c0e0c_6 extends InstantBehaviourStep {
    /*package*/ Behaviour behaviour;
    public Consequence_a0a0c0e0c_6(Behaviour behaviour) {
      this.behaviour = behaviour;
    }

    public void execute() {
      ((patient) behaviour.getSignalTrigger().GetData("patient")).LIATCOVIDResult = "Positive";

    }
  }
  public class Choice_a0c0e0c_2 extends InstantBehaviourStep {
    /*package*/ Behaviour behaviour;
    public Choice_a0c0e0c_2(Behaviour behaviour) {
      this.behaviour = behaviour;
    }

    public void execute() {
      if (Dice(RunEnvironment.getInstance().getParameters().getDouble("LIATCOVIDSpecificity"))) {
        ArrayList<BehaviourStep> plstSteps = new ArrayList();
        plstSteps.add(new Consequence_a0a0c0e0c_5(behaviour));
        behaviour.injectSteps(plstSteps);
      } else {
        ArrayList<BehaviourStep> plstSteps = new ArrayList();
        plstSteps.add(new Consequence_a0a0c0e0c_6(behaviour));
        behaviour.injectSteps(plstSteps);
      }
    }
  }
  public class Choice_c0e0c_0 extends InstantBehaviourStep {
    /*package*/ Behaviour behaviour;
    public Choice_c0e0c_0(Behaviour behaviour) {
      this.behaviour = behaviour;
    }

    public void execute() {
      if ((((patient) behaviour.getSignalTrigger().GetData("patient")).COVIDInfectionStatus == "Symptomatic") || (((patient) behaviour.getSignalTrigger().GetData("patient")).COVIDInfectionStatus == "Asymptomatic")) {
        ArrayList<BehaviourStep> plstSteps = new ArrayList();
        plstSteps.add(new Choice_a0c0e0c_1(behaviour));
        behaviour.injectSteps(plstSteps);
      } else {
        ArrayList<BehaviourStep> plstSteps = new ArrayList();
        plstSteps.add(new Choice_a0c0e0c_2(behaviour));
        behaviour.injectSteps(plstSteps);
      }
    }
  }
  public class Consequence_a0a0d0e0c_3 extends InstantBehaviourStep {
    /*package*/ Behaviour behaviour;
    public Consequence_a0a0d0e0c_3(Behaviour behaviour) {
      this.behaviour = behaviour;
    }

    public void execute() {
      ((patient) behaviour.getSignalTrigger().GetData("patient")).LIATFluAResult = "Positive";

    }
  }
  public class Consequence_a0a0d0e0c_4 extends InstantBehaviourStep {
    /*package*/ Behaviour behaviour;
    public Consequence_a0a0d0e0c_4(Behaviour behaviour) {
      this.behaviour = behaviour;
    }

    public void execute() {
      ((patient) behaviour.getSignalTrigger().GetData("patient")).LIATFluAResult = "Negative";

    }
  }
  public class Choice_a0d0e0c_1 extends InstantBehaviourStep {
    /*package*/ Behaviour behaviour;
    public Choice_a0d0e0c_1(Behaviour behaviour) {
      this.behaviour = behaviour;
    }

    public void execute() {
      if (Dice(RunEnvironment.getInstance().getParameters().getDouble("LIATFluASensitivity"))) {
        ArrayList<BehaviourStep> plstSteps = new ArrayList();
        plstSteps.add(new Consequence_a0a0d0e0c_3(behaviour));
        behaviour.injectSteps(plstSteps);
      } else {
        ArrayList<BehaviourStep> plstSteps = new ArrayList();
        plstSteps.add(new Consequence_a0a0d0e0c_4(behaviour));
        behaviour.injectSteps(plstSteps);
      }
    }
  }
  public class Consequence_a0a0d0e0c_5 extends InstantBehaviourStep {
    /*package*/ Behaviour behaviour;
    public Consequence_a0a0d0e0c_5(Behaviour behaviour) {
      this.behaviour = behaviour;
    }

    public void execute() {
      ((patient) behaviour.getSignalTrigger().GetData("patient")).LIATFluAResult = "Negative";

    }
  }
  public class Consequence_a0a0d0e0c_6 extends InstantBehaviourStep {
    /*package*/ Behaviour behaviour;
    public Consequence_a0a0d0e0c_6(Behaviour behaviour) {
      this.behaviour = behaviour;
    }

    public void execute() {
      ((patient) behaviour.getSignalTrigger().GetData("patient")).LIATFluAResult = "Positive";

    }
  }
  public class Choice_a0d0e0c_2 extends InstantBehaviourStep {
    /*package*/ Behaviour behaviour;
    public Choice_a0d0e0c_2(Behaviour behaviour) {
      this.behaviour = behaviour;
    }

    public void execute() {
      if (Dice(RunEnvironment.getInstance().getParameters().getDouble("LIATFluASpecificity"))) {
        ArrayList<BehaviourStep> plstSteps = new ArrayList();
        plstSteps.add(new Consequence_a0a0d0e0c_5(behaviour));
        behaviour.injectSteps(plstSteps);
      } else {
        ArrayList<BehaviourStep> plstSteps = new ArrayList();
        plstSteps.add(new Consequence_a0a0d0e0c_6(behaviour));
        behaviour.injectSteps(plstSteps);
      }
    }
  }
  public class Choice_d0e0c_0 extends InstantBehaviourStep {
    /*package*/ Behaviour behaviour;
    public Choice_d0e0c_0(Behaviour behaviour) {
      this.behaviour = behaviour;
    }

    public void execute() {
      if ((((patient) behaviour.getSignalTrigger().GetData("patient")).FluAInfectionStatus == "Symptomatic") || (((patient) behaviour.getSignalTrigger().GetData("patient")).FluAInfectionStatus == "Asymptomatic")) {
        ArrayList<BehaviourStep> plstSteps = new ArrayList();
        plstSteps.add(new Choice_a0d0e0c_1(behaviour));
        behaviour.injectSteps(plstSteps);
      } else {
        ArrayList<BehaviourStep> plstSteps = new ArrayList();
        plstSteps.add(new Choice_a0d0e0c_2(behaviour));
        behaviour.injectSteps(plstSteps);
      }
    }
  }
  public class Consequence_a0a0e0e0c_3 extends InstantBehaviourStep {
    /*package*/ Behaviour behaviour;
    public Consequence_a0a0e0e0c_3(Behaviour behaviour) {
      this.behaviour = behaviour;
    }

    public void execute() {
      ((patient) behaviour.getSignalTrigger().GetData("patient")).LIATFluBResult = "Positive";

    }
  }
  public class Consequence_a0a0e0e0c_4 extends InstantBehaviourStep {
    /*package*/ Behaviour behaviour;
    public Consequence_a0a0e0e0c_4(Behaviour behaviour) {
      this.behaviour = behaviour;
    }

    public void execute() {
      ((patient) behaviour.getSignalTrigger().GetData("patient")).LIATFluBResult = "Negative";

    }
  }
  public class Choice_a0e0e0c_1 extends InstantBehaviourStep {
    /*package*/ Behaviour behaviour;
    public Choice_a0e0e0c_1(Behaviour behaviour) {
      this.behaviour = behaviour;
    }

    public void execute() {
      if (Dice(RunEnvironment.getInstance().getParameters().getDouble("LIATFluBSensitivity"))) {
        ArrayList<BehaviourStep> plstSteps = new ArrayList();
        plstSteps.add(new Consequence_a0a0e0e0c_3(behaviour));
        behaviour.injectSteps(plstSteps);
      } else {
        ArrayList<BehaviourStep> plstSteps = new ArrayList();
        plstSteps.add(new Consequence_a0a0e0e0c_4(behaviour));
        behaviour.injectSteps(plstSteps);
      }
    }
  }
  public class Consequence_a0a0e0e0c_5 extends InstantBehaviourStep {
    /*package*/ Behaviour behaviour;
    public Consequence_a0a0e0e0c_5(Behaviour behaviour) {
      this.behaviour = behaviour;
    }

    public void execute() {
      ((patient) behaviour.getSignalTrigger().GetData("patient")).LIATFluBResult = "Negative";

    }
  }
  public class Consequence_a0a0e0e0c_6 extends InstantBehaviourStep {
    /*package*/ Behaviour behaviour;
    public Consequence_a0a0e0e0c_6(Behaviour behaviour) {
      this.behaviour = behaviour;
    }

    public void execute() {
      ((patient) behaviour.getSignalTrigger().GetData("patient")).LIATFluBResult = "Positive";

    }
  }
  public class Choice_a0e0e0c_2 extends InstantBehaviourStep {
    /*package*/ Behaviour behaviour;
    public Choice_a0e0e0c_2(Behaviour behaviour) {
      this.behaviour = behaviour;
    }

    public void execute() {
      if (Dice(RunEnvironment.getInstance().getParameters().getDouble("LIATFluBSpecificity"))) {
        ArrayList<BehaviourStep> plstSteps = new ArrayList();
        plstSteps.add(new Consequence_a0a0e0e0c_5(behaviour));
        behaviour.injectSteps(plstSteps);
      } else {
        ArrayList<BehaviourStep> plstSteps = new ArrayList();
        plstSteps.add(new Consequence_a0a0e0e0c_6(behaviour));
        behaviour.injectSteps(plstSteps);
      }
    }
  }
  public class Choice_e0e0c_0 extends InstantBehaviourStep {
    /*package*/ Behaviour behaviour;
    public Choice_e0e0c_0(Behaviour behaviour) {
      this.behaviour = behaviour;
    }

    public void execute() {
      if ((((patient) behaviour.getSignalTrigger().GetData("patient")).FluBInfectionStatus == "Symptomatic") || (((patient) behaviour.getSignalTrigger().GetData("patient")).FluBInfectionStatus == "Asymptomatic")) {
        ArrayList<BehaviourStep> plstSteps = new ArrayList();
        plstSteps.add(new Choice_a0e0e0c_1(behaviour));
        behaviour.injectSteps(plstSteps);
      } else {
        ArrayList<BehaviourStep> plstSteps = new ArrayList();
        plstSteps.add(new Choice_a0e0e0c_2(behaviour));
        behaviour.injectSteps(plstSteps);
      }
    }
  }
  public class Consequence_f0e0c_0 extends InstantBehaviourStep {
    /*package*/ Behaviour behaviour;
    public Consequence_f0e0c_0(Behaviour behaviour) {
      this.behaviour = behaviour;
    }

    public void execute() {
      ((patient) behaviour.getSignalTrigger().GetData("patient")).LiatOrCepheidCOVIDResult = ((patient) behaviour.getSignalTrigger().GetData("patient")).LIATCOVIDResult;

    }
  }
  public class Consequence_g0e0c_0 extends InstantBehaviourStep {
    /*package*/ Behaviour behaviour;
    public Consequence_g0e0c_0(Behaviour behaviour) {
      this.behaviour = behaviour;
    }

    public void execute() {
      ((patient) behaviour.getSignalTrigger().GetData("patient")).LiatOrCepheidFluAResult = ((patient) behaviour.getSignalTrigger().GetData("patient")).LIATFluAResult;

    }
  }
  public class Consequence_h0e0c_0 extends InstantBehaviourStep {
    /*package*/ Behaviour behaviour;
    public Consequence_h0e0c_0(Behaviour behaviour) {
      this.behaviour = behaviour;
    }

    public void execute() {
      ((patient) behaviour.getSignalTrigger().GetData("patient")).LiatOrCepheidFluBResult = ((patient) behaviour.getSignalTrigger().GetData("patient")).LIATFluBResult;

    }
  }
  public class Choice_e0c_0 extends InstantBehaviourStep {
    /*package*/ Behaviour behaviour;
    public Choice_e0c_0(Behaviour behaviour) {
      this.behaviour = behaviour;
    }

    public void execute() {
      if (!(AH.isGreater(TimeKeeper.getInstance().getTimeOfDayAsInt(TimeKeeper.getInstance().getTime()), ((3600 * 8) + (60 * 0)))) || !(AH.isLess(TimeKeeper.getInstance().getTimeOfDayAsInt(TimeKeeper.getInstance().getTime()), ((3600 * 20) + (60 * 0))))) {
        ArrayList<BehaviourStep> plstSteps = new ArrayList();
        plstSteps.add(new UseAction_a0e0c_0(behaviour));
        plstSteps.add(new StayAction_b0e0c_0(behaviour));
        plstSteps.add(new Choice_c0e0c_0(behaviour));
        plstSteps.add(new Choice_d0e0c_0(behaviour));
        plstSteps.add(new Choice_e0e0c_0(behaviour));
        plstSteps.add(new Consequence_f0e0c_0(behaviour));
        plstSteps.add(new Consequence_g0e0c_0(behaviour));
        plstSteps.add(new Consequence_h0e0c_0(behaviour));
        behaviour.injectSteps(plstSteps);
      } else {
        ArrayList<BehaviourStep> plstSteps = new ArrayList();
        behaviour.injectSteps(plstSteps);
      }
    }
  }
  public class UseAction_a0f0c_0 extends InstantBehaviourStep {
    /*package*/ Behaviour behaviour;
    public UseAction_a0f0c_0(Behaviour behaviour) {
      this.behaviour = behaviour;
    }

    public void execute() {

      ((Room) ToolBox().ReadMap().getCurrentRoom(MajorsCCubicleNurse.this)).getParentArea().decrementResource(Cepheid.getInstance());
    }
  }
  public class StayAction_b0f0c_0 extends PassiveBehaviourStep {
    /*package*/ Behaviour behaviour;
    /*package*/ int testingTime = CepheidExecutionTimeMap.getInstance().getProcessingTime();
    /*package*/ int timeExecuted = 0;
    public StayAction_b0f0c_0(Behaviour behaviour) {
      this.behaviour = behaviour;
    }

    public void execute() {
      // Do nothing
      timeExecuted++;
    }

    public boolean finishCondition() {
      return timeExecuted == testingTime;
    }
  }
  public class Consequence_a0a0c0f0c_3 extends InstantBehaviourStep {
    /*package*/ Behaviour behaviour;
    public Consequence_a0a0c0f0c_3(Behaviour behaviour) {
      this.behaviour = behaviour;
    }

    public void execute() {
      ((patient) behaviour.getSignalTrigger().GetData("patient")).CepheidCOVIDResult = "Positive";

    }
  }
  public class Consequence_a0a0c0f0c_4 extends InstantBehaviourStep {
    /*package*/ Behaviour behaviour;
    public Consequence_a0a0c0f0c_4(Behaviour behaviour) {
      this.behaviour = behaviour;
    }

    public void execute() {
      ((patient) behaviour.getSignalTrigger().GetData("patient")).CepheidCOVIDResult = "Negative";

    }
  }
  public class Choice_a0c0f0c_1 extends InstantBehaviourStep {
    /*package*/ Behaviour behaviour;
    public Choice_a0c0f0c_1(Behaviour behaviour) {
      this.behaviour = behaviour;
    }

    public void execute() {
      if (Dice(RunEnvironment.getInstance().getParameters().getDouble("CepheidCOVIDSensitivity"))) {
        ArrayList<BehaviourStep> plstSteps = new ArrayList();
        plstSteps.add(new Consequence_a0a0c0f0c_3(behaviour));
        behaviour.injectSteps(plstSteps);
      } else {
        ArrayList<BehaviourStep> plstSteps = new ArrayList();
        plstSteps.add(new Consequence_a0a0c0f0c_4(behaviour));
        behaviour.injectSteps(plstSteps);
      }
    }
  }
  public class Consequence_a0a0c0f0c_5 extends InstantBehaviourStep {
    /*package*/ Behaviour behaviour;
    public Consequence_a0a0c0f0c_5(Behaviour behaviour) {
      this.behaviour = behaviour;
    }

    public void execute() {
      ((patient) behaviour.getSignalTrigger().GetData("patient")).CepheidCOVIDResult = "Negative";

    }
  }
  public class Consequence_a0a0c0f0c_6 extends InstantBehaviourStep {
    /*package*/ Behaviour behaviour;
    public Consequence_a0a0c0f0c_6(Behaviour behaviour) {
      this.behaviour = behaviour;
    }

    public void execute() {
      ((patient) behaviour.getSignalTrigger().GetData("patient")).CepheidCOVIDResult = "Positive";

    }
  }
  public class Choice_a0c0f0c_2 extends InstantBehaviourStep {
    /*package*/ Behaviour behaviour;
    public Choice_a0c0f0c_2(Behaviour behaviour) {
      this.behaviour = behaviour;
    }

    public void execute() {
      if (Dice(RunEnvironment.getInstance().getParameters().getDouble("CepheidCOVIDSpecificity"))) {
        ArrayList<BehaviourStep> plstSteps = new ArrayList();
        plstSteps.add(new Consequence_a0a0c0f0c_5(behaviour));
        behaviour.injectSteps(plstSteps);
      } else {
        ArrayList<BehaviourStep> plstSteps = new ArrayList();
        plstSteps.add(new Consequence_a0a0c0f0c_6(behaviour));
        behaviour.injectSteps(plstSteps);
      }
    }
  }
  public class Choice_c0f0c_0 extends InstantBehaviourStep {
    /*package*/ Behaviour behaviour;
    public Choice_c0f0c_0(Behaviour behaviour) {
      this.behaviour = behaviour;
    }

    public void execute() {
      if ((((patient) behaviour.getSignalTrigger().GetData("patient")).COVIDInfectionStatus == "Symptomatic") || (((patient) behaviour.getSignalTrigger().GetData("patient")).COVIDInfectionStatus == "Asymptomatic")) {
        ArrayList<BehaviourStep> plstSteps = new ArrayList();
        plstSteps.add(new Choice_a0c0f0c_1(behaviour));
        behaviour.injectSteps(plstSteps);
      } else {
        ArrayList<BehaviourStep> plstSteps = new ArrayList();
        plstSteps.add(new Choice_a0c0f0c_2(behaviour));
        behaviour.injectSteps(plstSteps);
      }
    }
  }
  public class Consequence_a0a0d0f0c_3 extends InstantBehaviourStep {
    /*package*/ Behaviour behaviour;
    public Consequence_a0a0d0f0c_3(Behaviour behaviour) {
      this.behaviour = behaviour;
    }

    public void execute() {
      ((patient) behaviour.getSignalTrigger().GetData("patient")).CepheidFluAResult = "Positive";

    }
  }
  public class Consequence_a0a0d0f0c_4 extends InstantBehaviourStep {
    /*package*/ Behaviour behaviour;
    public Consequence_a0a0d0f0c_4(Behaviour behaviour) {
      this.behaviour = behaviour;
    }

    public void execute() {
      ((patient) behaviour.getSignalTrigger().GetData("patient")).CepheidFluAResult = "Negative";

    }
  }
  public class Choice_a0d0f0c_1 extends InstantBehaviourStep {
    /*package*/ Behaviour behaviour;
    public Choice_a0d0f0c_1(Behaviour behaviour) {
      this.behaviour = behaviour;
    }

    public void execute() {
      if (Dice(RunEnvironment.getInstance().getParameters().getDouble("CepheidFluASensitivity"))) {
        ArrayList<BehaviourStep> plstSteps = new ArrayList();
        plstSteps.add(new Consequence_a0a0d0f0c_3(behaviour));
        behaviour.injectSteps(plstSteps);
      } else {
        ArrayList<BehaviourStep> plstSteps = new ArrayList();
        plstSteps.add(new Consequence_a0a0d0f0c_4(behaviour));
        behaviour.injectSteps(plstSteps);
      }
    }
  }
  public class Consequence_a0a0d0f0c_5 extends InstantBehaviourStep {
    /*package*/ Behaviour behaviour;
    public Consequence_a0a0d0f0c_5(Behaviour behaviour) {
      this.behaviour = behaviour;
    }

    public void execute() {
      ((patient) behaviour.getSignalTrigger().GetData("patient")).CepheidFluAResult = "Negative";

    }
  }
  public class Consequence_a0a0d0f0c_6 extends InstantBehaviourStep {
    /*package*/ Behaviour behaviour;
    public Consequence_a0a0d0f0c_6(Behaviour behaviour) {
      this.behaviour = behaviour;
    }

    public void execute() {
      ((patient) behaviour.getSignalTrigger().GetData("patient")).CepheidFluAResult = "Positive";

    }
  }
  public class Choice_a0d0f0c_2 extends InstantBehaviourStep {
    /*package*/ Behaviour behaviour;
    public Choice_a0d0f0c_2(Behaviour behaviour) {
      this.behaviour = behaviour;
    }

    public void execute() {
      if (Dice(RunEnvironment.getInstance().getParameters().getDouble("CepheidFluASpecificity"))) {
        ArrayList<BehaviourStep> plstSteps = new ArrayList();
        plstSteps.add(new Consequence_a0a0d0f0c_5(behaviour));
        behaviour.injectSteps(plstSteps);
      } else {
        ArrayList<BehaviourStep> plstSteps = new ArrayList();
        plstSteps.add(new Consequence_a0a0d0f0c_6(behaviour));
        behaviour.injectSteps(plstSteps);
      }
    }
  }
  public class Choice_d0f0c_0 extends InstantBehaviourStep {
    /*package*/ Behaviour behaviour;
    public Choice_d0f0c_0(Behaviour behaviour) {
      this.behaviour = behaviour;
    }

    public void execute() {
      if ((((patient) behaviour.getSignalTrigger().GetData("patient")).FluAInfectionStatus == "Symptomatic") || (((patient) behaviour.getSignalTrigger().GetData("patient")).FluAInfectionStatus == "Asymptomatic")) {
        ArrayList<BehaviourStep> plstSteps = new ArrayList();
        plstSteps.add(new Choice_a0d0f0c_1(behaviour));
        behaviour.injectSteps(plstSteps);
      } else {
        ArrayList<BehaviourStep> plstSteps = new ArrayList();
        plstSteps.add(new Choice_a0d0f0c_2(behaviour));
        behaviour.injectSteps(plstSteps);
      }
    }
  }
  public class Consequence_a0a0e0f0c_3 extends InstantBehaviourStep {
    /*package*/ Behaviour behaviour;
    public Consequence_a0a0e0f0c_3(Behaviour behaviour) {
      this.behaviour = behaviour;
    }

    public void execute() {
      ((patient) behaviour.getSignalTrigger().GetData("patient")).CepheidFluBResult = "Positive";

    }
  }
  public class Consequence_a0a0e0f0c_4 extends InstantBehaviourStep {
    /*package*/ Behaviour behaviour;
    public Consequence_a0a0e0f0c_4(Behaviour behaviour) {
      this.behaviour = behaviour;
    }

    public void execute() {
      ((patient) behaviour.getSignalTrigger().GetData("patient")).CepheidFluBResult = "Negative";

    }
  }
  public class Choice_a0e0f0c_1 extends InstantBehaviourStep {
    /*package*/ Behaviour behaviour;
    public Choice_a0e0f0c_1(Behaviour behaviour) {
      this.behaviour = behaviour;
    }

    public void execute() {
      if (Dice(RunEnvironment.getInstance().getParameters().getDouble("CepheidFluBSensitivity"))) {
        ArrayList<BehaviourStep> plstSteps = new ArrayList();
        plstSteps.add(new Consequence_a0a0e0f0c_3(behaviour));
        behaviour.injectSteps(plstSteps);
      } else {
        ArrayList<BehaviourStep> plstSteps = new ArrayList();
        plstSteps.add(new Consequence_a0a0e0f0c_4(behaviour));
        behaviour.injectSteps(plstSteps);
      }
    }
  }
  public class Consequence_a0a0e0f0c_5 extends InstantBehaviourStep {
    /*package*/ Behaviour behaviour;
    public Consequence_a0a0e0f0c_5(Behaviour behaviour) {
      this.behaviour = behaviour;
    }

    public void execute() {
      ((patient) behaviour.getSignalTrigger().GetData("patient")).CepheidFluBResult = "Negative";

    }
  }
  public class Consequence_a0a0e0f0c_6 extends InstantBehaviourStep {
    /*package*/ Behaviour behaviour;
    public Consequence_a0a0e0f0c_6(Behaviour behaviour) {
      this.behaviour = behaviour;
    }

    public void execute() {
      ((patient) behaviour.getSignalTrigger().GetData("patient")).CepheidFluBResult = "Positive";

    }
  }
  public class Choice_a0e0f0c_2 extends InstantBehaviourStep {
    /*package*/ Behaviour behaviour;
    public Choice_a0e0f0c_2(Behaviour behaviour) {
      this.behaviour = behaviour;
    }

    public void execute() {
      if (Dice(RunEnvironment.getInstance().getParameters().getDouble("CepheidFluBSpecificity"))) {
        ArrayList<BehaviourStep> plstSteps = new ArrayList();
        plstSteps.add(new Consequence_a0a0e0f0c_5(behaviour));
        behaviour.injectSteps(plstSteps);
      } else {
        ArrayList<BehaviourStep> plstSteps = new ArrayList();
        plstSteps.add(new Consequence_a0a0e0f0c_6(behaviour));
        behaviour.injectSteps(plstSteps);
      }
    }
  }
  public class Choice_e0f0c_0 extends InstantBehaviourStep {
    /*package*/ Behaviour behaviour;
    public Choice_e0f0c_0(Behaviour behaviour) {
      this.behaviour = behaviour;
    }

    public void execute() {
      if ((((patient) behaviour.getSignalTrigger().GetData("patient")).FluBInfectionStatus == "Symptomatic") || (((patient) behaviour.getSignalTrigger().GetData("patient")).FluBInfectionStatus == "Asymptomatic")) {
        ArrayList<BehaviourStep> plstSteps = new ArrayList();
        plstSteps.add(new Choice_a0e0f0c_1(behaviour));
        behaviour.injectSteps(plstSteps);
      } else {
        ArrayList<BehaviourStep> plstSteps = new ArrayList();
        plstSteps.add(new Choice_a0e0f0c_2(behaviour));
        behaviour.injectSteps(plstSteps);
      }
    }
  }
  public class Consequence_f0f0c_0 extends InstantBehaviourStep {
    /*package*/ Behaviour behaviour;
    public Consequence_f0f0c_0(Behaviour behaviour) {
      this.behaviour = behaviour;
    }

    public void execute() {
      ((patient) behaviour.getSignalTrigger().GetData("patient")).LiatOrCepheidCOVIDResult = ((patient) behaviour.getSignalTrigger().GetData("patient")).CepheidCOVIDResult;

    }
  }
  public class Consequence_g0f0c_0 extends InstantBehaviourStep {
    /*package*/ Behaviour behaviour;
    public Consequence_g0f0c_0(Behaviour behaviour) {
      this.behaviour = behaviour;
    }

    public void execute() {
      ((patient) behaviour.getSignalTrigger().GetData("patient")).LiatOrCepheidFluAResult = ((patient) behaviour.getSignalTrigger().GetData("patient")).CepheidFluAResult;

    }
  }
  public class Consequence_h0f0c_0 extends InstantBehaviourStep {
    /*package*/ Behaviour behaviour;
    public Consequence_h0f0c_0(Behaviour behaviour) {
      this.behaviour = behaviour;
    }

    public void execute() {
      ((patient) behaviour.getSignalTrigger().GetData("patient")).LiatOrCepheidFluBResult = ((patient) behaviour.getSignalTrigger().GetData("patient")).CepheidFluBResult;

    }
  }
  public class Choice_f0c_1 extends InstantBehaviourStep {
    /*package*/ Behaviour behaviour;
    public Choice_f0c_1(Behaviour behaviour) {
      this.behaviour = behaviour;
    }

    public void execute() {
      if (AH.isLess(TimeKeeper.getInstance().getTimeOfDayAsInt(TimeKeeper.getInstance().getTime()), ((3600 * 20) + (60 * 0))) && AH.isGreater(TimeKeeper.getInstance().getTimeOfDayAsInt(TimeKeeper.getInstance().getTime()), ((3600 * 8) + (60 * 0)))) {
        ArrayList<BehaviourStep> plstSteps = new ArrayList();
        plstSteps.add(new UseAction_a0f0c_0(behaviour));
        plstSteps.add(new StayAction_b0f0c_0(behaviour));
        plstSteps.add(new Choice_c0f0c_0(behaviour));
        plstSteps.add(new Choice_d0f0c_0(behaviour));
        plstSteps.add(new Choice_e0f0c_0(behaviour));
        plstSteps.add(new Consequence_f0f0c_0(behaviour));
        plstSteps.add(new Consequence_g0f0c_0(behaviour));
        plstSteps.add(new Consequence_h0f0c_0(behaviour));
        behaviour.injectSteps(plstSteps);
      } else {
        ArrayList<BehaviourStep> plstSteps = new ArrayList();
        behaviour.injectSteps(plstSteps);
      }
    }
  }
  public class OrderAction_g0c extends BehaviourStep {
    /*package*/ Behaviour behaviour;
    public OrderAction_g0c(Behaviour behaviour) {
      this.behaviour = behaviour;
    }

    public void execute() {
      Actor a = (Actor) behaviour.getSignalTrigger().GetData("patient");

      a.TakeOrder(new MoveToOrder().WithDestination(MajorsCWaitingRoom.getInstance()));
    }
  }
  public class OrderAction_h0c extends BehaviourStep {
    /*package*/ Behaviour behaviour;
    public OrderAction_h0c(Behaviour behaviour) {
      this.behaviour = behaviour;
    }

    public void execute() {
      Actor a = (Actor) behaviour.getSignalTrigger().GetData("patient");

      a.TakeOrder(new MoveToOrder().WithDestination(Seat.class));
    }
  }
  public class SendSignalAction_i0c extends BehaviourStep {
    /*package*/ Behaviour behaviour;

    public SendSignalAction_i0c(Behaviour behaviour) {
      this.behaviour = behaviour;
    }

    public void execute() {
      Board b = ReadBoard();
      Signal sendSignalTemp = new Signal();
      sendSignalTemp = new AdmitRedBayTrigger_jSignal();
      sendSignalTemp.AddData("patient", behaviour.getSignalTrigger().GetData("patient"));

      b.PushMission(sendSignalTemp);
    }
  }
  public class MoveAction_a0d_1 extends BehaviourStep {
    /*package*/ Behaviour behaviour;
    /*package*/ Object target;
    /*package*/ Object concreteTarget;
    public MoveAction_a0d_1(Behaviour behaviour) {
      target = MajorsC_Cubicle.getInstance();
      this.behaviour = behaviour;
    }

    public void execute() {
      int count = 0;

      while (count < RunEnvironment.getInstance().getParameters().getInteger("SecondsPerTick")) {
        count++;
        if (finishCondition()) {
          return;
        }
        if (concreteTarget == null) {
          if (target instanceof RoomType) {
            concreteTarget = SelectLocation(((RoomType) target), behaviour);
          } else {
            concreteTarget = target;
          }
        }

        if (concreteTarget != null) {
          if (target instanceof RoomType) {
            if (EvaluateRoomChoice(((Room) concreteTarget), behaviour) == Double.MAX_VALUE) {
              concreteTarget = SelectLocation(((RoomType) target), behaviour);
            }
          }

          MoveTowards(concreteTarget);

        }
      }
    }

    public boolean finishCondition() {
      return concreteTarget != null && ImAt(concreteTarget);
    }
  }
  public class OrderAction_b0d_0 extends BehaviourStep {
    /*package*/ Behaviour behaviour;
    public OrderAction_b0d_0(Behaviour behaviour) {
      this.behaviour = behaviour;
    }

    public void execute() {
      Actor a = (Actor) behaviour.getSignalTrigger().GetData("patient");

      a.TakeOrder(new MoveToOrder().WithDestination(MajorsCCubicleNurse.this.curInside).andThen(new MoveToOrder().WithDestination(Bed.class)));
    }
  }
  public class StayForConditionAction_c0d_0 extends BehaviourStep {
    /*package*/ Behaviour behaviour;

    public StayForConditionAction_c0d_0(Behaviour behaviour) {
      this.behaviour = behaviour;
    }

    public void execute() {
      // Do nothing
    }

    public boolean finishCondition() {
      return curInside != null && curInside == ((Actor) behaviour.getSignalTrigger().GetData("patient")).getRoom();
    }
  }
  public class StayAction_d0d_0 extends BehaviourStep {
    /*package*/ Behaviour behaviour;
    /*package*/ int timeExecuted = 0;
    public StayAction_d0d_0(Behaviour behaviour) {
      this.behaviour = behaviour;
    }

    public void execute() {
      // Do nothing
      timeExecuted++;
    }

    public boolean finishCondition() {
      return (timeExecuted == (600 / RunEnvironment.getInstance().getParameters().getInteger("SecondsPerTick")));

    }
  }
  public class OrderAction_e0d extends BehaviourStep {
    /*package*/ Behaviour behaviour;
    public OrderAction_e0d(Behaviour behaviour) {
      this.behaviour = behaviour;
    }

    public void execute() {
      Actor a = (Actor) behaviour.getSignalTrigger().GetData("patient");

      a.TakeOrder(new MoveToOrder().WithDestination(MajorsCWaitingRoom.getInstance()));
    }
  }
  public class OrderAction_f0d extends BehaviourStep {
    /*package*/ Behaviour behaviour;
    public OrderAction_f0d(Behaviour behaviour) {
      this.behaviour = behaviour;
    }

    public void execute() {
      Actor a = (Actor) behaviour.getSignalTrigger().GetData("patient");

      a.TakeOrder(new MoveToOrder().WithDestination(Seat.class));
    }
  }
  public class SendSignalAction_a0g0d extends BehaviourStep {
    /*package*/ Behaviour behaviour;

    public SendSignalAction_a0g0d(Behaviour behaviour) {
      this.behaviour = behaviour;
    }

    public void execute() {
      Board b = ReadBoard();
      Signal sendSignalTemp = new Signal();
      sendSignalTemp = new PerformLIATorCepheidTrigger_gSignal();
      sendSignalTemp.AddData("patient", behaviour.getSignalTrigger().GetData("patient"));

      b.PushMission(sendSignalTemp);
    }
  }
  public class Choice_g0d_0 extends InstantBehaviourStep {
    /*package*/ Behaviour behaviour;
    public Choice_g0d_0(Behaviour behaviour) {
      this.behaviour = behaviour;
    }

    public void execute() {
      if (((patient) behaviour.getSignalTrigger().GetData("patient")).Immunocompromised == "Yes") {
        ArrayList<BehaviourStep> plstSteps = new ArrayList();
        plstSteps.add(new SendSignalAction_a0g0d(behaviour));
        behaviour.injectSteps(plstSteps);
      } else {
        ArrayList<BehaviourStep> plstSteps = new ArrayList();
        behaviour.injectSteps(plstSteps);
      }
    }
  }
  public class SendSignalAction_a0h0d extends BehaviourStep {
    /*package*/ Behaviour behaviour;

    public SendSignalAction_a0h0d(Behaviour behaviour) {
      this.behaviour = behaviour;
    }

    public void execute() {
      Board b = ReadBoard();
      Signal sendSignalTemp = new Signal();
      sendSignalTemp = new DischargeTrigger_iSignal();
      sendSignalTemp.AddData("patient", behaviour.getSignalTrigger().GetData("patient"));

      b.PushMission(sendSignalTemp);
    }
  }
  public class Choice_h0d_0 extends InstantBehaviourStep {
    /*package*/ Behaviour behaviour;
    public Choice_h0d_0(Behaviour behaviour) {
      this.behaviour = behaviour;
    }

    public void execute() {
      if (((patient) behaviour.getSignalTrigger().GetData("patient")).Immunocompromised == "No") {
        ArrayList<BehaviourStep> plstSteps = new ArrayList();
        plstSteps.add(new SendSignalAction_a0h0d(behaviour));
        behaviour.injectSteps(plstSteps);
      } else {
        ArrayList<BehaviourStep> plstSteps = new ArrayList();
        behaviour.injectSteps(plstSteps);
      }
    }
  }
  public class MoveAction_a0e_1 extends BehaviourStep {
    /*package*/ Behaviour behaviour;
    /*package*/ Object target;
    /*package*/ Object concreteTarget;
    public MoveAction_a0e_1(Behaviour behaviour) {
      target = MajorsC_Cubicle.getInstance();
      this.behaviour = behaviour;
    }

    public void execute() {
      int count = 0;

      while (count < RunEnvironment.getInstance().getParameters().getInteger("SecondsPerTick")) {
        count++;
        if (finishCondition()) {
          return;
        }
        if (concreteTarget == null) {
          if (target instanceof RoomType) {
            concreteTarget = SelectLocation(((RoomType) target), behaviour);
          } else {
            concreteTarget = target;
          }
        }

        if (concreteTarget != null) {
          if (target instanceof RoomType) {
            if (EvaluateRoomChoice(((Room) concreteTarget), behaviour) == Double.MAX_VALUE) {
              concreteTarget = SelectLocation(((RoomType) target), behaviour);
            }
          }

          MoveTowards(concreteTarget);

        }
      }
    }

    public boolean finishCondition() {
      return concreteTarget != null && ImAt(concreteTarget);
    }
  }
  public class OrderAction_b0e_1 extends BehaviourStep {
    /*package*/ Behaviour behaviour;
    public OrderAction_b0e_1(Behaviour behaviour) {
      this.behaviour = behaviour;
    }

    public void execute() {
      Actor a = (Actor) behaviour.getSignalTrigger().GetData("patient");

      a.TakeOrder(new MoveToOrder().WithDestination(MajorsCCubicleNurse.this.curInside).andThen(new MoveToOrder().WithDestination(Bed.class)));
    }
  }
  public class StayForConditionAction_c0e_1 extends BehaviourStep {
    /*package*/ Behaviour behaviour;

    public StayForConditionAction_c0e_1(Behaviour behaviour) {
      this.behaviour = behaviour;
    }

    public void execute() {
      // Do nothing
    }

    public boolean finishCondition() {
      return curInside != null && curInside == ((Actor) behaviour.getSignalTrigger().GetData("patient")).getRoom();
    }
  }
  public class StayAction_d0e_1 extends BehaviourStep {
    /*package*/ Behaviour behaviour;
    /*package*/ int timeExecuted = 0;
    public StayAction_d0e_1(Behaviour behaviour) {
      this.behaviour = behaviour;
    }

    public void execute() {
      // Do nothing
      timeExecuted++;
    }

    public boolean finishCondition() {
      return (timeExecuted == (300 / RunEnvironment.getInstance().getParameters().getInteger("SecondsPerTick")));

    }
  }
  public class UseAction_a0e0e_0 extends InstantBehaviourStep {
    /*package*/ Behaviour behaviour;
    public UseAction_a0e0e_0(Behaviour behaviour) {
      this.behaviour = behaviour;
    }

    public void execute() {

      ((Room) ToolBox().ReadMap().getCurrentRoom(MajorsCCubicleNurse.this)).getParentArea().decrementResource(LIAT.getInstance());
    }
  }
  public class StayAction_b0e0e_0 extends PassiveBehaviourStep {
    /*package*/ Behaviour behaviour;
    /*package*/ int testingTime = LIATExecutionTimeMap.getInstance().getProcessingTime();
    /*package*/ int timeExecuted = 0;
    public StayAction_b0e0e_0(Behaviour behaviour) {
      this.behaviour = behaviour;
    }

    public void execute() {
      // Do nothing
      timeExecuted++;
    }

    public boolean finishCondition() {
      return timeExecuted == testingTime;
    }
  }
  public class Consequence_a0a0c0e0e_3 extends InstantBehaviourStep {
    /*package*/ Behaviour behaviour;
    public Consequence_a0a0c0e0e_3(Behaviour behaviour) {
      this.behaviour = behaviour;
    }

    public void execute() {
      ((patient) behaviour.getSignalTrigger().GetData("patient")).LIATCOVIDResult = "Positive";

    }
  }
  public class Consequence_a0a0c0e0e_4 extends InstantBehaviourStep {
    /*package*/ Behaviour behaviour;
    public Consequence_a0a0c0e0e_4(Behaviour behaviour) {
      this.behaviour = behaviour;
    }

    public void execute() {
      ((patient) behaviour.getSignalTrigger().GetData("patient")).LIATCOVIDResult = "Negative";

    }
  }
  public class Choice_a0c0e0e_1 extends InstantBehaviourStep {
    /*package*/ Behaviour behaviour;
    public Choice_a0c0e0e_1(Behaviour behaviour) {
      this.behaviour = behaviour;
    }

    public void execute() {
      if (Dice(RunEnvironment.getInstance().getParameters().getDouble("LIATCOVIDSensitivity"))) {
        ArrayList<BehaviourStep> plstSteps = new ArrayList();
        plstSteps.add(new Consequence_a0a0c0e0e_3(behaviour));
        behaviour.injectSteps(plstSteps);
      } else {
        ArrayList<BehaviourStep> plstSteps = new ArrayList();
        plstSteps.add(new Consequence_a0a0c0e0e_4(behaviour));
        behaviour.injectSteps(plstSteps);
      }
    }
  }
  public class Consequence_a0a0c0e0e_5 extends InstantBehaviourStep {
    /*package*/ Behaviour behaviour;
    public Consequence_a0a0c0e0e_5(Behaviour behaviour) {
      this.behaviour = behaviour;
    }

    public void execute() {
      ((patient) behaviour.getSignalTrigger().GetData("patient")).LIATCOVIDResult = "Negative";

    }
  }
  public class Consequence_a0a0c0e0e_6 extends InstantBehaviourStep {
    /*package*/ Behaviour behaviour;
    public Consequence_a0a0c0e0e_6(Behaviour behaviour) {
      this.behaviour = behaviour;
    }

    public void execute() {
      ((patient) behaviour.getSignalTrigger().GetData("patient")).LIATCOVIDResult = "Positive";

    }
  }
  public class Choice_a0c0e0e_2 extends InstantBehaviourStep {
    /*package*/ Behaviour behaviour;
    public Choice_a0c0e0e_2(Behaviour behaviour) {
      this.behaviour = behaviour;
    }

    public void execute() {
      if (Dice(RunEnvironment.getInstance().getParameters().getDouble("LIATCOVIDSpecificity"))) {
        ArrayList<BehaviourStep> plstSteps = new ArrayList();
        plstSteps.add(new Consequence_a0a0c0e0e_5(behaviour));
        behaviour.injectSteps(plstSteps);
      } else {
        ArrayList<BehaviourStep> plstSteps = new ArrayList();
        plstSteps.add(new Consequence_a0a0c0e0e_6(behaviour));
        behaviour.injectSteps(plstSteps);
      }
    }
  }
  public class Choice_c0e0e_0 extends InstantBehaviourStep {
    /*package*/ Behaviour behaviour;
    public Choice_c0e0e_0(Behaviour behaviour) {
      this.behaviour = behaviour;
    }

    public void execute() {
      if ((((patient) behaviour.getSignalTrigger().GetData("patient")).COVIDInfectionStatus == "Symptomatic") || (((patient) behaviour.getSignalTrigger().GetData("patient")).COVIDInfectionStatus == "Asymptomatic")) {
        ArrayList<BehaviourStep> plstSteps = new ArrayList();
        plstSteps.add(new Choice_a0c0e0e_1(behaviour));
        behaviour.injectSteps(plstSteps);
      } else {
        ArrayList<BehaviourStep> plstSteps = new ArrayList();
        plstSteps.add(new Choice_a0c0e0e_2(behaviour));
        behaviour.injectSteps(plstSteps);
      }
    }
  }
  public class Consequence_a0a0d0e0e_3 extends InstantBehaviourStep {
    /*package*/ Behaviour behaviour;
    public Consequence_a0a0d0e0e_3(Behaviour behaviour) {
      this.behaviour = behaviour;
    }

    public void execute() {
      ((patient) behaviour.getSignalTrigger().GetData("patient")).LIATFluAResult = "Positive";

    }
  }
  public class Consequence_a0a0d0e0e_4 extends InstantBehaviourStep {
    /*package*/ Behaviour behaviour;
    public Consequence_a0a0d0e0e_4(Behaviour behaviour) {
      this.behaviour = behaviour;
    }

    public void execute() {
      ((patient) behaviour.getSignalTrigger().GetData("patient")).LIATFluAResult = "Negative";

    }
  }
  public class Choice_a0d0e0e_1 extends InstantBehaviourStep {
    /*package*/ Behaviour behaviour;
    public Choice_a0d0e0e_1(Behaviour behaviour) {
      this.behaviour = behaviour;
    }

    public void execute() {
      if (Dice(RunEnvironment.getInstance().getParameters().getDouble("LIATFluASensitivity"))) {
        ArrayList<BehaviourStep> plstSteps = new ArrayList();
        plstSteps.add(new Consequence_a0a0d0e0e_3(behaviour));
        behaviour.injectSteps(plstSteps);
      } else {
        ArrayList<BehaviourStep> plstSteps = new ArrayList();
        plstSteps.add(new Consequence_a0a0d0e0e_4(behaviour));
        behaviour.injectSteps(plstSteps);
      }
    }
  }
  public class Consequence_a0a0d0e0e_5 extends InstantBehaviourStep {
    /*package*/ Behaviour behaviour;
    public Consequence_a0a0d0e0e_5(Behaviour behaviour) {
      this.behaviour = behaviour;
    }

    public void execute() {
      ((patient) behaviour.getSignalTrigger().GetData("patient")).LIATFluAResult = "Negative";

    }
  }
  public class Consequence_a0a0d0e0e_6 extends InstantBehaviourStep {
    /*package*/ Behaviour behaviour;
    public Consequence_a0a0d0e0e_6(Behaviour behaviour) {
      this.behaviour = behaviour;
    }

    public void execute() {
      ((patient) behaviour.getSignalTrigger().GetData("patient")).LIATFluAResult = "Positive";

    }
  }
  public class Choice_a0d0e0e_2 extends InstantBehaviourStep {
    /*package*/ Behaviour behaviour;
    public Choice_a0d0e0e_2(Behaviour behaviour) {
      this.behaviour = behaviour;
    }

    public void execute() {
      if (Dice(RunEnvironment.getInstance().getParameters().getDouble("LIATFluASpecificity"))) {
        ArrayList<BehaviourStep> plstSteps = new ArrayList();
        plstSteps.add(new Consequence_a0a0d0e0e_5(behaviour));
        behaviour.injectSteps(plstSteps);
      } else {
        ArrayList<BehaviourStep> plstSteps = new ArrayList();
        plstSteps.add(new Consequence_a0a0d0e0e_6(behaviour));
        behaviour.injectSteps(plstSteps);
      }
    }
  }
  public class Choice_d0e0e_0 extends InstantBehaviourStep {
    /*package*/ Behaviour behaviour;
    public Choice_d0e0e_0(Behaviour behaviour) {
      this.behaviour = behaviour;
    }

    public void execute() {
      if ((((patient) behaviour.getSignalTrigger().GetData("patient")).FluAInfectionStatus == "Symptomatic") || (((patient) behaviour.getSignalTrigger().GetData("patient")).FluAInfectionStatus == "Asymptomatic")) {
        ArrayList<BehaviourStep> plstSteps = new ArrayList();
        plstSteps.add(new Choice_a0d0e0e_1(behaviour));
        behaviour.injectSteps(plstSteps);
      } else {
        ArrayList<BehaviourStep> plstSteps = new ArrayList();
        plstSteps.add(new Choice_a0d0e0e_2(behaviour));
        behaviour.injectSteps(plstSteps);
      }
    }
  }
  public class Consequence_a0a0e0e0e_3 extends InstantBehaviourStep {
    /*package*/ Behaviour behaviour;
    public Consequence_a0a0e0e0e_3(Behaviour behaviour) {
      this.behaviour = behaviour;
    }

    public void execute() {
      ((patient) behaviour.getSignalTrigger().GetData("patient")).LIATFluBResult = "Positive";

    }
  }
  public class Consequence_a0a0e0e0e_4 extends InstantBehaviourStep {
    /*package*/ Behaviour behaviour;
    public Consequence_a0a0e0e0e_4(Behaviour behaviour) {
      this.behaviour = behaviour;
    }

    public void execute() {
      ((patient) behaviour.getSignalTrigger().GetData("patient")).LIATFluBResult = "Negative";

    }
  }
  public class Choice_a0e0e0e_1 extends InstantBehaviourStep {
    /*package*/ Behaviour behaviour;
    public Choice_a0e0e0e_1(Behaviour behaviour) {
      this.behaviour = behaviour;
    }

    public void execute() {
      if (Dice(RunEnvironment.getInstance().getParameters().getDouble("LIATFluBSensitivity"))) {
        ArrayList<BehaviourStep> plstSteps = new ArrayList();
        plstSteps.add(new Consequence_a0a0e0e0e_3(behaviour));
        behaviour.injectSteps(plstSteps);
      } else {
        ArrayList<BehaviourStep> plstSteps = new ArrayList();
        plstSteps.add(new Consequence_a0a0e0e0e_4(behaviour));
        behaviour.injectSteps(plstSteps);
      }
    }
  }
  public class Consequence_a0a0e0e0e_5 extends InstantBehaviourStep {
    /*package*/ Behaviour behaviour;
    public Consequence_a0a0e0e0e_5(Behaviour behaviour) {
      this.behaviour = behaviour;
    }

    public void execute() {
      ((patient) behaviour.getSignalTrigger().GetData("patient")).LIATFluBResult = "Negative";

    }
  }
  public class Consequence_a0a0e0e0e_6 extends InstantBehaviourStep {
    /*package*/ Behaviour behaviour;
    public Consequence_a0a0e0e0e_6(Behaviour behaviour) {
      this.behaviour = behaviour;
    }

    public void execute() {
      ((patient) behaviour.getSignalTrigger().GetData("patient")).LIATFluBResult = "Positive";

    }
  }
  public class Choice_a0e0e0e_2 extends InstantBehaviourStep {
    /*package*/ Behaviour behaviour;
    public Choice_a0e0e0e_2(Behaviour behaviour) {
      this.behaviour = behaviour;
    }

    public void execute() {
      if (Dice(RunEnvironment.getInstance().getParameters().getDouble("LIATFluBSpecificity"))) {
        ArrayList<BehaviourStep> plstSteps = new ArrayList();
        plstSteps.add(new Consequence_a0a0e0e0e_5(behaviour));
        behaviour.injectSteps(plstSteps);
      } else {
        ArrayList<BehaviourStep> plstSteps = new ArrayList();
        plstSteps.add(new Consequence_a0a0e0e0e_6(behaviour));
        behaviour.injectSteps(plstSteps);
      }
    }
  }
  public class Choice_e0e0e_0 extends InstantBehaviourStep {
    /*package*/ Behaviour behaviour;
    public Choice_e0e0e_0(Behaviour behaviour) {
      this.behaviour = behaviour;
    }

    public void execute() {
      if ((((patient) behaviour.getSignalTrigger().GetData("patient")).FluBInfectionStatus == "Symptomatic") || (((patient) behaviour.getSignalTrigger().GetData("patient")).FluBInfectionStatus == "Asymptomatic")) {
        ArrayList<BehaviourStep> plstSteps = new ArrayList();
        plstSteps.add(new Choice_a0e0e0e_1(behaviour));
        behaviour.injectSteps(plstSteps);
      } else {
        ArrayList<BehaviourStep> plstSteps = new ArrayList();
        plstSteps.add(new Choice_a0e0e0e_2(behaviour));
        behaviour.injectSteps(plstSteps);
      }
    }
  }
  public class Consequence_f0e0e_0 extends InstantBehaviourStep {
    /*package*/ Behaviour behaviour;
    public Consequence_f0e0e_0(Behaviour behaviour) {
      this.behaviour = behaviour;
    }

    public void execute() {
      ((patient) behaviour.getSignalTrigger().GetData("patient")).LiatOrCepheidCOVIDResult = ((patient) behaviour.getSignalTrigger().GetData("patient")).LIATCOVIDResult;

    }
  }
  public class Consequence_g0e0e_0 extends InstantBehaviourStep {
    /*package*/ Behaviour behaviour;
    public Consequence_g0e0e_0(Behaviour behaviour) {
      this.behaviour = behaviour;
    }

    public void execute() {
      ((patient) behaviour.getSignalTrigger().GetData("patient")).LiatOrCepheidFluAResult = ((patient) behaviour.getSignalTrigger().GetData("patient")).LIATFluAResult;

    }
  }
  public class Consequence_h0e0e_0 extends InstantBehaviourStep {
    /*package*/ Behaviour behaviour;
    public Consequence_h0e0e_0(Behaviour behaviour) {
      this.behaviour = behaviour;
    }

    public void execute() {
      ((patient) behaviour.getSignalTrigger().GetData("patient")).LiatOrCepheidFluBResult = ((patient) behaviour.getSignalTrigger().GetData("patient")).LIATFluBResult;

    }
  }
  public class Choice_e0e_0 extends InstantBehaviourStep {
    /*package*/ Behaviour behaviour;
    public Choice_e0e_0(Behaviour behaviour) {
      this.behaviour = behaviour;
    }

    public void execute() {
      if (!(AH.isGreater(TimeKeeper.getInstance().getTimeOfDayAsInt(TimeKeeper.getInstance().getTime()), ((3600 * 8) + (60 * 0)))) || !(AH.isLess(TimeKeeper.getInstance().getTimeOfDayAsInt(TimeKeeper.getInstance().getTime()), ((3600 * 20) + (60 * 0))))) {
        ArrayList<BehaviourStep> plstSteps = new ArrayList();
        plstSteps.add(new UseAction_a0e0e_0(behaviour));
        plstSteps.add(new StayAction_b0e0e_0(behaviour));
        plstSteps.add(new Choice_c0e0e_0(behaviour));
        plstSteps.add(new Choice_d0e0e_0(behaviour));
        plstSteps.add(new Choice_e0e0e_0(behaviour));
        plstSteps.add(new Consequence_f0e0e_0(behaviour));
        plstSteps.add(new Consequence_g0e0e_0(behaviour));
        plstSteps.add(new Consequence_h0e0e_0(behaviour));
        behaviour.injectSteps(plstSteps);
      } else {
        ArrayList<BehaviourStep> plstSteps = new ArrayList();
        behaviour.injectSteps(plstSteps);
      }
    }
  }
  public class UseAction_a0f0e_0 extends InstantBehaviourStep {
    /*package*/ Behaviour behaviour;
    public UseAction_a0f0e_0(Behaviour behaviour) {
      this.behaviour = behaviour;
    }

    public void execute() {

      ((Room) ToolBox().ReadMap().getCurrentRoom(MajorsCCubicleNurse.this)).getParentArea().decrementResource(Cepheid.getInstance());
    }
  }
  public class StayAction_b0f0e_0 extends PassiveBehaviourStep {
    /*package*/ Behaviour behaviour;
    /*package*/ int testingTime = CepheidExecutionTimeMap.getInstance().getProcessingTime();
    /*package*/ int timeExecuted = 0;
    public StayAction_b0f0e_0(Behaviour behaviour) {
      this.behaviour = behaviour;
    }

    public void execute() {
      // Do nothing
      timeExecuted++;
    }

    public boolean finishCondition() {
      return timeExecuted == testingTime;
    }
  }
  public class Consequence_a0a0c0f0e_3 extends InstantBehaviourStep {
    /*package*/ Behaviour behaviour;
    public Consequence_a0a0c0f0e_3(Behaviour behaviour) {
      this.behaviour = behaviour;
    }

    public void execute() {
      ((patient) behaviour.getSignalTrigger().GetData("patient")).CepheidCOVIDResult = "Positive";

    }
  }
  public class Consequence_a0a0c0f0e_4 extends InstantBehaviourStep {
    /*package*/ Behaviour behaviour;
    public Consequence_a0a0c0f0e_4(Behaviour behaviour) {
      this.behaviour = behaviour;
    }

    public void execute() {
      ((patient) behaviour.getSignalTrigger().GetData("patient")).CepheidCOVIDResult = "Negative";

    }
  }
  public class Choice_a0c0f0e_1 extends InstantBehaviourStep {
    /*package*/ Behaviour behaviour;
    public Choice_a0c0f0e_1(Behaviour behaviour) {
      this.behaviour = behaviour;
    }

    public void execute() {
      if (Dice(RunEnvironment.getInstance().getParameters().getDouble("CepheidCOVIDSensitivity"))) {
        ArrayList<BehaviourStep> plstSteps = new ArrayList();
        plstSteps.add(new Consequence_a0a0c0f0e_3(behaviour));
        behaviour.injectSteps(plstSteps);
      } else {
        ArrayList<BehaviourStep> plstSteps = new ArrayList();
        plstSteps.add(new Consequence_a0a0c0f0e_4(behaviour));
        behaviour.injectSteps(plstSteps);
      }
    }
  }
  public class Consequence_a0a0c0f0e_5 extends InstantBehaviourStep {
    /*package*/ Behaviour behaviour;
    public Consequence_a0a0c0f0e_5(Behaviour behaviour) {
      this.behaviour = behaviour;
    }

    public void execute() {
      ((patient) behaviour.getSignalTrigger().GetData("patient")).CepheidCOVIDResult = "Negative";

    }
  }
  public class Consequence_a0a0c0f0e_6 extends InstantBehaviourStep {
    /*package*/ Behaviour behaviour;
    public Consequence_a0a0c0f0e_6(Behaviour behaviour) {
      this.behaviour = behaviour;
    }

    public void execute() {
      ((patient) behaviour.getSignalTrigger().GetData("patient")).CepheidCOVIDResult = "Positive";

    }
  }
  public class Choice_a0c0f0e_2 extends InstantBehaviourStep {
    /*package*/ Behaviour behaviour;
    public Choice_a0c0f0e_2(Behaviour behaviour) {
      this.behaviour = behaviour;
    }

    public void execute() {
      if (Dice(RunEnvironment.getInstance().getParameters().getDouble("CepheidCOVIDSpecificity"))) {
        ArrayList<BehaviourStep> plstSteps = new ArrayList();
        plstSteps.add(new Consequence_a0a0c0f0e_5(behaviour));
        behaviour.injectSteps(plstSteps);
      } else {
        ArrayList<BehaviourStep> plstSteps = new ArrayList();
        plstSteps.add(new Consequence_a0a0c0f0e_6(behaviour));
        behaviour.injectSteps(plstSteps);
      }
    }
  }
  public class Choice_c0f0e_0 extends InstantBehaviourStep {
    /*package*/ Behaviour behaviour;
    public Choice_c0f0e_0(Behaviour behaviour) {
      this.behaviour = behaviour;
    }

    public void execute() {
      if ((((patient) behaviour.getSignalTrigger().GetData("patient")).COVIDInfectionStatus == "Symptomatic") || (((patient) behaviour.getSignalTrigger().GetData("patient")).COVIDInfectionStatus == "Asymptomatic")) {
        ArrayList<BehaviourStep> plstSteps = new ArrayList();
        plstSteps.add(new Choice_a0c0f0e_1(behaviour));
        behaviour.injectSteps(plstSteps);
      } else {
        ArrayList<BehaviourStep> plstSteps = new ArrayList();
        plstSteps.add(new Choice_a0c0f0e_2(behaviour));
        behaviour.injectSteps(plstSteps);
      }
    }
  }
  public class Consequence_a0a0d0f0e_3 extends InstantBehaviourStep {
    /*package*/ Behaviour behaviour;
    public Consequence_a0a0d0f0e_3(Behaviour behaviour) {
      this.behaviour = behaviour;
    }

    public void execute() {
      ((patient) behaviour.getSignalTrigger().GetData("patient")).CepheidFluAResult = "Positive";

    }
  }
  public class Consequence_a0a0d0f0e_4 extends InstantBehaviourStep {
    /*package*/ Behaviour behaviour;
    public Consequence_a0a0d0f0e_4(Behaviour behaviour) {
      this.behaviour = behaviour;
    }

    public void execute() {
      ((patient) behaviour.getSignalTrigger().GetData("patient")).CepheidFluAResult = "Negative";

    }
  }
  public class Choice_a0d0f0e_1 extends InstantBehaviourStep {
    /*package*/ Behaviour behaviour;
    public Choice_a0d0f0e_1(Behaviour behaviour) {
      this.behaviour = behaviour;
    }

    public void execute() {
      if (Dice(RunEnvironment.getInstance().getParameters().getDouble("CepheidFluASensitivity"))) {
        ArrayList<BehaviourStep> plstSteps = new ArrayList();
        plstSteps.add(new Consequence_a0a0d0f0e_3(behaviour));
        behaviour.injectSteps(plstSteps);
      } else {
        ArrayList<BehaviourStep> plstSteps = new ArrayList();
        plstSteps.add(new Consequence_a0a0d0f0e_4(behaviour));
        behaviour.injectSteps(plstSteps);
      }
    }
  }
  public class Consequence_a0a0d0f0e_5 extends InstantBehaviourStep {
    /*package*/ Behaviour behaviour;
    public Consequence_a0a0d0f0e_5(Behaviour behaviour) {
      this.behaviour = behaviour;
    }

    public void execute() {
      ((patient) behaviour.getSignalTrigger().GetData("patient")).CepheidFluAResult = "Negative";

    }
  }
  public class Consequence_a0a0d0f0e_6 extends InstantBehaviourStep {
    /*package*/ Behaviour behaviour;
    public Consequence_a0a0d0f0e_6(Behaviour behaviour) {
      this.behaviour = behaviour;
    }

    public void execute() {
      ((patient) behaviour.getSignalTrigger().GetData("patient")).CepheidFluAResult = "Positive";

    }
  }
  public class Choice_a0d0f0e_2 extends InstantBehaviourStep {
    /*package*/ Behaviour behaviour;
    public Choice_a0d0f0e_2(Behaviour behaviour) {
      this.behaviour = behaviour;
    }

    public void execute() {
      if (Dice(RunEnvironment.getInstance().getParameters().getDouble("CepheidFluASpecificity"))) {
        ArrayList<BehaviourStep> plstSteps = new ArrayList();
        plstSteps.add(new Consequence_a0a0d0f0e_5(behaviour));
        behaviour.injectSteps(plstSteps);
      } else {
        ArrayList<BehaviourStep> plstSteps = new ArrayList();
        plstSteps.add(new Consequence_a0a0d0f0e_6(behaviour));
        behaviour.injectSteps(plstSteps);
      }
    }
  }
  public class Choice_d0f0e_0 extends InstantBehaviourStep {
    /*package*/ Behaviour behaviour;
    public Choice_d0f0e_0(Behaviour behaviour) {
      this.behaviour = behaviour;
    }

    public void execute() {
      if ((((patient) behaviour.getSignalTrigger().GetData("patient")).FluAInfectionStatus == "Symptomatic") || (((patient) behaviour.getSignalTrigger().GetData("patient")).FluAInfectionStatus == "Asymptomatic")) {
        ArrayList<BehaviourStep> plstSteps = new ArrayList();
        plstSteps.add(new Choice_a0d0f0e_1(behaviour));
        behaviour.injectSteps(plstSteps);
      } else {
        ArrayList<BehaviourStep> plstSteps = new ArrayList();
        plstSteps.add(new Choice_a0d0f0e_2(behaviour));
        behaviour.injectSteps(plstSteps);
      }
    }
  }
  public class Consequence_a0a0e0f0e_3 extends InstantBehaviourStep {
    /*package*/ Behaviour behaviour;
    public Consequence_a0a0e0f0e_3(Behaviour behaviour) {
      this.behaviour = behaviour;
    }

    public void execute() {
      ((patient) behaviour.getSignalTrigger().GetData("patient")).CepheidFluBResult = "Positive";

    }
  }
  public class Consequence_a0a0e0f0e_4 extends InstantBehaviourStep {
    /*package*/ Behaviour behaviour;
    public Consequence_a0a0e0f0e_4(Behaviour behaviour) {
      this.behaviour = behaviour;
    }

    public void execute() {
      ((patient) behaviour.getSignalTrigger().GetData("patient")).CepheidFluBResult = "Negative";

    }
  }
  public class Choice_a0e0f0e_1 extends InstantBehaviourStep {
    /*package*/ Behaviour behaviour;
    public Choice_a0e0f0e_1(Behaviour behaviour) {
      this.behaviour = behaviour;
    }

    public void execute() {
      if (Dice(RunEnvironment.getInstance().getParameters().getDouble("CepheidFluBSensitivity"))) {
        ArrayList<BehaviourStep> plstSteps = new ArrayList();
        plstSteps.add(new Consequence_a0a0e0f0e_3(behaviour));
        behaviour.injectSteps(plstSteps);
      } else {
        ArrayList<BehaviourStep> plstSteps = new ArrayList();
        plstSteps.add(new Consequence_a0a0e0f0e_4(behaviour));
        behaviour.injectSteps(plstSteps);
      }
    }
  }
  public class Consequence_a0a0e0f0e_5 extends InstantBehaviourStep {
    /*package*/ Behaviour behaviour;
    public Consequence_a0a0e0f0e_5(Behaviour behaviour) {
      this.behaviour = behaviour;
    }

    public void execute() {
      ((patient) behaviour.getSignalTrigger().GetData("patient")).CepheidFluBResult = "Negative";

    }
  }
  public class Consequence_a0a0e0f0e_6 extends InstantBehaviourStep {
    /*package*/ Behaviour behaviour;
    public Consequence_a0a0e0f0e_6(Behaviour behaviour) {
      this.behaviour = behaviour;
    }

    public void execute() {
      ((patient) behaviour.getSignalTrigger().GetData("patient")).CepheidFluBResult = "Positive";

    }
  }
  public class Choice_a0e0f0e_2 extends InstantBehaviourStep {
    /*package*/ Behaviour behaviour;
    public Choice_a0e0f0e_2(Behaviour behaviour) {
      this.behaviour = behaviour;
    }

    public void execute() {
      if (Dice(RunEnvironment.getInstance().getParameters().getDouble("CepheidFluBSpecificity"))) {
        ArrayList<BehaviourStep> plstSteps = new ArrayList();
        plstSteps.add(new Consequence_a0a0e0f0e_5(behaviour));
        behaviour.injectSteps(plstSteps);
      } else {
        ArrayList<BehaviourStep> plstSteps = new ArrayList();
        plstSteps.add(new Consequence_a0a0e0f0e_6(behaviour));
        behaviour.injectSteps(plstSteps);
      }
    }
  }
  public class Choice_e0f0e_0 extends InstantBehaviourStep {
    /*package*/ Behaviour behaviour;
    public Choice_e0f0e_0(Behaviour behaviour) {
      this.behaviour = behaviour;
    }

    public void execute() {
      if ((((patient) behaviour.getSignalTrigger().GetData("patient")).FluBInfectionStatus == "Symptomatic") || (((patient) behaviour.getSignalTrigger().GetData("patient")).FluBInfectionStatus == "Asymptomatic")) {
        ArrayList<BehaviourStep> plstSteps = new ArrayList();
        plstSteps.add(new Choice_a0e0f0e_1(behaviour));
        behaviour.injectSteps(plstSteps);
      } else {
        ArrayList<BehaviourStep> plstSteps = new ArrayList();
        plstSteps.add(new Choice_a0e0f0e_2(behaviour));
        behaviour.injectSteps(plstSteps);
      }
    }
  }
  public class Consequence_f0f0e_0 extends InstantBehaviourStep {
    /*package*/ Behaviour behaviour;
    public Consequence_f0f0e_0(Behaviour behaviour) {
      this.behaviour = behaviour;
    }

    public void execute() {
      ((patient) behaviour.getSignalTrigger().GetData("patient")).LiatOrCepheidCOVIDResult = ((patient) behaviour.getSignalTrigger().GetData("patient")).CepheidCOVIDResult;

    }
  }
  public class Consequence_g0f0e_0 extends InstantBehaviourStep {
    /*package*/ Behaviour behaviour;
    public Consequence_g0f0e_0(Behaviour behaviour) {
      this.behaviour = behaviour;
    }

    public void execute() {
      ((patient) behaviour.getSignalTrigger().GetData("patient")).LiatOrCepheidFluAResult = ((patient) behaviour.getSignalTrigger().GetData("patient")).CepheidFluAResult;

    }
  }
  public class Consequence_h0f0e_0 extends InstantBehaviourStep {
    /*package*/ Behaviour behaviour;
    public Consequence_h0f0e_0(Behaviour behaviour) {
      this.behaviour = behaviour;
    }

    public void execute() {
      ((patient) behaviour.getSignalTrigger().GetData("patient")).LiatOrCepheidFluBResult = ((patient) behaviour.getSignalTrigger().GetData("patient")).CepheidFluBResult;

    }
  }
  public class Choice_f0e_0 extends InstantBehaviourStep {
    /*package*/ Behaviour behaviour;
    public Choice_f0e_0(Behaviour behaviour) {
      this.behaviour = behaviour;
    }

    public void execute() {
      if (AH.isLess(TimeKeeper.getInstance().getTimeOfDayAsInt(TimeKeeper.getInstance().getTime()), ((3600 * 20) + (60 * 0))) && AH.isGreater(TimeKeeper.getInstance().getTimeOfDayAsInt(TimeKeeper.getInstance().getTime()), ((3600 * 8) + (60 * 0)))) {
        ArrayList<BehaviourStep> plstSteps = new ArrayList();
        plstSteps.add(new UseAction_a0f0e_0(behaviour));
        plstSteps.add(new StayAction_b0f0e_0(behaviour));
        plstSteps.add(new Choice_c0f0e_0(behaviour));
        plstSteps.add(new Choice_d0f0e_0(behaviour));
        plstSteps.add(new Choice_e0f0e_0(behaviour));
        plstSteps.add(new Consequence_f0f0e_0(behaviour));
        plstSteps.add(new Consequence_g0f0e_0(behaviour));
        plstSteps.add(new Consequence_h0f0e_0(behaviour));
        behaviour.injectSteps(plstSteps);
      } else {
        ArrayList<BehaviourStep> plstSteps = new ArrayList();
        behaviour.injectSteps(plstSteps);
      }
    }
  }
  public class OrderAction_g0e extends BehaviourStep {
    /*package*/ Behaviour behaviour;
    public OrderAction_g0e(Behaviour behaviour) {
      this.behaviour = behaviour;
    }

    public void execute() {
      Actor a = (Actor) behaviour.getSignalTrigger().GetData("patient");

      a.TakeOrder(new MoveToOrder().WithDestination(MajorsCWaitingRoom.getInstance()));
    }
  }
  public class OrderAction_h0e extends BehaviourStep {
    /*package*/ Behaviour behaviour;
    public OrderAction_h0e(Behaviour behaviour) {
      this.behaviour = behaviour;
    }

    public void execute() {
      Actor a = (Actor) behaviour.getSignalTrigger().GetData("patient");

      a.TakeOrder(new MoveToOrder().WithDestination(Seat.class));
    }
  }
  public class SendSignalAction_i0e extends BehaviourStep {
    /*package*/ Behaviour behaviour;

    public SendSignalAction_i0e(Behaviour behaviour) {
      this.behaviour = behaviour;
    }

    public void execute() {
      Board b = ReadBoard();
      Signal sendSignalTemp = new Signal();
      sendSignalTemp = new AdmittoVulnerableAreaTrigger_hSignal();
      sendSignalTemp.AddData("patient", behaviour.getSignalTrigger().GetData("patient"));

      b.PushMission(sendSignalTemp);
    }
  }
  public class MoveAction_a0f_1 extends BehaviourStep {
    /*package*/ Behaviour behaviour;
    /*package*/ Object target;
    /*package*/ Object concreteTarget;
    public MoveAction_a0f_1(Behaviour behaviour) {
      target = MajorsC_Cubicle.getInstance();
      this.behaviour = behaviour;
    }

    public void execute() {
      int count = 0;

      while (count < RunEnvironment.getInstance().getParameters().getInteger("SecondsPerTick")) {
        count++;
        if (finishCondition()) {
          return;
        }
        if (concreteTarget == null) {
          if (target instanceof RoomType) {
            concreteTarget = SelectLocation(((RoomType) target), behaviour);
          } else {
            concreteTarget = target;
          }
        }

        if (concreteTarget != null) {
          if (target instanceof RoomType) {
            if (EvaluateRoomChoice(((Room) concreteTarget), behaviour) == Double.MAX_VALUE) {
              concreteTarget = SelectLocation(((RoomType) target), behaviour);
            }
          }

          MoveTowards(concreteTarget);

        }
      }
    }

    public boolean finishCondition() {
      return concreteTarget != null && ImAt(concreteTarget);
    }
  }
  public class OrderAction_b0f_1 extends BehaviourStep {
    /*package*/ Behaviour behaviour;
    public OrderAction_b0f_1(Behaviour behaviour) {
      this.behaviour = behaviour;
    }

    public void execute() {
      Actor a = (Actor) behaviour.getSignalTrigger().GetData("patient");

      a.TakeOrder(new MoveToOrder().WithDestination(MajorsCCubicleNurse.this.curInside).andThen(new MoveToOrder().WithDestination(Bed.class)));
    }
  }
  public class StayForConditionAction_c0f_1 extends BehaviourStep {
    /*package*/ Behaviour behaviour;

    public StayForConditionAction_c0f_1(Behaviour behaviour) {
      this.behaviour = behaviour;
    }

    public void execute() {
      // Do nothing
    }

    public boolean finishCondition() {
      return curInside != null && curInside == ((Actor) behaviour.getSignalTrigger().GetData("patient")).getRoom();
    }
  }
  public class StayAction_d0f_1 extends BehaviourStep {
    /*package*/ Behaviour behaviour;
    /*package*/ int timeExecuted = 0;
    public StayAction_d0f_1(Behaviour behaviour) {
      this.behaviour = behaviour;
    }

    public void execute() {
      // Do nothing
      timeExecuted++;
    }

    public boolean finishCondition() {
      return (timeExecuted == (1200 / RunEnvironment.getInstance().getParameters().getInteger("SecondsPerTick")));

    }
  }
  public class OrderAction_e0f_0 extends BehaviourStep {
    /*package*/ Behaviour behaviour;
    public OrderAction_e0f_0(Behaviour behaviour) {
      this.behaviour = behaviour;
    }

    public void execute() {
      Actor a = (Actor) behaviour.getSignalTrigger().GetData("patient");

      a.TakeOrder(new MoveToOrder().WithDestination(MajorsCWaitingRoom.getInstance()));
    }
  }
  public class OrderAction_f0f_0 extends BehaviourStep {
    /*package*/ Behaviour behaviour;
    public OrderAction_f0f_0(Behaviour behaviour) {
      this.behaviour = behaviour;
    }

    public void execute() {
      Actor a = (Actor) behaviour.getSignalTrigger().GetData("patient");

      a.TakeOrder(new MoveToOrder().WithDestination(Seat.class));
    }
  }
  public class SendSignalAction_a0g0f extends BehaviourStep {
    /*package*/ Behaviour behaviour;

    public SendSignalAction_a0g0f(Behaviour behaviour) {
      this.behaviour = behaviour;
    }

    public void execute() {
      Board b = ReadBoard();
      Signal sendSignalTemp = new Signal();
      sendSignalTemp = new CheckClinicalSusipicionTrigger_cSignal();
      sendSignalTemp.AddData("patient", behaviour.getSignalTrigger().GetData("patient"));

      b.PushMission(sendSignalTemp);
    }
  }
  public class Choice_g0f extends InstantBehaviourStep {
    /*package*/ Behaviour behaviour;
    public Choice_g0f(Behaviour behaviour) {
      this.behaviour = behaviour;
    }

    public void execute() {
      if (((patient) behaviour.getSignalTrigger().GetData("patient")).LateralFlowCOVIDResult == "Negative" && ((patient) behaviour.getSignalTrigger().GetData("patient")).LateralFlowFluBResult == "Negative" && ((patient) behaviour.getSignalTrigger().GetData("patient")).LateralFlowFluAResult == "Negative") {
        ArrayList<BehaviourStep> plstSteps = new ArrayList();
        plstSteps.add(new SendSignalAction_a0g0f(behaviour));
        behaviour.injectSteps(plstSteps);
      } else {
        ArrayList<BehaviourStep> plstSteps = new ArrayList();
        behaviour.injectSteps(plstSteps);
      }
    }
  }
  public class SendSignalAction_a0h0f extends BehaviourStep {
    /*package*/ Behaviour behaviour;

    public SendSignalAction_a0h0f(Behaviour behaviour) {
      this.behaviour = behaviour;
    }

    public void execute() {
      Board b = ReadBoard();
      Signal sendSignalTemp = new Signal();
      sendSignalTemp = new AdmitRedBayTrigger_jSignal();
      sendSignalTemp.AddData("patient", behaviour.getSignalTrigger().GetData("patient"));

      b.PushMission(sendSignalTemp);
    }
  }
  public class Choice_h0f extends InstantBehaviourStep {
    /*package*/ Behaviour behaviour;
    public Choice_h0f(Behaviour behaviour) {
      this.behaviour = behaviour;
    }

    public void execute() {
      if (((patient) behaviour.getSignalTrigger().GetData("patient")).LateralFlowCOVIDResult == "Positive" || ((patient) behaviour.getSignalTrigger().GetData("patient")).LateralFlowFluBResult == "Positive" || ((patient) behaviour.getSignalTrigger().GetData("patient")).LateralFlowFluAResult == "Positive") {
        ArrayList<BehaviourStep> plstSteps = new ArrayList();
        plstSteps.add(new SendSignalAction_a0h0f(behaviour));
        behaviour.injectSteps(plstSteps);
      } else {
        ArrayList<BehaviourStep> plstSteps = new ArrayList();
        behaviour.injectSteps(plstSteps);
      }
    }
  }
  public class MoveAction_a0g_1 extends BehaviourStep {
    /*package*/ Behaviour behaviour;
    /*package*/ Object target;
    /*package*/ Object concreteTarget;
    public MoveAction_a0g_1(Behaviour behaviour) {
      target = MajorsC_Cubicle.getInstance();
      this.behaviour = behaviour;
    }

    public void execute() {
      int count = 0;

      while (count < RunEnvironment.getInstance().getParameters().getInteger("SecondsPerTick")) {
        count++;
        if (finishCondition()) {
          return;
        }
        if (concreteTarget == null) {
          if (target instanceof RoomType) {
            concreteTarget = SelectLocation(((RoomType) target), behaviour);
          } else {
            concreteTarget = target;
          }
        }

        if (concreteTarget != null) {
          if (target instanceof RoomType) {
            if (EvaluateRoomChoice(((Room) concreteTarget), behaviour) == Double.MAX_VALUE) {
              concreteTarget = SelectLocation(((RoomType) target), behaviour);
            }
          }

          MoveTowards(concreteTarget);

        }
      }
    }

    public boolean finishCondition() {
      return concreteTarget != null && ImAt(concreteTarget);
    }
  }
  public class OrderAction_b0g_0 extends BehaviourStep {
    /*package*/ Behaviour behaviour;
    public OrderAction_b0g_0(Behaviour behaviour) {
      this.behaviour = behaviour;
    }

    public void execute() {
      Actor a = (Actor) behaviour.getSignalTrigger().GetData("patient");

      a.TakeOrder(new MoveToOrder().WithDestination(MajorsCCubicleNurse.this.curInside).andThen(new MoveToOrder().WithDestination(Bed.class)));
    }
  }
  public class StayForConditionAction_c0g_0 extends BehaviourStep {
    /*package*/ Behaviour behaviour;

    public StayForConditionAction_c0g_0(Behaviour behaviour) {
      this.behaviour = behaviour;
    }

    public void execute() {
      // Do nothing
    }

    public boolean finishCondition() {
      return curInside != null && curInside == ((Actor) behaviour.getSignalTrigger().GetData("patient")).getRoom();
    }
  }
  public class StayAction_d0g_0 extends BehaviourStep {
    /*package*/ Behaviour behaviour;
    /*package*/ int timeExecuted = 0;
    public StayAction_d0g_0(Behaviour behaviour) {
      this.behaviour = behaviour;
    }

    public void execute() {
      // Do nothing
      timeExecuted++;
    }

    public boolean finishCondition() {
      return (timeExecuted == (1200 / RunEnvironment.getInstance().getParameters().getInteger("SecondsPerTick")));

    }
  }
  public class OrderAction_e0g extends BehaviourStep {
    /*package*/ Behaviour behaviour;
    public OrderAction_e0g(Behaviour behaviour) {
      this.behaviour = behaviour;
    }

    public void execute() {
      Actor a = (Actor) behaviour.getSignalTrigger().GetData("patient");

      a.TakeOrder(new MoveToOrder().WithDestination(MajorsCWaitingRoom.getInstance()));
    }
  }
  public class OrderAction_f0g extends BehaviourStep {
    /*package*/ Behaviour behaviour;
    public OrderAction_f0g(Behaviour behaviour) {
      this.behaviour = behaviour;
    }

    public void execute() {
      Actor a = (Actor) behaviour.getSignalTrigger().GetData("patient");

      a.TakeOrder(new MoveToOrder().WithDestination(Seat.class));
    }
  }
  public class SendSignalAction_g0g extends BehaviourStep {
    /*package*/ Behaviour behaviour;

    public SendSignalAction_g0g(Behaviour behaviour) {
      this.behaviour = behaviour;
    }

    public void execute() {
      Board b = ReadBoard();
      Signal sendSignalTemp = new Signal();
      sendSignalTemp = new IspatientbeingadmittedtovulnerableareaTrigger_fSignal();
      sendSignalTemp.AddData("patient", behaviour.getSignalTrigger().GetData("patient"));

      b.PushMission(sendSignalTemp);
    }
  }
  public class MoveAction_a0a_5 extends BehaviourStep {
    /*package*/ Behaviour behaviour;
    /*package*/ Object target;
    /*package*/ Object concreteTarget;
    public MoveAction_a0a_5(Behaviour behaviour) {
      target = StaffReception.getInstance();
      this.behaviour = behaviour;
    }

    public void execute() {
      int count = 0;

      while (count < RunEnvironment.getInstance().getParameters().getInteger("SecondsPerTick")) {
        count++;
        if (finishCondition()) {
          return;
        }
        if (concreteTarget == null) {
          if (target instanceof RoomType) {
            concreteTarget = SelectLocation(((RoomType) target), behaviour);
          } else {
            concreteTarget = target;
          }
        }

        if (concreteTarget != null) {
          if (target instanceof RoomType) {
            if (EvaluateRoomChoice(((Room) concreteTarget), behaviour) == Double.MAX_VALUE) {
              concreteTarget = SelectLocation(((RoomType) target), behaviour);
            }
          }

          MoveTowards(concreteTarget);

        }
      }
    }

    public boolean finishCondition() {
      return concreteTarget != null && ImAt(concreteTarget);
    }
  }


  public void InitLFD_b_0(Signal s) {
    behaviourBuilder.setSignalTrigger(s);
    ArrayList<BehaviourStep> plstSteps = new ArrayList();
    plstSteps.add(new MoveAction_a0a_4(behaviourBuilder));
    plstSteps.add(new OrderAction_b0a_1(behaviourBuilder));
    plstSteps.add(new StayForConditionAction_c0a_1(behaviourBuilder));
    plstSteps.add(new StayAction_d0a_0(behaviourBuilder));
    plstSteps.add(new UseAction_e0a_0(behaviourBuilder));
    plstSteps.add(new StayAction_f0a_0(behaviourBuilder));
    plstSteps.add(new Choice_g0a_1(behaviourBuilder));
    plstSteps.add(new Choice_h0a_1(behaviourBuilder));
    plstSteps.add(new Choice_i0a_0(behaviourBuilder));
    plstSteps.add(new OrderAction_j0a_0(behaviourBuilder));
    plstSteps.add(new OrderAction_k0a(behaviourBuilder));
    plstSteps.add(new SendSignalAction_l0a(behaviourBuilder));
    behaviourBuilder.setSteps(plstSteps);

    Signal sendSignalTemp = new Signal();

  }
  public void InitCheckClinicalSusipicion_c_0(Signal s) {
    behaviourBuilder.setSignalTrigger(s);
    ArrayList<BehaviourStep> plstSteps = new ArrayList();
    plstSteps.add(new MoveAction_a0b_1(behaviourBuilder));
    plstSteps.add(new OrderAction_b0b_0(behaviourBuilder));
    plstSteps.add(new StayForConditionAction_c0b_0(behaviourBuilder));
    plstSteps.add(new StayAction_d0b_0(behaviourBuilder));
    plstSteps.add(new UseAction_e0b_0(behaviourBuilder));
    plstSteps.add(new StayAction_f0b_0(behaviourBuilder));
    plstSteps.add(new Choice_g0b_0(behaviourBuilder));
    plstSteps.add(new Choice_h0b_0(behaviourBuilder));
    plstSteps.add(new Choice_i0b_0(behaviourBuilder));
    plstSteps.add(new OrderAction_j0b(behaviourBuilder));
    plstSteps.add(new OrderAction_k0b(behaviourBuilder));
    plstSteps.add(new Choice_l0b(behaviourBuilder));
    plstSteps.add(new Choice_m0b(behaviourBuilder));
    behaviourBuilder.setSteps(plstSteps);

    Signal sendSignalTemp = new Signal();

  }
  public void InitPerformLIATorCepheid_d_0(Signal s) {
    behaviourBuilder.setSignalTrigger(s);
    ArrayList<BehaviourStep> plstSteps = new ArrayList();
    plstSteps.add(new MoveAction_a0c_2(behaviourBuilder));
    plstSteps.add(new OrderAction_b0c_2(behaviourBuilder));
    plstSteps.add(new StayForConditionAction_c0c_2(behaviourBuilder));
    plstSteps.add(new StayAction_d0c_0(behaviourBuilder));
    plstSteps.add(new Choice_e0c_0(behaviourBuilder));
    plstSteps.add(new Choice_f0c_1(behaviourBuilder));
    plstSteps.add(new OrderAction_g0c(behaviourBuilder));
    plstSteps.add(new OrderAction_h0c(behaviourBuilder));
    plstSteps.add(new SendSignalAction_i0c(behaviourBuilder));
    behaviourBuilder.setSteps(plstSteps);

    Signal sendSignalTemp = new Signal();

  }
  public void InitIspatientbeingadmittedtovulnerablearea_f_0(Signal s) {
    behaviourBuilder.setSignalTrigger(s);
    ArrayList<BehaviourStep> plstSteps = new ArrayList();
    plstSteps.add(new MoveAction_a0d_1(behaviourBuilder));
    plstSteps.add(new OrderAction_b0d_0(behaviourBuilder));
    plstSteps.add(new StayForConditionAction_c0d_0(behaviourBuilder));
    plstSteps.add(new StayAction_d0d_0(behaviourBuilder));
    plstSteps.add(new OrderAction_e0d(behaviourBuilder));
    plstSteps.add(new OrderAction_f0d(behaviourBuilder));
    plstSteps.add(new Choice_g0d_0(behaviourBuilder));
    plstSteps.add(new Choice_h0d_0(behaviourBuilder));
    behaviourBuilder.setSteps(plstSteps);

    Signal sendSignalTemp = new Signal();

  }
  public void InitPerformLIATorCepheid_g_0(Signal s) {
    behaviourBuilder.setSignalTrigger(s);
    ArrayList<BehaviourStep> plstSteps = new ArrayList();
    plstSteps.add(new MoveAction_a0e_1(behaviourBuilder));
    plstSteps.add(new OrderAction_b0e_1(behaviourBuilder));
    plstSteps.add(new StayForConditionAction_c0e_1(behaviourBuilder));
    plstSteps.add(new StayAction_d0e_1(behaviourBuilder));
    plstSteps.add(new Choice_e0e_0(behaviourBuilder));
    plstSteps.add(new Choice_f0e_0(behaviourBuilder));
    plstSteps.add(new OrderAction_g0e(behaviourBuilder));
    plstSteps.add(new OrderAction_h0e(behaviourBuilder));
    plstSteps.add(new SendSignalAction_i0e(behaviourBuilder));
    behaviourBuilder.setSteps(plstSteps);

    Signal sendSignalTemp = new Signal();

  }
  public void InitNurseTreatments_m(Signal s) {
    behaviourBuilder.setSignalTrigger(s);
    ArrayList<BehaviourStep> plstSteps = new ArrayList();
    plstSteps.add(new MoveAction_a0f_1(behaviourBuilder));
    plstSteps.add(new OrderAction_b0f_1(behaviourBuilder));
    plstSteps.add(new StayForConditionAction_c0f_1(behaviourBuilder));
    plstSteps.add(new StayAction_d0f_1(behaviourBuilder));
    plstSteps.add(new OrderAction_e0f_0(behaviourBuilder));
    plstSteps.add(new OrderAction_f0f_0(behaviourBuilder));
    plstSteps.add(new Choice_g0f(behaviourBuilder));
    plstSteps.add(new Choice_h0f(behaviourBuilder));
    behaviourBuilder.setSteps(plstSteps);

    Signal sendSignalTemp = new Signal();

  }
  public void InitNurseTreatments_n_0(Signal s) {
    behaviourBuilder.setSignalTrigger(s);
    ArrayList<BehaviourStep> plstSteps = new ArrayList();
    plstSteps.add(new MoveAction_a0g_1(behaviourBuilder));
    plstSteps.add(new OrderAction_b0g_0(behaviourBuilder));
    plstSteps.add(new StayForConditionAction_c0g_0(behaviourBuilder));
    plstSteps.add(new StayAction_d0g_0(behaviourBuilder));
    plstSteps.add(new OrderAction_e0g(behaviourBuilder));
    plstSteps.add(new OrderAction_f0g(behaviourBuilder));
    plstSteps.add(new SendSignalAction_g0g(behaviourBuilder));
    behaviourBuilder.setSteps(plstSteps);

    Signal sendSignalTemp = new Signal();

  }

  public int MajorsCCubicleNursegetAliveTime() {
    if (deSpawnTime == null) {
      return 0;
    }
    return Math.abs((int) TimeKeeper.compareSeconds(deSpawnTime, spawnTime));
  }
}
