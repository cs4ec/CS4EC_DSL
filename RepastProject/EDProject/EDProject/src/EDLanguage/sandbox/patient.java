package EDLanguage.sandbox;

/*Generated by MPS */

import simcore.agents.Actor;
import simcore.action.Behaviour;
import repast.simphony.space.continuous.ContinuousSpace;
import repast.simphony.space.grid.Grid;
import repast.simphony.context.Context;
import simcore.Signals.Signal;
import simcore.basicStructures.Board;
import java.util.List;
import java.util.function.Predicate;
import java.util.stream.Collectors;
import simcore.basicStructures.Room;
import simcore.basicStructures.RoomType;
import java.util.ArrayList;
import java.util.Comparator;
import simcore.agents.Agent;
import repast.simphony.space.graph.Network;
import simcore.basicStructures.TimeKeeper;

public class patient extends Actor {

  public String placeholder = "PlaceholderAttribute";
  public String admittedTo = "NA";
  public String Immunocompromised = "NotConfigured";
  public String Severity = "NotConfigured";
  public String COVIDInfectionStatus = "NotConfigured";
  public String LateralFlowTestCOVIDResult = "Incomplete";
  public String RapidPCRTestCOVIDResult = "Incomplete";
  public String LabPCRCOVIDResult = "Incomplete";
  public String PHEThreeCOVIDResult = "Incomplete";
  public String LFTorPCRCOVIDResult = "Incomplete";
  public String cohort = "CohortOne";
  public Behaviour behaviourBuilder;

  public patient(ContinuousSpace<Object> space, Grid<Object> grid, Context<Object> context) {
    super(space, grid, context);
    mintMyMaxPatients = 1;
  }

  protected Signal searchForSignals(Board board) {
    // Read the board for signals, and find ones for me - filter out any signals that I don't meet the pre-condition for
    List<Signal> plstDirectSignals = board.GetDirectSignalsForMe(this).stream().filter(new Predicate<Signal>() {
      public boolean test(Signal s) {
        return s.checkPreCondition(context, patient.this);
      }
    }).collect(Collectors.toList());



    List<Signal> plstSignals = board.GetSignalListBySubject(this.getClass()).stream().filter(new Predicate<Signal>() {
      public boolean test(Signal s) {
        return s.checkPreCondition(context, patient.this);
      }
    }).collect(Collectors.toList());

    if (plstDirectSignals.isEmpty() && plstSignals.isEmpty()) {
      return null;
    }
    // First see if there are any direct messages for me and prioritise those
    Signal s = selectSignal(plstDirectSignals);
    if (s == null) {
      // If none, select a message for my class type
      s = selectSignal(plstSignals);
    }
    return s;
  }


  protected Signal selectSignal(List<Signal> plstSignals) {
    if (plstSignals.isEmpty()) {
      return null;
    }
    return null;
  }

  protected Room SelectLocation(RoomType pRoomType, final Behaviour behaviour) {
    if (curInside != null && curInside.getRoomType() == pRoomType && EvaluateRoomChoice(curInside, behaviour) != Double.MAX_VALUE) {
      return curInside;
    }
    ArrayList<Room> pRooms = (ArrayList<Room>) ReadMap().FindInstancesOfRoomType(pRoomType);
    // First, select the room that contains my patient (if my current action involves the patient)
    for (Room pRoom : pRooms) {
      if (behaviour.getSignalTrigger() != null && behaviour.getSignalTrigger().GetData("patient") != null && pRoom.getOccupiers().contains(behaviour.getSignalTrigger().GetData("patient"))) {
        return pRoom;
      }
    }
    // If my patient isn't currently in that room, then consider other options
    Room selectedRoom = pRooms.stream().sorted(new Comparator<Room>() {
      public int compare(Room r1, Room r2) {
        return Double.compare(EvaluateRoomChoice(r1, behaviour), EvaluateRoomChoice(r2, behaviour));
      }
    }).filter(new Predicate<Room>() {
      public boolean test(Room r) {
        return EvaluateRoomChoice(r, behaviour) != Double.MAX_VALUE;
      }
    }).findFirst().orElse(null);
    return selectedRoom;
  }


  protected double EvaluateRoomChoice(Room pRoom, Behaviour behaviour) {
    ArrayList<Agent> occupiers = new ArrayList<Agent>(pRoom.getOccupiers());

    if (pRoom == null) {
      return 0;
    }
    return 0;

  }





  public Behaviour BuildActionFromSignal(Signal s) {
    if (s.GetData("patient") != null) {
      ((Network) context.getProjection("CurrentPatientAllocations")).addEdge(this, s.GetData("patient"));
    }
    switch (s.getName()) {
      case "":
        break;
      default:
        System.out.println("Set mission: " + s.getName() + " failed!");
        return behaviourBuilder;
    }
    return behaviourBuilder;
  }


  public int getImmunocompromisedisYes() {
    if (this.Immunocompromised == "Yes") {
      return 1;
    }
    return 0;
  }
  public int getImmunocompromisedisNo() {
    if (this.Immunocompromised == "No") {
      return 1;
    }
    return 0;
  }
  public int getSeverityissevere() {
    if (this.Severity == "severe") {
      return 1;
    }
    return 0;
  }
  public int getSeverityismoderate() {
    if (this.Severity == "moderate") {
      return 1;
    }
    return 0;
  }
  public int getSeverityislow() {
    if (this.Severity == "low") {
      return 1;
    }
    return 0;
  }
  public int getCOVIDInfectionStatusisSusceptible() {
    if (this.COVIDInfectionStatus == "Susceptible") {
      return 1;
    }
    return 0;
  }
  public int getCOVIDInfectionStatusisAsymptomatic() {
    if (this.COVIDInfectionStatus == "Asymptomatic") {
      return 1;
    }
    return 0;
  }
  public int getCOVIDInfectionStatusisSymptomatic() {
    if (this.COVIDInfectionStatus == "Symptomatic") {
      return 1;
    }
    return 0;
  }
  public int getLateralFlowTestCOVIDResultisPositive() {
    if (this.LateralFlowTestCOVIDResult == "Positive") {
      return 1;
    }
    return 0;
  }
  public int getLateralFlowTestCOVIDResultisNegative() {
    if (this.LateralFlowTestCOVIDResult == "Negative") {
      return 1;
    }
    return 0;
  }
  public int getRapidPCRTestCOVIDResultisPositive() {
    if (this.RapidPCRTestCOVIDResult == "Positive") {
      return 1;
    }
    return 0;
  }
  public int getRapidPCRTestCOVIDResultisNegative() {
    if (this.RapidPCRTestCOVIDResult == "Negative") {
      return 1;
    }
    return 0;
  }
  public int getLabPCRCOVIDResultisPositive() {
    if (this.LabPCRCOVIDResult == "Positive") {
      return 1;
    }
    return 0;
  }
  public int getLabPCRCOVIDResultisNegative() {
    if (this.LabPCRCOVIDResult == "Negative") {
      return 1;
    }
    return 0;
  }
  public int getPHEThreeCOVIDResultisPositive() {
    if (this.PHEThreeCOVIDResult == "Positive") {
      return 1;
    }
    return 0;
  }
  public int getPHEThreeCOVIDResultisNegative() {
    if (this.PHEThreeCOVIDResult == "Negative") {
      return 1;
    }
    return 0;
  }
  public int getadmittedToisGreenBay() {
    if (this.admittedTo == "GreenBay") {
      return 1;
    }
    return 0;
  }
  public int getadmittedToisSideRoom() {
    if (this.admittedTo == "SideRoom") {
      return 1;
    }
    return 0;
  }
  public int getadmittedToisCOVIDPositiveCohort() {
    if (this.admittedTo == "COVIDPositiveCohort") {
      return 1;
    }
    return 0;
  }
  public int getadmittedToisGreenBaygetImmunocompromisedisYes() {
    if (this.admittedTo == "GreenBay" && this.Immunocompromised == "Yes") {
      return 1;
    }
    return 0;
  }
  public int getadmittedToisGreenBaygetImmunocompromisedisNo() {
    if (this.admittedTo == "GreenBay" && this.Immunocompromised == "No") {
      return 1;
    }
    return 0;
  }
  public int getadmittedToisSideRoomgetImmunocompromisedisYes() {
    if (this.admittedTo == "SideRoom" && this.Immunocompromised == "Yes") {
      return 1;
    }
    return 0;
  }
  public int getadmittedToisSideRoomgetImmunocompromisedisNo() {
    if (this.admittedTo == "SideRoom" && this.Immunocompromised == "No") {
      return 1;
    }
    return 0;
  }
  public int getadmittedToisCOVIDPositiveCohortgetImmunocompromisedisYes() {
    if (this.admittedTo == "COVIDPositiveCohort" && this.Immunocompromised == "Yes") {
      return 1;
    }
    return 0;
  }
  public int getadmittedToisCOVIDPositiveCohortgetImmunocompromisedisNo() {
    if (this.admittedTo == "COVIDPositiveCohort" && this.Immunocompromised == "No") {
      return 1;
    }
    return 0;
  }
  public int getadmittedToisGreenBaygetSeverityissevere() {
    if (this.admittedTo == "GreenBay" && this.Severity == "severe") {
      return 1;
    }
    return 0;
  }
  public int getadmittedToisGreenBaygetSeverityismoderate() {
    if (this.admittedTo == "GreenBay" && this.Severity == "moderate") {
      return 1;
    }
    return 0;
  }
  public int getadmittedToisGreenBaygetSeverityislow() {
    if (this.admittedTo == "GreenBay" && this.Severity == "low") {
      return 1;
    }
    return 0;
  }
  public int getadmittedToisSideRoomgetSeverityissevere() {
    if (this.admittedTo == "SideRoom" && this.Severity == "severe") {
      return 1;
    }
    return 0;
  }
  public int getadmittedToisSideRoomgetSeverityismoderate() {
    if (this.admittedTo == "SideRoom" && this.Severity == "moderate") {
      return 1;
    }
    return 0;
  }
  public int getadmittedToisSideRoomgetSeverityislow() {
    if (this.admittedTo == "SideRoom" && this.Severity == "low") {
      return 1;
    }
    return 0;
  }
  public int getadmittedToisCOVIDPositiveCohortgetSeverityissevere() {
    if (this.admittedTo == "COVIDPositiveCohort" && this.Severity == "severe") {
      return 1;
    }
    return 0;
  }
  public int getadmittedToisCOVIDPositiveCohortgetSeverityismoderate() {
    if (this.admittedTo == "COVIDPositiveCohort" && this.Severity == "moderate") {
      return 1;
    }
    return 0;
  }
  public int getadmittedToisCOVIDPositiveCohortgetSeverityislow() {
    if (this.admittedTo == "COVIDPositiveCohort" && this.Severity == "low") {
      return 1;
    }
    return 0;
  }
  public int getadmittedToisGreenBaygetCOVIDInfectionStatusisSusceptible() {
    if (this.admittedTo == "GreenBay" && this.COVIDInfectionStatus == "Susceptible") {
      return 1;
    }
    return 0;
  }
  public int getadmittedToisGreenBaygetCOVIDInfectionStatusisAsymptomatic() {
    if (this.admittedTo == "GreenBay" && this.COVIDInfectionStatus == "Asymptomatic") {
      return 1;
    }
    return 0;
  }
  public int getadmittedToisGreenBaygetCOVIDInfectionStatusisSymptomatic() {
    if (this.admittedTo == "GreenBay" && this.COVIDInfectionStatus == "Symptomatic") {
      return 1;
    }
    return 0;
  }
  public int getadmittedToisSideRoomgetCOVIDInfectionStatusisSusceptible() {
    if (this.admittedTo == "SideRoom" && this.COVIDInfectionStatus == "Susceptible") {
      return 1;
    }
    return 0;
  }
  public int getadmittedToisSideRoomgetCOVIDInfectionStatusisAsymptomatic() {
    if (this.admittedTo == "SideRoom" && this.COVIDInfectionStatus == "Asymptomatic") {
      return 1;
    }
    return 0;
  }
  public int getadmittedToisSideRoomgetCOVIDInfectionStatusisSymptomatic() {
    if (this.admittedTo == "SideRoom" && this.COVIDInfectionStatus == "Symptomatic") {
      return 1;
    }
    return 0;
  }
  public int getadmittedToisCOVIDPositiveCohortgetCOVIDInfectionStatusisSusceptible() {
    if (this.admittedTo == "COVIDPositiveCohort" && this.COVIDInfectionStatus == "Susceptible") {
      return 1;
    }
    return 0;
  }
  public int getadmittedToisCOVIDPositiveCohortgetCOVIDInfectionStatusisAsymptomatic() {
    if (this.admittedTo == "COVIDPositiveCohort" && this.COVIDInfectionStatus == "Asymptomatic") {
      return 1;
    }
    return 0;
  }
  public int getadmittedToisCOVIDPositiveCohortgetCOVIDInfectionStatusisSymptomatic() {
    if (this.admittedTo == "COVIDPositiveCohort" && this.COVIDInfectionStatus == "Symptomatic") {
      return 1;
    }
    return 0;
  }
  public int getadmittedToisGreenBaygetLateralFlowTestCOVIDResultisPositive() {
    if (this.admittedTo == "GreenBay" && this.LateralFlowTestCOVIDResult == "Positive") {
      return 1;
    }
    return 0;
  }
  public int getadmittedToisGreenBaygetLateralFlowTestCOVIDResultisNegative() {
    if (this.admittedTo == "GreenBay" && this.LateralFlowTestCOVIDResult == "Negative") {
      return 1;
    }
    return 0;
  }
  public int getadmittedToisSideRoomgetLateralFlowTestCOVIDResultisPositive() {
    if (this.admittedTo == "SideRoom" && this.LateralFlowTestCOVIDResult == "Positive") {
      return 1;
    }
    return 0;
  }
  public int getadmittedToisSideRoomgetLateralFlowTestCOVIDResultisNegative() {
    if (this.admittedTo == "SideRoom" && this.LateralFlowTestCOVIDResult == "Negative") {
      return 1;
    }
    return 0;
  }
  public int getadmittedToisCOVIDPositiveCohortgetLateralFlowTestCOVIDResultisPositive() {
    if (this.admittedTo == "COVIDPositiveCohort" && this.LateralFlowTestCOVIDResult == "Positive") {
      return 1;
    }
    return 0;
  }
  public int getadmittedToisCOVIDPositiveCohortgetLateralFlowTestCOVIDResultisNegative() {
    if (this.admittedTo == "COVIDPositiveCohort" && this.LateralFlowTestCOVIDResult == "Negative") {
      return 1;
    }
    return 0;
  }
  public int getadmittedToisGreenBaygetRapidPCRTestCOVIDResultisPositive() {
    if (this.admittedTo == "GreenBay" && this.RapidPCRTestCOVIDResult == "Positive") {
      return 1;
    }
    return 0;
  }
  public int getadmittedToisGreenBaygetRapidPCRTestCOVIDResultisNegative() {
    if (this.admittedTo == "GreenBay" && this.RapidPCRTestCOVIDResult == "Negative") {
      return 1;
    }
    return 0;
  }
  public int getadmittedToisSideRoomgetRapidPCRTestCOVIDResultisPositive() {
    if (this.admittedTo == "SideRoom" && this.RapidPCRTestCOVIDResult == "Positive") {
      return 1;
    }
    return 0;
  }
  public int getadmittedToisSideRoomgetRapidPCRTestCOVIDResultisNegative() {
    if (this.admittedTo == "SideRoom" && this.RapidPCRTestCOVIDResult == "Negative") {
      return 1;
    }
    return 0;
  }
  public int getadmittedToisCOVIDPositiveCohortgetRapidPCRTestCOVIDResultisPositive() {
    if (this.admittedTo == "COVIDPositiveCohort" && this.RapidPCRTestCOVIDResult == "Positive") {
      return 1;
    }
    return 0;
  }
  public int getadmittedToisCOVIDPositiveCohortgetRapidPCRTestCOVIDResultisNegative() {
    if (this.admittedTo == "COVIDPositiveCohort" && this.RapidPCRTestCOVIDResult == "Negative") {
      return 1;
    }
    return 0;
  }
  public int getadmittedToisGreenBaygetLabPCRCOVIDResultisPositive() {
    if (this.admittedTo == "GreenBay" && this.LabPCRCOVIDResult == "Positive") {
      return 1;
    }
    return 0;
  }
  public int getadmittedToisGreenBaygetLabPCRCOVIDResultisNegative() {
    if (this.admittedTo == "GreenBay" && this.LabPCRCOVIDResult == "Negative") {
      return 1;
    }
    return 0;
  }
  public int getadmittedToisSideRoomgetLabPCRCOVIDResultisPositive() {
    if (this.admittedTo == "SideRoom" && this.LabPCRCOVIDResult == "Positive") {
      return 1;
    }
    return 0;
  }
  public int getadmittedToisSideRoomgetLabPCRCOVIDResultisNegative() {
    if (this.admittedTo == "SideRoom" && this.LabPCRCOVIDResult == "Negative") {
      return 1;
    }
    return 0;
  }
  public int getadmittedToisCOVIDPositiveCohortgetLabPCRCOVIDResultisPositive() {
    if (this.admittedTo == "COVIDPositiveCohort" && this.LabPCRCOVIDResult == "Positive") {
      return 1;
    }
    return 0;
  }
  public int getadmittedToisCOVIDPositiveCohortgetLabPCRCOVIDResultisNegative() {
    if (this.admittedTo == "COVIDPositiveCohort" && this.LabPCRCOVIDResult == "Negative") {
      return 1;
    }
    return 0;
  }
  public int getadmittedToisGreenBaygetPHEThreeCOVIDResultisPositive() {
    if (this.admittedTo == "GreenBay" && this.PHEThreeCOVIDResult == "Positive") {
      return 1;
    }
    return 0;
  }
  public int getadmittedToisGreenBaygetPHEThreeCOVIDResultisNegative() {
    if (this.admittedTo == "GreenBay" && this.PHEThreeCOVIDResult == "Negative") {
      return 1;
    }
    return 0;
  }
  public int getadmittedToisSideRoomgetPHEThreeCOVIDResultisPositive() {
    if (this.admittedTo == "SideRoom" && this.PHEThreeCOVIDResult == "Positive") {
      return 1;
    }
    return 0;
  }
  public int getadmittedToisSideRoomgetPHEThreeCOVIDResultisNegative() {
    if (this.admittedTo == "SideRoom" && this.PHEThreeCOVIDResult == "Negative") {
      return 1;
    }
    return 0;
  }
  public int getadmittedToisCOVIDPositiveCohortgetPHEThreeCOVIDResultisPositive() {
    if (this.admittedTo == "COVIDPositiveCohort" && this.PHEThreeCOVIDResult == "Positive") {
      return 1;
    }
    return 0;
  }
  public int getadmittedToisCOVIDPositiveCohortgetPHEThreeCOVIDResultisNegative() {
    if (this.admittedTo == "COVIDPositiveCohort" && this.PHEThreeCOVIDResult == "Negative") {
      return 1;
    }
    return 0;
  }





  public int patientgetAliveTime() {
    if (deSpawnTime == null) {
      return 0;
    }
    return Math.abs((int) TimeKeeper.compareSeconds(deSpawnTime, spawnTime));
  }
}
