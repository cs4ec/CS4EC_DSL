package EDLanguage.sandbox;

/*Generated by MPS */

import repast.simphony.dataLoader.ContextBuilder;
import repast.simphony.context.Context;
import repast.simphony.parameter.Parameters;
import repast.simphony.engine.environment.RunEnvironment;
import simcore.utilities.ModelParameterStore;
import repast.simphony.context.space.continuous.ContinuousSpaceFactory;
import repast.simphony.context.space.continuous.ContinuousSpaceFactoryFinder;
import repast.simphony.space.continuous.ContinuousSpace;
import simcore.utilities.StaffAdder;
import repast.simphony.space.continuous.StrictBorders;
import repast.simphony.context.space.grid.GridFactory;
import repast.simphony.context.space.grid.GridFactoryFinder;
import repast.simphony.space.grid.Grid;
import repast.simphony.space.grid.GridBuilderParameters;
import repast.simphony.space.grid.SimpleGridAdder;
import simcore.basicStructures.Board;
import repast.simphony.valueLayer.GridValueLayer;
import simcore.basicStructures.Area;
import java.awt.Color;
import simcore.basicStructures.Room;
import repast.simphony.space.continuous.NdPoint;
import repast.simphony.context.space.graph.NetworkBuilder;
import java.util.HashMap;
import simcore.utilities.PatientArrivalStore;
import java.util.Map;
import simcore.basicStructures.Wall;

public class EDBuilder implements ContextBuilder<Object> {

  public Context build(Context<Object> context) {

    context.setId("EDProject");
    int mapWidth = 449;
    int mapHeight = 250;

    Parameters params = RunEnvironment.getInstance().getParameters();

    Boolean pBool = params.getBoolean("UsePathFinding");
    ModelParameterStore.UsePathFinding = false;

    RunEnvironment.getInstance().endAt(604800 / params.getInteger("SecondsPerTick"));

    CreatePatientArrivalMap();

    ContinuousSpaceFactory spaceFactory = ContinuousSpaceFactoryFinder.createContinuousSpaceFactory(null);
    ContinuousSpace<Object> space = spaceFactory.createContinuousSpace("space", context, new StaffAdder<Object>(), new StrictBorders(), mapWidth, mapHeight);

    GridFactory gridFactory = GridFactoryFinder.createGridFactory(null);
    Grid<Object> grid = gridFactory.createGrid("grid", context, new GridBuilderParameters<Object>(new repast.simphony.space.grid.StrictBorders(), new SimpleGridAdder<Object>(), true, mapWidth, mapHeight));

    context.add(new patientGenerator_1(space, grid, context));
    context.add(new patientGenerator_0(space, grid, context));
    context.add(new Board());

    // add Agents 
    for (int i = 0; i < 10; i++) {
      context.add(new Doctor(space, grid, context));
    }
    for (int i = 0; i < 20; i++) {
      context.add(new CubicleNurse(space, grid, context));
    }
    for (int i = 0; i < 5; i++) {
      context.add(new TriageNurse(space, grid, context));
    }
    for (int i = 0; i < 20; i++) {
      context.add(new PreAdmissionStaff(space, grid, context));
    }


    GridValueLayer vl = new GridValueLayer("cellbox", true, new repast.simphony.space.grid.StrictBorders(), mapWidth, mapHeight);
    context.addValueLayer(vl);

    // add Locations here 

    Area EmergencyDepartment_0 = new Area(context, space, grid, 5, 5, 370, 195, Color.WHITE);
    EmergencyDepartment_0.addResource(LabPCR.getInstance(), 100);
    EmergencyDepartment_0.addResource(LFD.getInstance(), 100);
    EmergencyDepartment_0.addResource(LIAT.getInstance(), 22);
    EmergencyDepartment_0.addResource(PHEThreeAlt.getInstance(), 1000);
    EmergencyDepartment_0.setReplenishAmount(LabPCR.getInstance(), 100);
    EmergencyDepartment_0.setReplenishAmount(LFD.getInstance(), 100);
    EmergencyDepartment_0.setReplenishAmount(LIAT.getInstance(), 22);
    EmergencyDepartment_0.setReplenishAmount(PHEThreeAlt.getInstance(), 1000);
    EmergencyDepartment_0.setReplenishFrequency(LabPCR.getInstance(), 1);
    EmergencyDepartment_0.setReplenishFrequency(LFD.getInstance(), 1);
    EmergencyDepartment_0.setReplenishFrequency(LIAT.getInstance(), 1);
    EmergencyDepartment_0.setReplenishFrequency(PHEThreeAlt.getInstance(), 1);
    Room Paedeatrics_a = new Room("Paedeatrics", context, space, grid, 5, 145, 50, 50, 1, 10000, Ward.getInstance(), Color.GRAY, EmergencyDepartment_0);
    Room Lab_b = new Room("Lab", context, space, grid, 5, 5, 30, 30, 1, 1000, Labaratory.getInstance(), Color.YELLOW, EmergencyDepartment_0);
    Room MainReception_c = new Room("MainReception", context, space, grid, 55, 125, 20, 20, 1, 40, Ward.getInstance(), Color.GRAY, EmergencyDepartment_0);
    Room Triage_d = new Room("Triage", context, space, grid, 105, 160, 10, 10, 1, 1000, TriageDesk.getInstance(), Color.BLUE, EmergencyDepartment_0);
    Room MajorsTriage_e = new Room("MajorsTriage", context, space, grid, 110, 100, 10, 10, 1, 1000, TriageDesk.getInstance(), Color.BLUE, EmergencyDepartment_0);
    Room LIATBoothOne_f = new Room("LIATBoothOne", context, space, grid, 111, 92, 5, 5, 1, 1000, LIATBooth.getInstance(), Color.RED, EmergencyDepartment_0);
    Room MajorsWaitingRoom_g = new Room("MajorsWaitingRoom", context, space, grid, 140, 90, 20, 40, 1, 1000, NonRespiratoryArea.getInstance(), Color.GRAY, EmergencyDepartment_0);
    Room NonRespiratoryCubicle1_h = new Room("NonRespiratoryCubicle1", context, space, grid, 110, 80, 10, 10, 1, 1000, NonRespiratoryCubicle.getInstance(), Color.RED, EmergencyDepartment_0);
    Room NonRespiratoryCubicle2_i = new Room("NonRespiratoryCubicle2", context, space, grid, 110, 60, 10, 10, 1, 3, NonRespiratoryCubicle.getInstance(), Color.RED, EmergencyDepartment_0);
    Room NonRespiratoryCubicle3_j = new Room("NonRespiratoryCubicle3", context, space, grid, 120, 80, 10, 10, 1, 3, NonRespiratoryCubicle.getInstance(), Color.RED, EmergencyDepartment_0);
    Room NonRespiratoryCubicle4_k = new Room("NonRespiratoryCubicle4", context, space, grid, 120, 60, 10, 10, 1, 3, NonRespiratoryCubicle.getInstance(), Color.RED, EmergencyDepartment_0);
    Room NonRespiratoryCubicle5_l = new Room("NonRespiratoryCubicle5", context, space, grid, 140, 80, 10, 10, 1, 3, NonRespiratoryCubicle.getInstance(), Color.RED, EmergencyDepartment_0);
    Room NonRespiratoryCubicle6_m = new Room("NonRespiratoryCubicle6", context, space, grid, 130, 60, 10, 10, 1, 3, NonRespiratoryCubicle.getInstance(), Color.RED, EmergencyDepartment_0);
    Room NonRespiratoryCubicle7_n = new Room("NonRespiratoryCubicle7", context, space, grid, 150, 80, 10, 10, 1, 3, NonRespiratoryCubicle.getInstance(), Color.RED, EmergencyDepartment_0);
    Room NonRespiratoryCubicle8_o = new Room("NonRespiratoryCubicle8", context, space, grid, 140, 60, 10, 10, 1, 3, NonRespiratoryCubicle.getInstance(), Color.RED, EmergencyDepartment_0);
    Room NonRespiratoryCubicle9_p = new Room("NonRespiratoryCubicle9", context, space, grid, 150, 60, 10, 10, 1, 3, NonRespiratoryCubicle.getInstance(), Color.RED, EmergencyDepartment_0);
    Room TaskRoom1_q = new Room("TaskRoom1", context, space, grid, 120, 155, 5, 5, 1, 3, TaskRoom.getInstance(), Color.ORANGE, EmergencyDepartment_0);
    Room TaskRoom2_r = new Room("TaskRoom2", context, space, grid, 125, 155, 5, 5, 1, 3, TaskRoom.getInstance(), Color.ORANGE, EmergencyDepartment_0);
    Room TaskRoom3_s = new Room("TaskRoom3", context, space, grid, 130, 155, 5, 5, 1, 3, TaskRoom.getInstance(), Color.ORANGE, EmergencyDepartment_0);
    Room Entrance_t = new Room("Entrance", context, space, grid, 95, 193, 10, 5, 1, 10, MainEntrance.getInstance(), Color.GRAY, EmergencyDepartment_0);
    Room XRayRoom1_u = new Room("XRayRoom1", context, space, grid, 140, 155, 5, 5, 1, 3, RadiologyRoom.getInstance(), Color.ORANGE, EmergencyDepartment_0);
    Room XRayRoom2_v = new Room("XRayRoom2", context, space, grid, 145, 155, 5, 5, 1, 3, RadiologyRoom.getInstance(), Color.ORANGE, EmergencyDepartment_0);
    Room TriageWaitingRoom_w = new Room("TriageWaitingRoom", context, space, grid, 105, 170, 50, 20, 1, 100, WaitingRoom.getInstance(), Color.GRAY, EmergencyDepartment_0);
    Room MajorsABReception_x = new Room("MajorsABReception", context, space, grid, 200, 168, 20, 10, 1, 15, Ward.getInstance(), Color.GRAY, EmergencyDepartment_0);
    Room LIATBooth2_y = new Room("LIATBooth2", context, space, grid, 220, 169, 5, 8, 1, 5, LIATBooth.getInstance(), Color.RED, EmergencyDepartment_0);
    Room RespiratoryCubicleA_z = new Room("RespiratoryCubicleA", context, space, grid, 205, 190, 10, 10, 1, 3, RespiratoryCubicle.getInstance(), Color.GREEN, EmergencyDepartment_0);
    Room RespiratoryCubicleB_ab = new Room("RespiratoryCubicleB", context, space, grid, 220, 190, 10, 10, 1, 3, RespiratoryCubicle.getInstance(), Color.GREEN, EmergencyDepartment_0);
    Room RespiratoryCubicleC_bb = new Room("RespiratoryCubicleC", context, space, grid, 235, 190, 10, 10, 1, 3, RespiratoryCubicle.getInstance(), Color.GREEN, EmergencyDepartment_0);
    Room RespiratoryCubicleD_cb = new Room("RespiratoryCubicleD", context, space, grid, 235, 175, 10, 10, 1, 3, RespiratoryCubicle.getInstance(), Color.GREEN, EmergencyDepartment_0);
    Room RespiratoryCubicleE_db = new Room("RespiratoryCubicleE", context, space, grid, 235, 160, 10, 10, 1, 3, RespiratoryCubicle.getInstance(), Color.GREEN, EmergencyDepartment_0);
    Room RespiratoryCubicleF_eb = new Room("RespiratoryCubicleF", context, space, grid, 235, 145, 10, 10, 1, 3, RespiratoryCubicle.getInstance(), Color.GREEN, EmergencyDepartment_0);
    Room RespiratoryCubicleG_fb = new Room("RespiratoryCubicleG", context, space, grid, 220, 145, 10, 10, 1, 3, RespiratoryCubicle.getInstance(), Color.GREEN, EmergencyDepartment_0);
    Room RespiratoryCubicleH_gb = new Room("RespiratoryCubicleH", context, space, grid, 205, 145, 10, 10, 1, 3, RespiratoryCubicle.getInstance(), Color.GREEN, EmergencyDepartment_0);
    Room RespiratoryCubicleI_hb = new Room("RespiratoryCubicleI", context, space, grid, 190, 145, 10, 10, 1, 3, RespiratoryCubicle.getInstance(), Color.GREEN, EmergencyDepartment_0);
    Room RespiratoryCubicleJ_ib = new Room("RespiratoryCubicleJ", context, space, grid, 175, 175, 10, 10, 1, 3, RespiratoryCubicle.getInstance(), Color.GREEN, EmergencyDepartment_0);
    Room RespiratoryCubicleK_jb = new Room("RespiratoryCubicleK", context, space, grid, 175, 190, 10, 10, 1, 3, RespiratoryCubicle.getInstance(), Color.GREEN, EmergencyDepartment_0);
    Room RespiratoryCubicleL_kb = new Room("RespiratoryCubicleL", context, space, grid, 190, 190, 10, 10, 1, 3, RespiratoryCubicle.getInstance(), Color.GREEN, EmergencyDepartment_0);
    Room SideRoom_lb = new Room("SideRoom", context, space, grid, 200, 60, 50, 50, 1, 1000, SideRoom.getInstance(), Color.ORANGE, EmergencyDepartment_0);
    Room CovidCohort_mb = new Room("CovidCohort", context, space, grid, 260, 60, 50, 50, 1, 1000, COVIDPositiveCohort.getInstance(), Color.RED, EmergencyDepartment_0);
    Room AmberBay_nb = new Room("AmberBay", context, space, grid, 260, 5, 50, 50, 1, 1000, AmberBay.getInstance(), Color.ORANGE, EmergencyDepartment_0);
    Room PreAdmissionArea_ob = new Room("PreAdmissionArea", context, space, grid, 320, 5, 50, 50, 1, 1000, ElectiveAttendanceArea.getInstance(), Color.GRAY, EmergencyDepartment_0);
    Room NonRespiratoryCohort_pb = new Room("NonRespiratoryCohort", context, space, grid, 200, 5, 50, 50, 1, 1000, NonRespiratoryCohort.getInstance(), Color.GREEN, EmergencyDepartment_0);

    try {

      Paedeatrics_a.setSeats(0);
      Lab_b.setSeats(0);
      MainReception_c.setSeats(25);
      Triage_d.setSeats(0);
      MajorsTriage_e.setSeats(0);
      LIATBoothOne_f.setSeats(0);
      MajorsWaitingRoom_g.setSeats(50);
      NonRespiratoryCubicle1_h.setSeats(0);
      NonRespiratoryCubicle2_i.setSeats(0);
      NonRespiratoryCubicle3_j.setSeats(0);
      NonRespiratoryCubicle4_k.setSeats(0);
      NonRespiratoryCubicle5_l.setSeats(0);
      NonRespiratoryCubicle6_m.setSeats(0);
      NonRespiratoryCubicle7_n.setSeats(0);
      NonRespiratoryCubicle8_o.setSeats(0);
      NonRespiratoryCubicle9_p.setSeats(0);
      TaskRoom1_q.setSeats(0);
      TaskRoom2_r.setSeats(0);
      TaskRoom3_s.setSeats(0);
      Entrance_t.setSeats(0);
      XRayRoom1_u.setSeats(0);
      XRayRoom2_v.setSeats(0);
      TriageWaitingRoom_w.setSeats(20);
      MajorsABReception_x.setSeats(0);
      LIATBooth2_y.setSeats(0);
      RespiratoryCubicleA_z.setSeats(0);
      RespiratoryCubicleB_ab.setSeats(0);
      RespiratoryCubicleC_bb.setSeats(0);
      RespiratoryCubicleD_cb.setSeats(0);
      RespiratoryCubicleE_db.setSeats(0);
      RespiratoryCubicleF_eb.setSeats(0);
      RespiratoryCubicleG_fb.setSeats(0);
      RespiratoryCubicleH_gb.setSeats(0);
      RespiratoryCubicleI_hb.setSeats(0);
      RespiratoryCubicleJ_ib.setSeats(0);
      RespiratoryCubicleK_jb.setSeats(0);
      RespiratoryCubicleL_kb.setSeats(0);
      SideRoom_lb.setSeats(0);
      CovidCohort_mb.setSeats(0);
      AmberBay_nb.setSeats(0);
      PreAdmissionArea_ob.setSeats(0);
      NonRespiratoryCohort_pb.setSeats(0);
      Paedeatrics_a.setDesks(0);
      Lab_b.setDesks(0);
      MainReception_c.setDesks(0);
      Triage_d.setDesks(3);
      MajorsTriage_e.setDesks(3);
      LIATBoothOne_f.setDesks(0);
      MajorsWaitingRoom_g.setDesks(0);
      NonRespiratoryCubicle1_h.setDesks(0);
      NonRespiratoryCubicle2_i.setDesks(0);
      NonRespiratoryCubicle3_j.setDesks(0);
      NonRespiratoryCubicle4_k.setDesks(0);
      NonRespiratoryCubicle5_l.setDesks(0);
      NonRespiratoryCubicle6_m.setDesks(0);
      NonRespiratoryCubicle7_n.setDesks(0);
      NonRespiratoryCubicle8_o.setDesks(0);
      NonRespiratoryCubicle9_p.setDesks(0);
      TaskRoom1_q.setDesks(0);
      TaskRoom2_r.setDesks(0);
      TaskRoom3_s.setDesks(0);
      Entrance_t.setDesks(0);
      XRayRoom1_u.setDesks(1);
      XRayRoom2_v.setDesks(1);
      TriageWaitingRoom_w.setDesks(0);
      MajorsABReception_x.setDesks(11);
      LIATBooth2_y.setDesks(0);
      RespiratoryCubicleA_z.setDesks(0);
      RespiratoryCubicleB_ab.setDesks(0);
      RespiratoryCubicleC_bb.setDesks(0);
      RespiratoryCubicleD_cb.setDesks(0);
      RespiratoryCubicleE_db.setDesks(0);
      RespiratoryCubicleF_eb.setDesks(0);
      RespiratoryCubicleG_fb.setDesks(0);
      RespiratoryCubicleH_gb.setDesks(0);
      RespiratoryCubicleI_hb.setDesks(0);
      RespiratoryCubicleJ_ib.setDesks(0);
      RespiratoryCubicleK_jb.setDesks(0);
      RespiratoryCubicleL_kb.setDesks(0);
      SideRoom_lb.setDesks(0);
      CovidCohort_mb.setDesks(0);
      AmberBay_nb.setDesks(0);
      PreAdmissionArea_ob.setDesks(0);
      NonRespiratoryCohort_pb.setDesks(0);
      Paedeatrics_a.setBeds(0);
      Lab_b.setBeds(0);
      MainReception_c.setBeds(0);
      Triage_d.setBeds(0);
      MajorsTriage_e.setBeds(0);
      LIATBoothOne_f.setBeds(0);
      MajorsWaitingRoom_g.setBeds(0);
      NonRespiratoryCubicle1_h.setBeds(1);
      NonRespiratoryCubicle2_i.setBeds(1);
      NonRespiratoryCubicle3_j.setBeds(1);
      NonRespiratoryCubicle4_k.setBeds(1);
      NonRespiratoryCubicle5_l.setBeds(1);
      NonRespiratoryCubicle6_m.setBeds(1);
      NonRespiratoryCubicle7_n.setBeds(1);
      NonRespiratoryCubicle8_o.setBeds(1);
      NonRespiratoryCubicle9_p.setBeds(1);
      TaskRoom1_q.setBeds(0);
      TaskRoom2_r.setBeds(0);
      TaskRoom3_s.setBeds(0);
      Entrance_t.setBeds(0);
      XRayRoom1_u.setBeds(0);
      XRayRoom2_v.setBeds(0);
      TriageWaitingRoom_w.setBeds(0);
      MajorsABReception_x.setBeds(0);
      LIATBooth2_y.setBeds(0);
      RespiratoryCubicleA_z.setBeds(1);
      RespiratoryCubicleB_ab.setBeds(1);
      RespiratoryCubicleC_bb.setBeds(1);
      RespiratoryCubicleD_cb.setBeds(1);
      RespiratoryCubicleE_db.setBeds(1);
      RespiratoryCubicleF_eb.setBeds(1);
      RespiratoryCubicleG_fb.setBeds(1);
      RespiratoryCubicleH_gb.setBeds(1);
      RespiratoryCubicleI_hb.setBeds(1);
      RespiratoryCubicleJ_ib.setBeds(1);
      RespiratoryCubicleK_jb.setBeds(1);
      RespiratoryCubicleL_kb.setBeds(1);
      SideRoom_lb.setBeds(0);
      CovidCohort_mb.setBeds(0);
      AmberBay_nb.setBeds(0);
      PreAdmissionArea_ob.setBeds(0);
      NonRespiratoryCohort_pb.setBeds(0);
    } catch (NumberFormatException e) {
    }

    createWallBetween(0, 124, 110, 124, context, space, grid);
    createWallBetween(110, 80, 110, 125, context, space, grid);
    createWallBetween(105, 160, 156, 160, context, space, grid);
    createWallBetween(156, 160, 156, 200, context, space, grid);
    createWallBetween(115, 170, 156, 170, context, space, grid);
    createWallBetween(0, 0, 399, 0, context, space, grid);
    createWallBetween(0, 200, 399, 200, context, space, grid);
    createWallBetween(0, 0, 199, 0, context, space, grid);
    createWallBetween(399, 0, 399, 200, context, space, grid);
    createWallBetween(160, 80, 160, 140, context, space, grid);
    createWallBetween(160, 60, 160, 70, context, space, grid);
    createWallBetween(110, 90, 130, 90, context, space, grid);
    createWallBetween(140, 90, 160, 90, context, space, grid);
    createWallBetween(110, 60, 155, 60, context, space, grid);
    createWallBetween(175, 60, 175, 150, context, space, grid);
    createWallBetween(175, 165, 175, 200, context, space, grid);
    createWallBetween(175, 145, 245, 145, context, space, grid);
    createWallBetween(245, 145, 245, 200, context, space, grid);

    for (Object obj : context) {
      NdPoint pt = space.getLocation(obj);
      grid.moveTo(obj, (int) pt.getX(), (int) pt.getY());
    }

    new NetworkBuilder("CurrentPatientAllocations", context, true).buildNetwork();
    new NetworkBuilder("HistoricalPatientAllocations", context, true).buildNetwork();

    return context;
  }

  public void CreatePatientArrivalMap() {
    HashMap ArrivalPerHour = new HashMap();
    ArrivalPerHour.put(1, 4);
    ArrivalPerHour.put(2, 6);
    ArrivalPerHour.put(3, 6);
    ArrivalPerHour.put(4, 3);
    ArrivalPerHour.put(5, 3);
    ArrivalPerHour.put(6, 7);
    ArrivalPerHour.put(7, 2);
    ArrivalPerHour.put(8, 2);
    ArrivalPerHour.put(9, 5);
    ArrivalPerHour.put(10, 10);
    ArrivalPerHour.put(11, 10);
    ArrivalPerHour.put(12, 13);
    ArrivalPerHour.put(13, 13);
    ArrivalPerHour.put(14, 14);
    ArrivalPerHour.put(15, 15);
    ArrivalPerHour.put(16, 16);
    ArrivalPerHour.put(17, 14);
    ArrivalPerHour.put(18, 13);
    ArrivalPerHour.put(19, 9);
    ArrivalPerHour.put(20, 7);
    ArrivalPerHour.put(21, 8);
    ArrivalPerHour.put(22, 7);
    ArrivalPerHour.put(23, 10);
    ArrivalPerHour.put(24, 3);
    ArrivalPerHour.put(1, 2);
    ArrivalPerHour.put(2, 3);
    ArrivalPerHour.put(3, 4);
    ArrivalPerHour.put(4, 5);
    ArrivalPerHour.put(5, 6);
    ArrivalPerHour.put(6, 3);
    ArrivalPerHour.put(7, 4);
    ArrivalPerHour.put(8, 3);
    ArrivalPerHour.put(9, 5);
    ArrivalPerHour.put(10, 6);
    ArrivalPerHour.put(11, 5);
    ArrivalPerHour.put(12, 3);
    ArrivalPerHour.put(13, 4);
    ArrivalPerHour.put(14, 3);
    ArrivalPerHour.put(15, 4);
    ArrivalPerHour.put(16, 3);
    ArrivalPerHour.put(17, 4);
    ArrivalPerHour.put(18, 3);
    ArrivalPerHour.put(19, 4);
    ArrivalPerHour.put(20, 3);
    ArrivalPerHour.put(21, 4);
    ArrivalPerHour.put(22, 3);
    ArrivalPerHour.put(23, 4);
    ArrivalPerHour.put(24, 3);
    PatientArrivalStore.Initialise((Map<Integer, Integer>) ArrivalPerHour);
  }

  private void createWallBetween(int x1, int y1, int x2, int y2, Context<Object> context, ContinuousSpace<Object> space, Grid<Object> grid) {
    if (x1 == x2) {
      for (int i = y1; i < y2; i++) {
        Wall pWall = new Wall("", context, space, grid, x1, i);
      }
    } else {
      float ratio = (y2 - y1) / (x2 - x1);
      int width = x2 - x1;
      for (int i = 0; i < width; i++) {
        float x = x1 + i;
        float y = y1 + (ratio * i);
        Wall pWall = new Wall("", context, space, grid, ((int) x), ((int) y));
      }

    }
  }
}
