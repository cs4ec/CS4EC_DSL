package EDLanguage.sandbox;

/*Generated by MPS */

import simcore.agents.Actor;
import simcore.action.Behaviour;
import repast.simphony.space.continuous.ContinuousSpace;
import repast.simphony.space.grid.Grid;
import repast.simphony.context.Context;
import simcore.Signals.Signal;
import java.util.List;
import java.util.function.Predicate;
import repast.simphony.space.graph.Network;
import java.util.stream.StreamSupport;
import repast.simphony.space.graph.RepastEdge;
import simcore.basicStructures.Room;
import simcore.basicStructures.RoomType;
import java.util.ArrayList;
import java.util.Comparator;
import simcore.agents.Agent;
import simcore.action.BehaviourStep;
import simcore.Signals.Orders.MoveToOrder;
import repast.simphony.engine.environment.RunEnvironment;
import simcore.basicStructures.Board;
import simcore.action.InstantBehaviourStep;
import repast.simphony.random.RandomHelper;
import simcore.action.PassiveBehaviourStep;
import java.util.Iterator;

public class CubicleNurse extends Actor {

  public Behaviour behaviourBuilder;

  public CubicleNurse(ContinuousSpace<Object> space, Grid<Object> grid, Context<Object> context) {
    super(space, grid, context);
    mintMyMaxPatients = 1;
  }

  protected Signal selectSignal(List<Signal> plstSignals) {
    if (!(plstSignals.isEmpty())) {
      if (plstSignals.stream().filter(new Predicate<Signal>() {
        public boolean test(Signal s) {
          return ((Network) context.getProjection("CurrentPatientAllocations")).getEdge(CubicleNurse.this, s.GetData("patient")) != null;
        }
      }).findFirst().orElse(null) != null) {
        return plstSignals.stream().filter(new Predicate<Signal>() {
          public boolean test(Signal s) {
            return ((Network) context.getProjection("CurrentPatientAllocations")).getEdge(CubicleNurse.this, s.GetData("patient")) != null;
          }
        }).findFirst().orElse(null);
      }
      if (plstSignals.stream().filter(new Predicate<Signal>() {
        public boolean test(Signal s) {
          return StreamSupport.stream(((Network) context.getProjection("CurrentPatientAllocations")).getEdges(s.GetData("patient")).spliterator(), false).filter(new Predicate<RepastEdge<Object>>() {
            public boolean test(RepastEdge<Object> e) {
              return e.getSource().getClass() == CubicleNurse.class;
            }
          }).count() < 1 && ((Network) context.getProjection("CurrentPatientAllocations")).getDegree(CubicleNurse.this) < mintMyMaxPatients;
        }
      }).findFirst().orElse(null) != null) {
        return plstSignals.stream().filter(new Predicate<Signal>() {
          public boolean test(Signal s) {
            return StreamSupport.stream(((Network) context.getProjection("CurrentPatientAllocations")).getEdges(s.GetData("patient")).spliterator(), false).filter(new Predicate<RepastEdge<Object>>() {
              public boolean test(RepastEdge<Object> e) {
                return e.getSource().getClass() == CubicleNurse.class;
              }
            }).count() < 1 && ((Network) context.getProjection("CurrentPatientAllocations")).getDegree(CubicleNurse.this) < mintMyMaxPatients;
          }
        }).findFirst().orElse(null);
      }
    }
    return null;
  }

  protected Room SelectLocation(RoomType pRoomType, Behaviour behaviour) {
    ArrayList<Room> pRooms = (ArrayList<Room>) ReadMap().FindInstancesOfRoomType(pRoomType);
    // First, select the room that contains my patient (if my current action involves the patient) 
    for (Room pRoom : pRooms) {
      if (behaviour.getSignalTrigger() != null && behaviour.getSignalTrigger().GetData("patient") != null && pRoom.getOccupiers().contains(behaviour.getSignalTrigger().GetData("patient"))) {
        return pRoom;
      }
    }
    // If my patient isn't currently in that room, then consider other options 
    Room selectedRoom = pRooms.stream().sorted(new Comparator<Room>() {
      public int compare(Room r1, Room r2) {
        return Double.compare(EvaluateRoomChoice(r1), EvaluateRoomChoice(r2));
      }
    }).filter(new Predicate<Room>() {
      public boolean test(Room r) {
        return EvaluateRoomChoice(r) != Double.MAX_VALUE;
      }
    }).findFirst().orElse(null);
    return selectedRoom;
  }


  protected double EvaluateRoomChoice(Room pRoom) {
    ArrayList<Agent> occupiers = new ArrayList<Agent>(pRoom.getOccupiers());

    if (true) {
      if (pRoom.getOccupiers().stream().anyMatch(new Predicate<Agent>() {
        public boolean test(Agent a) {
          return a.getClass() == patient.class && ((Network) context.getProjection("CurrentPatientAllocations")).getEdge(CubicleNurse.this, a) != null;
        }
      })) {
        return Double.MIN_VALUE;
      }
    }
    if (true) {
      if (pRoom.hasCapacity()) {
        return Double.MIN_VALUE;
      }
    }
    if (true) {
      return (CalcDistance(grid.getLocation(this), grid.getLocation(pRoom)));
    }
    return 0;

  }

  public Behaviour isIdleAction(Signal s) {
    behaviourBuilder = new Behaviour("isIdleAction");
    behaviourBuilder.setSignalTrigger(s);
    ArrayList<BehaviourStep> plstSteps = new ArrayList();
    plstSteps.add(new MoveAction_a0a_23(behaviourBuilder));
    plstSteps.add(new StayAction_b0a_3(behaviourBuilder));
    behaviourBuilder.setSteps(plstSteps);

    Signal sendSignalTemp = new Signal();

    return behaviourBuilder;
  }




  public Behaviour BuildActionFromSignal(Signal s) {
    if (s.GetData("patient") != null) {
      ((Network) context.getProjection("CurrentPatientAllocations")).addEdge(this, s.GetData("patient"));
    }
    switch (s.getName()) {
      case "":
        break;
      case "LFTTrigger_b":
        behaviourBuilder = new Behaviour("LFTTrigger_b");
        this.InitLFT_b(s);
        break;
      case "LFTTrigger_c":
        behaviourBuilder = new Behaviour("LFTTrigger_c");
        this.InitLFT_c(s);
        break;
      case "DecideandapplyPOCTTrigger_d":
        behaviourBuilder = new Behaviour("DecideandapplyPOCTTrigger_d");
        this.InitDecideandapplyPOCT_d(s);
        break;
      case "IfadmittinggotoamberanddoPCRTrigger_e":
        behaviourBuilder = new Behaviour("IfadmittinggotoamberanddoPCRTrigger_e");
        this.InitIfadmittinggotoamberanddoPCR_e(s);
        break;
      case "AdmitAmberTrigger_m":
        behaviourBuilder = new Behaviour("AdmitAmberTrigger_m");
        this.InitAdmitActionAdmitAmber_m(s);
        break;
      case "DischargeTrigger_n":
        behaviourBuilder = new Behaviour("DischargeTrigger_n");
        this.InitDischargeActionDischarge_n(s);
        break;
      case "Wait15Trigger_a":
        behaviourBuilder = new Behaviour("Wait15Trigger_a");
        this.InitWait15_a(s);
        break;
      case "DoneTrigger_b":
        behaviourBuilder = new Behaviour("DoneTrigger_b");
        this.InitDone_b(s);
        break;
      case "TakesampleTrigger_c":
        behaviourBuilder = new Behaviour("TakesampleTrigger_c");
        this.InitTakesample_c(s);
        break;
      case "GetTestResultTrigger_a":
        behaviourBuilder = new Behaviour("GetTestResultTrigger_a");
        this.InitGetTestResult_d(s);
        break;
      case "GetTestResultTrigger_e":
        behaviourBuilder = new Behaviour("GetTestResultTrigger_e");
        this.InitGetTestResult_e(s);
        break;
      case "TakesampleTrigger_a":
        behaviourBuilder = new Behaviour("TakesampleTrigger_a");
        this.InitTakesample_a(s);
        break;
      case "ProcessTestatBoothTrigger_b":
        behaviourBuilder = new Behaviour("ProcessTestatBoothTrigger_b");
        this.InitProcessTestatBooth_b(s);
        break;
      case "CollectSampleTrigger_c":
        behaviourBuilder = new Behaviour("CollectSampleTrigger_c");
        this.InitCollectSample_c(s);
        break;
      default:
        System.out.println("Set mission: " + s.getName() + " failed!");
        return behaviourBuilder;
    }
    return behaviourBuilder;
  }



  public class MoveAction_a0a_7 extends BehaviourStep {
    /*package*/ Behaviour behaviour;
    /*package*/ Object target;
    /*package*/ Object concreteTarget;
    public MoveAction_a0a_7(Behaviour behaviour) {
      target = RespiratoryCubicle.getInstance();
      this.behaviour = behaviour;
    }

    public void execute() {
      if (concreteTarget == null) {
        if (target instanceof RoomType) {
          concreteTarget = SelectLocation(((RoomType) target), behaviour);
        } else {
          concreteTarget = target;
        }
      }

      if (concreteTarget != null) {
        if (target instanceof RoomType) {
          if (EvaluateRoomChoice(((Room) concreteTarget)) == Double.MAX_VALUE) {
            concreteTarget = SelectLocation(((RoomType) target), behaviour);
          }
        }
        MoveTowards(concreteTarget);

      }
    }

    public boolean finishCondition() {
      return concreteTarget != null && ImAt(concreteTarget);
    }
  }
  public class OrderAction_b0a_3 extends BehaviourStep {
    /*package*/ Behaviour behaviour;
    public OrderAction_b0a_3(Behaviour behaviour) {
      this.behaviour = behaviour;
    }

    public void execute() {
      Actor a = (Actor) behaviour.getSignalTrigger().GetData("patient");

      a.TakeOrder(new MoveToOrder().WithDestination(CubicleNurse.this.curInside).andThen(new MoveToOrder().WithDestination(Bed.class)));
    }
  }
  public class StayForConditionAction_c0a_0 extends BehaviourStep {
    /*package*/ Behaviour behaviour;

    public StayForConditionAction_c0a_0(Behaviour behaviour) {
      this.behaviour = behaviour;
    }

    public void execute() {
      // Do nothing 
    }

    public boolean finishCondition() {
      return curInside != null && curInside == ((Actor) behaviour.getSignalTrigger().GetData("patient")).getRoom();
    }
  }
  public class StayAction_d0a extends BehaviourStep {
    /*package*/ Behaviour behaviour;
    /*package*/ int timeExecuted = 0;
    public StayAction_d0a(Behaviour behaviour) {
      this.behaviour = behaviour;
    }

    public void execute() {
      // Do nothing 
      timeExecuted++;
    }

    public boolean finishCondition() {
      return (timeExecuted == (60 / RunEnvironment.getInstance().getParameters().getInteger("SecondsPerTick")));

    }
  }
  public class SendSignalAction_e0a extends BehaviourStep {
    /*package*/ Behaviour behaviour;

    public SendSignalAction_e0a(Behaviour behaviour) {
      this.behaviour = behaviour;
    }

    public void execute() {
      Board b = ReadBoard();
      Signal sendSignalTemp = new Signal();
      sendSignalTemp = new TakesampleTrigger_cSignal();
      sendSignalTemp.AddData("patient", behaviour.getSignalTrigger().GetData("patient"));

      b.PushMission(sendSignalTemp);
    }
  }
  public class StayAction_f0a extends BehaviourStep {
    /*package*/ Behaviour behaviour;
    /*package*/ int timeExecuted = 0;
    public StayAction_f0a(Behaviour behaviour) {
      this.behaviour = behaviour;
    }

    public void execute() {
      // Do nothing 
      timeExecuted++;
    }

    public boolean finishCondition() {
      return (timeExecuted == (60 / RunEnvironment.getInstance().getParameters().getInteger("SecondsPerTick")));

    }
  }
  public class MoveAction_a0a_9 extends BehaviourStep {
    /*package*/ Behaviour behaviour;
    /*package*/ Object target;
    /*package*/ Object concreteTarget;
    public MoveAction_a0a_9(Behaviour behaviour) {
      target = RespiratoryCubicle.getInstance();
      this.behaviour = behaviour;
    }

    public void execute() {
      if (concreteTarget == null) {
        if (target instanceof RoomType) {
          concreteTarget = SelectLocation(((RoomType) target), behaviour);
        } else {
          concreteTarget = target;
        }
      }

      if (concreteTarget != null) {
        if (target instanceof RoomType) {
          if (EvaluateRoomChoice(((Room) concreteTarget)) == Double.MAX_VALUE) {
            concreteTarget = SelectLocation(((RoomType) target), behaviour);
          }
        }
        MoveTowards(concreteTarget);

      }
    }

    public boolean finishCondition() {
      return concreteTarget != null && ImAt(concreteTarget);
    }
  }
  public class OrderAction_b0a_5 extends BehaviourStep {
    /*package*/ Behaviour behaviour;
    public OrderAction_b0a_5(Behaviour behaviour) {
      this.behaviour = behaviour;
    }

    public void execute() {
      Actor a = (Actor) behaviour.getSignalTrigger().GetData("patient");

      a.TakeOrder(new MoveToOrder().WithDestination(CubicleNurse.this.curInside).andThen(new MoveToOrder().WithDestination(Bed.class)));
    }
  }
  public class StayForConditionAction_c0a_2 extends BehaviourStep {
    /*package*/ Behaviour behaviour;

    public StayForConditionAction_c0a_2(Behaviour behaviour) {
      this.behaviour = behaviour;
    }

    public void execute() {
      // Do nothing 
    }

    public boolean finishCondition() {
      return curInside != null && curInside == ((Actor) behaviour.getSignalTrigger().GetData("patient")).getRoom();
    }
  }
  public class StayAction_d0a_1 extends BehaviourStep {
    /*package*/ Behaviour behaviour;
    /*package*/ int timeExecuted = 0;
    public StayAction_d0a_1(Behaviour behaviour) {
      this.behaviour = behaviour;
    }

    public void execute() {
      // Do nothing 
      timeExecuted++;
    }

    public boolean finishCondition() {
      return (timeExecuted == (60 / RunEnvironment.getInstance().getParameters().getInteger("SecondsPerTick")));

    }
  }
  public class SendSignalAction_e0a_1 extends BehaviourStep {
    /*package*/ Behaviour behaviour;

    public SendSignalAction_e0a_1(Behaviour behaviour) {
      this.behaviour = behaviour;
    }

    public void execute() {
      Board b = ReadBoard();
      Signal sendSignalTemp = new Signal();
      sendSignalTemp = new TakesampleTrigger_cSignal();
      sendSignalTemp.AddData("patient", behaviour.getSignalTrigger().GetData("patient"));

      b.PushMission(sendSignalTemp);
    }
  }
  public class StayAction_f0a_1 extends BehaviourStep {
    /*package*/ Behaviour behaviour;
    /*package*/ int timeExecuted = 0;
    public StayAction_f0a_1(Behaviour behaviour) {
      this.behaviour = behaviour;
    }

    public void execute() {
      // Do nothing 
      timeExecuted++;
    }

    public boolean finishCondition() {
      return (timeExecuted == (60 / RunEnvironment.getInstance().getParameters().getInteger("SecondsPerTick")));

    }
  }
  public class MoveAction_a0b extends BehaviourStep {
    /*package*/ Behaviour behaviour;
    /*package*/ Object target;
    /*package*/ Object concreteTarget;
    public MoveAction_a0b(Behaviour behaviour) {
      target = NonRespiratoryCubicle.getInstance();
      this.behaviour = behaviour;
    }

    public void execute() {
      if (concreteTarget == null) {
        if (target instanceof RoomType) {
          concreteTarget = SelectLocation(((RoomType) target), behaviour);
        } else {
          concreteTarget = target;
        }
      }

      if (concreteTarget != null) {
        if (target instanceof RoomType) {
          if (EvaluateRoomChoice(((Room) concreteTarget)) == Double.MAX_VALUE) {
            concreteTarget = SelectLocation(((RoomType) target), behaviour);
          }
        }
        MoveTowards(concreteTarget);

      }
    }

    public boolean finishCondition() {
      return concreteTarget != null && ImAt(concreteTarget);
    }
  }
  public class OrderAction_b0b extends BehaviourStep {
    /*package*/ Behaviour behaviour;
    public OrderAction_b0b(Behaviour behaviour) {
      this.behaviour = behaviour;
    }

    public void execute() {
      Actor a = (Actor) behaviour.getSignalTrigger().GetData("patient");

      a.TakeOrder(new MoveToOrder().WithDestination(CubicleNurse.this.curInside).andThen(new MoveToOrder().WithDestination(Bed.class)));
    }
  }
  public class StayForConditionAction_c0b extends BehaviourStep {
    /*package*/ Behaviour behaviour;

    public StayForConditionAction_c0b(Behaviour behaviour) {
      this.behaviour = behaviour;
    }

    public void execute() {
      // Do nothing 
    }

    public boolean finishCondition() {
      return curInside != null && curInside == ((Actor) behaviour.getSignalTrigger().GetData("patient")).getRoom();
    }
  }
  public class StayAction_d0b extends BehaviourStep {
    /*package*/ Behaviour behaviour;
    /*package*/ int timeExecuted = 0;
    public StayAction_d0b(Behaviour behaviour) {
      this.behaviour = behaviour;
    }

    public void execute() {
      // Do nothing 
      timeExecuted++;
    }

    public boolean finishCondition() {
      return (timeExecuted == (60 / RunEnvironment.getInstance().getParameters().getInteger("SecondsPerTick")));

    }
  }
  public class SendSignalAction_e0b extends BehaviourStep {
    /*package*/ Behaviour behaviour;

    public SendSignalAction_e0b(Behaviour behaviour) {
      this.behaviour = behaviour;
    }

    public void execute() {
      Board b = ReadBoard();
      Signal sendSignalTemp = new Signal();
      sendSignalTemp = new GetTestResultTrigger_eSignal();
      sendSignalTemp.AddData("patient", behaviour.getSignalTrigger().GetData("patient"));

      b.PushMission(sendSignalTemp);
    }
  }
  public class OrderAction_f0b extends BehaviourStep {
    /*package*/ Behaviour behaviour;
    public OrderAction_f0b(Behaviour behaviour) {
      this.behaviour = behaviour;
    }

    public void execute() {
      Actor a = (Actor) behaviour.getSignalTrigger().GetData("patient");

      a.TakeOrder(new MoveToOrder().WithDestination(WaitingRoom.getInstance()));
    }
  }
  public class StayAction_g0b extends BehaviourStep {
    /*package*/ Behaviour behaviour;
    /*package*/ int timeExecuted = 0;
    public StayAction_g0b(Behaviour behaviour) {
      this.behaviour = behaviour;
    }

    public void execute() {
      // Do nothing 
      timeExecuted++;
    }

    public boolean finishCondition() {
      return (timeExecuted == (60 / RunEnvironment.getInstance().getParameters().getInteger("SecondsPerTick")));

    }
  }
  public class MoveAction_a0b_1 extends BehaviourStep {
    /*package*/ Behaviour behaviour;
    /*package*/ Object target;
    /*package*/ Object concreteTarget;
    public MoveAction_a0b_1(Behaviour behaviour) {
      target = NonRespiratoryCubicle.getInstance();
      this.behaviour = behaviour;
    }

    public void execute() {
      if (concreteTarget == null) {
        if (target instanceof RoomType) {
          concreteTarget = SelectLocation(((RoomType) target), behaviour);
        } else {
          concreteTarget = target;
        }
      }

      if (concreteTarget != null) {
        if (target instanceof RoomType) {
          if (EvaluateRoomChoice(((Room) concreteTarget)) == Double.MAX_VALUE) {
            concreteTarget = SelectLocation(((RoomType) target), behaviour);
          }
        }
        MoveTowards(concreteTarget);

      }
    }

    public boolean finishCondition() {
      return concreteTarget != null && ImAt(concreteTarget);
    }
  }
  public class OrderAction_b0b_1 extends BehaviourStep {
    /*package*/ Behaviour behaviour;
    public OrderAction_b0b_1(Behaviour behaviour) {
      this.behaviour = behaviour;
    }

    public void execute() {
      Actor a = (Actor) behaviour.getSignalTrigger().GetData("patient");

      a.TakeOrder(new MoveToOrder().WithDestination(CubicleNurse.this.curInside).andThen(new MoveToOrder().WithDestination(Bed.class)));
    }
  }
  public class StayForConditionAction_c0b_0 extends BehaviourStep {
    /*package*/ Behaviour behaviour;

    public StayForConditionAction_c0b_0(Behaviour behaviour) {
      this.behaviour = behaviour;
    }

    public void execute() {
      // Do nothing 
    }

    public boolean finishCondition() {
      return curInside != null && curInside == ((Actor) behaviour.getSignalTrigger().GetData("patient")).getRoom();
    }
  }
  public class StayAction_d0b_1 extends BehaviourStep {
    /*package*/ Behaviour behaviour;
    /*package*/ int timeExecuted = 0;
    public StayAction_d0b_1(Behaviour behaviour) {
      this.behaviour = behaviour;
    }

    public void execute() {
      // Do nothing 
      timeExecuted++;
    }

    public boolean finishCondition() {
      return (timeExecuted == (60 / RunEnvironment.getInstance().getParameters().getInteger("SecondsPerTick")));

    }
  }
  public class SendSignalAction_e0b_1 extends BehaviourStep {
    /*package*/ Behaviour behaviour;

    public SendSignalAction_e0b_1(Behaviour behaviour) {
      this.behaviour = behaviour;
    }

    public void execute() {
      Board b = ReadBoard();
      Signal sendSignalTemp = new Signal();
      sendSignalTemp = new GetTestResultTrigger_eSignal();
      sendSignalTemp.AddData("patient", behaviour.getSignalTrigger().GetData("patient"));

      b.PushMission(sendSignalTemp);
    }
  }
  public class OrderAction_f0b_1 extends BehaviourStep {
    /*package*/ Behaviour behaviour;
    public OrderAction_f0b_1(Behaviour behaviour) {
      this.behaviour = behaviour;
    }

    public void execute() {
      Actor a = (Actor) behaviour.getSignalTrigger().GetData("patient");

      a.TakeOrder(new MoveToOrder().WithDestination(WaitingRoom.getInstance()));
    }
  }
  public class StayAction_g0b_1 extends BehaviourStep {
    /*package*/ Behaviour behaviour;
    /*package*/ int timeExecuted = 0;
    public StayAction_g0b_1(Behaviour behaviour) {
      this.behaviour = behaviour;
    }

    public void execute() {
      // Do nothing 
      timeExecuted++;
    }

    public boolean finishCondition() {
      return (timeExecuted == (60 / RunEnvironment.getInstance().getParameters().getInteger("SecondsPerTick")));

    }
  }
  public class MoveAction_a0c extends BehaviourStep {
    /*package*/ Behaviour behaviour;
    /*package*/ Object target;
    /*package*/ Object concreteTarget;
    public MoveAction_a0c(Behaviour behaviour) {
      target = RespiratoryCubicle.getInstance();
      this.behaviour = behaviour;
    }

    public void execute() {
      if (concreteTarget == null) {
        if (target instanceof RoomType) {
          concreteTarget = SelectLocation(((RoomType) target), behaviour);
        } else {
          concreteTarget = target;
        }
      }

      if (concreteTarget != null) {
        if (target instanceof RoomType) {
          if (EvaluateRoomChoice(((Room) concreteTarget)) == Double.MAX_VALUE) {
            concreteTarget = SelectLocation(((RoomType) target), behaviour);
          }
        }
        MoveTowards(concreteTarget);

      }
    }

    public boolean finishCondition() {
      return concreteTarget != null && ImAt(concreteTarget);
    }
  }
  public class OrderAction_b0c extends BehaviourStep {
    /*package*/ Behaviour behaviour;
    public OrderAction_b0c(Behaviour behaviour) {
      this.behaviour = behaviour;
    }

    public void execute() {
      Actor a = (Actor) behaviour.getSignalTrigger().GetData("patient");

      a.TakeOrder(new MoveToOrder().WithDestination(CubicleNurse.this.curInside).andThen(new MoveToOrder().WithDestination(Bed.class)));
    }
  }
  public class StayForConditionAction_c0c extends BehaviourStep {
    /*package*/ Behaviour behaviour;

    public StayForConditionAction_c0c(Behaviour behaviour) {
      this.behaviour = behaviour;
    }

    public void execute() {
      // Do nothing 
    }

    public boolean finishCondition() {
      return curInside != null && curInside == ((Actor) behaviour.getSignalTrigger().GetData("patient")).getRoom();
    }
  }
  public class ProbabilityDistribution_d0c extends InstantBehaviourStep {
    /*package*/ Behaviour behaviour;
    public ProbabilityDistribution_d0c(Behaviour behaviour) {
      this.behaviour = behaviour;
    }

    public void execute() {
      double rndDouble = RandomHelper.nextDouble();

      if (rndDouble < ((95) / 100)) {

        ArrayList<BehaviourStep> plstSteps = new ArrayList();
        plstSteps.add(new UseAction_a0b3a2(behaviour));
        plstSteps.add(new StayAction_b0b3a2(behaviour));
        plstSteps.add(new Choice_c0b3a2(behaviour));
        plstSteps.add(new Choice_d0b3a2(behaviour));
        plstSteps.add(new Choice_e0b3a2(behaviour));
        behaviour.injectSteps(plstSteps);

      } else if (rndDouble < ((5 + 95.0) / 100)) {
        ArrayList<BehaviourStep> plstSteps = new ArrayList();
        plstSteps.add(new UseAction_a0a3a2(behaviour));
        plstSteps.add(new StayAction_b0a3a2(behaviour));
        plstSteps.add(new Choice_c0a3a2(behaviour));
        plstSteps.add(new Choice_d0a3a2(behaviour));
        plstSteps.add(new Choice_e0a3a2(behaviour));
        behaviour.injectSteps(plstSteps);
      }

    }
  }
  public class Choice_e0c extends InstantBehaviourStep {
    /*package*/ Behaviour behaviour;
    public Choice_e0c(Behaviour behaviour) {
      this.behaviour = behaviour;
    }

    public void execute() {
      if (((patient) behaviour.getSignalTrigger().GetData("patient")).LIATCOVIDResult == "Negative" || ((patient) behaviour.getSignalTrigger().GetData("patient")).CepheidCOVIDResult == "Negative" || ((patient) behaviour.getSignalTrigger().GetData("patient")).LabPCRCOVIDResult == "Negative") {
        ArrayList<BehaviourStep> plstSteps = new ArrayList();
        plstSteps.add(new SendSignalAction_a0e0c(behaviour));
        behaviour.injectSteps(plstSteps);
      } else {
        ArrayList<BehaviourStep> plstSteps = new ArrayList();
        behaviour.injectSteps(plstSteps);
      }
    }
  }
  public class Choice_f0c extends InstantBehaviourStep {
    /*package*/ Behaviour behaviour;
    public Choice_f0c(Behaviour behaviour) {
      this.behaviour = behaviour;
    }

    public void execute() {
      if (((patient) behaviour.getSignalTrigger().GetData("patient")).LIATCOVIDResult == "Positive" || ((patient) behaviour.getSignalTrigger().GetData("patient")).CepheidCOVIDResult == "Positive" || ((patient) behaviour.getSignalTrigger().GetData("patient")).LabPCRCOVIDResult == "Positive") {
        ArrayList<BehaviourStep> plstSteps = new ArrayList();
        plstSteps.add(new SendSignalAction_a0f0c(behaviour));
        behaviour.injectSteps(plstSteps);
      } else {
        ArrayList<BehaviourStep> plstSteps = new ArrayList();
        behaviour.injectSteps(plstSteps);
      }
    }
  }
  public class Choice_g0c extends InstantBehaviourStep {
    /*package*/ Behaviour behaviour;
    public Choice_g0c(Behaviour behaviour) {
      this.behaviour = behaviour;
    }

    public void execute() {
      if (((patient) behaviour.getSignalTrigger().GetData("patient")).Severity == "low") {
        ArrayList<BehaviourStep> plstSteps = new ArrayList();
        plstSteps.add(new SendSignalAction_a0g0c(behaviour));
        behaviour.injectSteps(plstSteps);
      } else {
        ArrayList<BehaviourStep> plstSteps = new ArrayList();
        behaviour.injectSteps(plstSteps);
      }
    }
  }
  public class StayAction_h0c extends BehaviourStep {
    /*package*/ Behaviour behaviour;
    /*package*/ int timeExecuted = 0;
    public StayAction_h0c(Behaviour behaviour) {
      this.behaviour = behaviour;
    }

    public void execute() {
      // Do nothing 
      timeExecuted++;
    }

    public boolean finishCondition() {
      return (timeExecuted == (60 / RunEnvironment.getInstance().getParameters().getInteger("SecondsPerTick")));

    }
  }
  public class MoveAction_a0c_5 extends BehaviourStep {
    /*package*/ Behaviour behaviour;
    /*package*/ Object target;
    /*package*/ Object concreteTarget;
    public MoveAction_a0c_5(Behaviour behaviour) {
      target = RespiratoryCubicle.getInstance();
      this.behaviour = behaviour;
    }

    public void execute() {
      if (concreteTarget == null) {
        if (target instanceof RoomType) {
          concreteTarget = SelectLocation(((RoomType) target), behaviour);
        } else {
          concreteTarget = target;
        }
      }

      if (concreteTarget != null) {
        if (target instanceof RoomType) {
          if (EvaluateRoomChoice(((Room) concreteTarget)) == Double.MAX_VALUE) {
            concreteTarget = SelectLocation(((RoomType) target), behaviour);
          }
        }
        MoveTowards(concreteTarget);

      }
    }

    public boolean finishCondition() {
      return concreteTarget != null && ImAt(concreteTarget);
    }
  }
  public class OrderAction_b0c_5 extends BehaviourStep {
    /*package*/ Behaviour behaviour;
    public OrderAction_b0c_5(Behaviour behaviour) {
      this.behaviour = behaviour;
    }

    public void execute() {
      Actor a = (Actor) behaviour.getSignalTrigger().GetData("patient");

      a.TakeOrder(new MoveToOrder().WithDestination(CubicleNurse.this.curInside).andThen(new MoveToOrder().WithDestination(Bed.class)));
    }
  }
  public class StayForConditionAction_c0c_2 extends BehaviourStep {
    /*package*/ Behaviour behaviour;

    public StayForConditionAction_c0c_2(Behaviour behaviour) {
      this.behaviour = behaviour;
    }

    public void execute() {
      // Do nothing 
    }

    public boolean finishCondition() {
      return curInside != null && curInside == ((Actor) behaviour.getSignalTrigger().GetData("patient")).getRoom();
    }
  }
  public class ProbabilityDistribution_d0c_1 extends InstantBehaviourStep {
    /*package*/ Behaviour behaviour;
    public ProbabilityDistribution_d0c_1(Behaviour behaviour) {
      this.behaviour = behaviour;
    }

    public void execute() {
      double rndDouble = RandomHelper.nextDouble();

      if (rndDouble < ((95) / 100)) {

        ArrayList<BehaviourStep> plstSteps = new ArrayList();
        plstSteps.add(new UseAction_a0b3a2(behaviour));
        plstSteps.add(new StayAction_b0b3a2(behaviour));
        plstSteps.add(new Choice_c0b3a2(behaviour));
        plstSteps.add(new Choice_d0b3a2(behaviour));
        plstSteps.add(new Choice_e0b3a2(behaviour));
        behaviour.injectSteps(plstSteps);

      } else if (rndDouble < ((5 + 95.0) / 100)) {
        ArrayList<BehaviourStep> plstSteps = new ArrayList();
        plstSteps.add(new UseAction_a0a3a2(behaviour));
        plstSteps.add(new StayAction_b0a3a2(behaviour));
        plstSteps.add(new Choice_c0a3a2(behaviour));
        plstSteps.add(new Choice_d0a3a2(behaviour));
        plstSteps.add(new Choice_e0a3a2(behaviour));
        behaviour.injectSteps(plstSteps);
      }

    }
  }
  public class UseAction_a0a3a2 extends InstantBehaviourStep {
    /*package*/ Behaviour behaviour;
    public UseAction_a0a3a2(Behaviour behaviour) {
      this.behaviour = behaviour;
    }

    public void execute() {

      ((Room) ToolBox().ReadMap().getCurrentRoom(CubicleNurse.this)).getParentArea().decrementResource(LIAT.getInstance());
    }
  }
  public class StayAction_b0a3a2 extends PassiveBehaviourStep {
    /*package*/ Behaviour behaviour;
    /*package*/ int testingTime = LIATExecutionTimeMap.getInstance().getProcessingTime();
    /*package*/ int timeExecuted = 0;
    public StayAction_b0a3a2(Behaviour behaviour) {
      this.behaviour = behaviour;
    }

    public void execute() {
      // Do nothing 
      timeExecuted++;
    }

    public boolean finishCondition() {
      return timeExecuted == testingTime;
    }
  }
  public class Choice_c0a3a2 extends InstantBehaviourStep {
    /*package*/ Behaviour behaviour;
    public Choice_c0a3a2(Behaviour behaviour) {
      this.behaviour = behaviour;
    }

    public void execute() {
      if ((((patient) behaviour.getSignalTrigger().GetData("patient")).COVIDInfectionStatus == "Symptomatic") || (((patient) behaviour.getSignalTrigger().GetData("patient")).COVIDInfectionStatus == "Asymptomatic")) {
        ArrayList<BehaviourStep> plstSteps = new ArrayList();
        plstSteps.add(new Choice_a0c0a3a2(behaviour));
        behaviour.injectSteps(plstSteps);
      } else {
        ArrayList<BehaviourStep> plstSteps = new ArrayList();
        plstSteps.add(new Choice_a0c0a3a2_3(behaviour));
        behaviour.injectSteps(plstSteps);
      }
    }
  }
  public class Choice_d0a3a2 extends InstantBehaviourStep {
    /*package*/ Behaviour behaviour;
    public Choice_d0a3a2(Behaviour behaviour) {
      this.behaviour = behaviour;
    }

    public void execute() {
      if ((((patient) behaviour.getSignalTrigger().GetData("patient")).FluAInfectionStatus == "Symptomatic") || (((patient) behaviour.getSignalTrigger().GetData("patient")).FluAInfectionStatus == "Asymptomatic")) {
        ArrayList<BehaviourStep> plstSteps = new ArrayList();
        plstSteps.add(new Choice_a0d0a3a2(behaviour));
        behaviour.injectSteps(plstSteps);
      } else {
        ArrayList<BehaviourStep> plstSteps = new ArrayList();
        plstSteps.add(new Choice_a0d0a3a2_3(behaviour));
        behaviour.injectSteps(plstSteps);
      }
    }
  }
  public class Choice_e0a3a2 extends InstantBehaviourStep {
    /*package*/ Behaviour behaviour;
    public Choice_e0a3a2(Behaviour behaviour) {
      this.behaviour = behaviour;
    }

    public void execute() {
      if ((((patient) behaviour.getSignalTrigger().GetData("patient")).FluBInfectionStatus == "Symptomatic") || (((patient) behaviour.getSignalTrigger().GetData("patient")).FluBInfectionStatus == "Asymptomatic")) {
        ArrayList<BehaviourStep> plstSteps = new ArrayList();
        plstSteps.add(new Choice_a0e0a3a2(behaviour));
        behaviour.injectSteps(plstSteps);
      } else {
        ArrayList<BehaviourStep> plstSteps = new ArrayList();
        plstSteps.add(new Choice_a0e0a3a2_3(behaviour));
        behaviour.injectSteps(plstSteps);
      }
    }
  }
  public class UseAction_a0a3a2_0 extends InstantBehaviourStep {
    /*package*/ Behaviour behaviour;
    public UseAction_a0a3a2_0(Behaviour behaviour) {
      this.behaviour = behaviour;
    }

    public void execute() {

      ((Room) ToolBox().ReadMap().getCurrentRoom(CubicleNurse.this)).getParentArea().decrementResource(LIAT.getInstance());
    }
  }
  public class StayAction_b0a3a2_1 extends PassiveBehaviourStep {
    /*package*/ Behaviour behaviour;
    /*package*/ int testingTime = LIATExecutionTimeMap.getInstance().getProcessingTime();
    /*package*/ int timeExecuted = 0;
    public StayAction_b0a3a2_1(Behaviour behaviour) {
      this.behaviour = behaviour;
    }

    public void execute() {
      // Do nothing 
      timeExecuted++;
    }

    public boolean finishCondition() {
      return timeExecuted == testingTime;
    }
  }
  public class Choice_c0a3a2_1 extends InstantBehaviourStep {
    /*package*/ Behaviour behaviour;
    public Choice_c0a3a2_1(Behaviour behaviour) {
      this.behaviour = behaviour;
    }

    public void execute() {
      if ((((patient) behaviour.getSignalTrigger().GetData("patient")).COVIDInfectionStatus == "Symptomatic") || (((patient) behaviour.getSignalTrigger().GetData("patient")).COVIDInfectionStatus == "Asymptomatic")) {
        ArrayList<BehaviourStep> plstSteps = new ArrayList();
        plstSteps.add(new Choice_a0c0a3a2(behaviour));
        behaviour.injectSteps(plstSteps);
      } else {
        ArrayList<BehaviourStep> plstSteps = new ArrayList();
        plstSteps.add(new Choice_a0c0a3a2_3(behaviour));
        behaviour.injectSteps(plstSteps);
      }
    }
  }
  public class Choice_a0c0a3a2 extends InstantBehaviourStep {
    /*package*/ Behaviour behaviour;
    public Choice_a0c0a3a2(Behaviour behaviour) {
      this.behaviour = behaviour;
    }

    public void execute() {
      if (Dice(RunEnvironment.getInstance().getParameters().getDouble("LIATCOVIDSensitivity"))) {
        ArrayList<BehaviourStep> plstSteps = new ArrayList();
        plstSteps.add(new Consequence_a0a0c0a3a2(behaviour));
        behaviour.injectSteps(plstSteps);
      } else {
        ArrayList<BehaviourStep> plstSteps = new ArrayList();
        plstSteps.add(new Consequence_a0a0c0a3a2_1(behaviour));
        behaviour.injectSteps(plstSteps);
      }
    }
  }
  public class Choice_a0c0a3a2_1 extends InstantBehaviourStep {
    /*package*/ Behaviour behaviour;
    public Choice_a0c0a3a2_1(Behaviour behaviour) {
      this.behaviour = behaviour;
    }

    public void execute() {
      if (Dice(RunEnvironment.getInstance().getParameters().getDouble("LIATCOVIDSensitivity"))) {
        ArrayList<BehaviourStep> plstSteps = new ArrayList();
        plstSteps.add(new Consequence_a0a0c0a3a2(behaviour));
        behaviour.injectSteps(plstSteps);
      } else {
        ArrayList<BehaviourStep> plstSteps = new ArrayList();
        plstSteps.add(new Consequence_a0a0c0a3a2_1(behaviour));
        behaviour.injectSteps(plstSteps);
      }
    }
  }
  public class Consequence_a0a0c0a3a2 extends InstantBehaviourStep {
    /*package*/ Behaviour behaviour;
    public Consequence_a0a0c0a3a2(Behaviour behaviour) {
      this.behaviour = behaviour;
    }

    public void execute() {
      ((patient) behaviour.getSignalTrigger().GetData("patient")).LIATCOVIDResult = "Positive";

    }
  }
  public class Consequence_a0a0c0a3a2_0 extends InstantBehaviourStep {
    /*package*/ Behaviour behaviour;
    public Consequence_a0a0c0a3a2_0(Behaviour behaviour) {
      this.behaviour = behaviour;
    }

    public void execute() {
      ((patient) behaviour.getSignalTrigger().GetData("patient")).LIATCOVIDResult = "Positive";

    }
  }
  public class Consequence_a0a0c0a3a2_1 extends InstantBehaviourStep {
    /*package*/ Behaviour behaviour;
    public Consequence_a0a0c0a3a2_1(Behaviour behaviour) {
      this.behaviour = behaviour;
    }

    public void execute() {
      ((patient) behaviour.getSignalTrigger().GetData("patient")).LIATCOVIDResult = "Negative";

    }
  }
  public class Consequence_a0a0c0a3a2_2 extends InstantBehaviourStep {
    /*package*/ Behaviour behaviour;
    public Consequence_a0a0c0a3a2_2(Behaviour behaviour) {
      this.behaviour = behaviour;
    }

    public void execute() {
      ((patient) behaviour.getSignalTrigger().GetData("patient")).LIATCOVIDResult = "Negative";

    }
  }
  public class Choice_a0c0a3a2_3 extends InstantBehaviourStep {
    /*package*/ Behaviour behaviour;
    public Choice_a0c0a3a2_3(Behaviour behaviour) {
      this.behaviour = behaviour;
    }

    public void execute() {
      if (Dice(RunEnvironment.getInstance().getParameters().getDouble("LIATCOVIDSpecificity"))) {
        ArrayList<BehaviourStep> plstSteps = new ArrayList();
        plstSteps.add(new Consequence_a0a0c0a3a2_3(behaviour));
        behaviour.injectSteps(plstSteps);
      } else {
        ArrayList<BehaviourStep> plstSteps = new ArrayList();
        plstSteps.add(new Consequence_a0a0c0a3a2_5(behaviour));
        behaviour.injectSteps(plstSteps);
      }
    }
  }
  public class Choice_a0c0a3a2_5 extends InstantBehaviourStep {
    /*package*/ Behaviour behaviour;
    public Choice_a0c0a3a2_5(Behaviour behaviour) {
      this.behaviour = behaviour;
    }

    public void execute() {
      if (Dice(RunEnvironment.getInstance().getParameters().getDouble("LIATCOVIDSpecificity"))) {
        ArrayList<BehaviourStep> plstSteps = new ArrayList();
        plstSteps.add(new Consequence_a0a0c0a3a2_3(behaviour));
        behaviour.injectSteps(plstSteps);
      } else {
        ArrayList<BehaviourStep> plstSteps = new ArrayList();
        plstSteps.add(new Consequence_a0a0c0a3a2_5(behaviour));
        behaviour.injectSteps(plstSteps);
      }
    }
  }
  public class Consequence_a0a0c0a3a2_3 extends InstantBehaviourStep {
    /*package*/ Behaviour behaviour;
    public Consequence_a0a0c0a3a2_3(Behaviour behaviour) {
      this.behaviour = behaviour;
    }

    public void execute() {
      ((patient) behaviour.getSignalTrigger().GetData("patient")).LIATCOVIDResult = "Negative";

    }
  }
  public class Consequence_a0a0c0a3a2_4 extends InstantBehaviourStep {
    /*package*/ Behaviour behaviour;
    public Consequence_a0a0c0a3a2_4(Behaviour behaviour) {
      this.behaviour = behaviour;
    }

    public void execute() {
      ((patient) behaviour.getSignalTrigger().GetData("patient")).LIATCOVIDResult = "Negative";

    }
  }
  public class Consequence_a0a0c0a3a2_5 extends InstantBehaviourStep {
    /*package*/ Behaviour behaviour;
    public Consequence_a0a0c0a3a2_5(Behaviour behaviour) {
      this.behaviour = behaviour;
    }

    public void execute() {
      ((patient) behaviour.getSignalTrigger().GetData("patient")).LIATCOVIDResult = "Positive";

    }
  }
  public class Consequence_a0a0c0a3a2_6 extends InstantBehaviourStep {
    /*package*/ Behaviour behaviour;
    public Consequence_a0a0c0a3a2_6(Behaviour behaviour) {
      this.behaviour = behaviour;
    }

    public void execute() {
      ((patient) behaviour.getSignalTrigger().GetData("patient")).LIATCOVIDResult = "Positive";

    }
  }
  public class Choice_d0a3a2_1 extends InstantBehaviourStep {
    /*package*/ Behaviour behaviour;
    public Choice_d0a3a2_1(Behaviour behaviour) {
      this.behaviour = behaviour;
    }

    public void execute() {
      if ((((patient) behaviour.getSignalTrigger().GetData("patient")).FluAInfectionStatus == "Symptomatic") || (((patient) behaviour.getSignalTrigger().GetData("patient")).FluAInfectionStatus == "Asymptomatic")) {
        ArrayList<BehaviourStep> plstSteps = new ArrayList();
        plstSteps.add(new Choice_a0d0a3a2(behaviour));
        behaviour.injectSteps(plstSteps);
      } else {
        ArrayList<BehaviourStep> plstSteps = new ArrayList();
        plstSteps.add(new Choice_a0d0a3a2_3(behaviour));
        behaviour.injectSteps(plstSteps);
      }
    }
  }
  public class Choice_a0d0a3a2 extends InstantBehaviourStep {
    /*package*/ Behaviour behaviour;
    public Choice_a0d0a3a2(Behaviour behaviour) {
      this.behaviour = behaviour;
    }

    public void execute() {
      if (Dice(RunEnvironment.getInstance().getParameters().getDouble("LIATFluASensitivity"))) {
        ArrayList<BehaviourStep> plstSteps = new ArrayList();
        plstSteps.add(new Consequence_a0a0d0a3a2(behaviour));
        behaviour.injectSteps(plstSteps);
      } else {
        ArrayList<BehaviourStep> plstSteps = new ArrayList();
        plstSteps.add(new Consequence_a0a0d0a3a2_1(behaviour));
        behaviour.injectSteps(plstSteps);
      }
    }
  }
  public class Choice_a0d0a3a2_1 extends InstantBehaviourStep {
    /*package*/ Behaviour behaviour;
    public Choice_a0d0a3a2_1(Behaviour behaviour) {
      this.behaviour = behaviour;
    }

    public void execute() {
      if (Dice(RunEnvironment.getInstance().getParameters().getDouble("LIATFluASensitivity"))) {
        ArrayList<BehaviourStep> plstSteps = new ArrayList();
        plstSteps.add(new Consequence_a0a0d0a3a2(behaviour));
        behaviour.injectSteps(plstSteps);
      } else {
        ArrayList<BehaviourStep> plstSteps = new ArrayList();
        plstSteps.add(new Consequence_a0a0d0a3a2_1(behaviour));
        behaviour.injectSteps(plstSteps);
      }
    }
  }
  public class Consequence_a0a0d0a3a2 extends InstantBehaviourStep {
    /*package*/ Behaviour behaviour;
    public Consequence_a0a0d0a3a2(Behaviour behaviour) {
      this.behaviour = behaviour;
    }

    public void execute() {
      ((patient) behaviour.getSignalTrigger().GetData("patient")).LIATFluAResult = "Positive";

    }
  }
  public class Consequence_a0a0d0a3a2_0 extends InstantBehaviourStep {
    /*package*/ Behaviour behaviour;
    public Consequence_a0a0d0a3a2_0(Behaviour behaviour) {
      this.behaviour = behaviour;
    }

    public void execute() {
      ((patient) behaviour.getSignalTrigger().GetData("patient")).LIATFluAResult = "Positive";

    }
  }
  public class Consequence_a0a0d0a3a2_1 extends InstantBehaviourStep {
    /*package*/ Behaviour behaviour;
    public Consequence_a0a0d0a3a2_1(Behaviour behaviour) {
      this.behaviour = behaviour;
    }

    public void execute() {
      ((patient) behaviour.getSignalTrigger().GetData("patient")).LIATFluAResult = "Negative";

    }
  }
  public class Consequence_a0a0d0a3a2_2 extends InstantBehaviourStep {
    /*package*/ Behaviour behaviour;
    public Consequence_a0a0d0a3a2_2(Behaviour behaviour) {
      this.behaviour = behaviour;
    }

    public void execute() {
      ((patient) behaviour.getSignalTrigger().GetData("patient")).LIATFluAResult = "Negative";

    }
  }
  public class Choice_a0d0a3a2_3 extends InstantBehaviourStep {
    /*package*/ Behaviour behaviour;
    public Choice_a0d0a3a2_3(Behaviour behaviour) {
      this.behaviour = behaviour;
    }

    public void execute() {
      if (Dice(RunEnvironment.getInstance().getParameters().getDouble("LIATFluASpecificity"))) {
        ArrayList<BehaviourStep> plstSteps = new ArrayList();
        plstSteps.add(new Consequence_a0a0d0a3a2_3(behaviour));
        behaviour.injectSteps(plstSteps);
      } else {
        ArrayList<BehaviourStep> plstSteps = new ArrayList();
        plstSteps.add(new Consequence_a0a0d0a3a2_5(behaviour));
        behaviour.injectSteps(plstSteps);
      }
    }
  }
  public class Choice_a0d0a3a2_5 extends InstantBehaviourStep {
    /*package*/ Behaviour behaviour;
    public Choice_a0d0a3a2_5(Behaviour behaviour) {
      this.behaviour = behaviour;
    }

    public void execute() {
      if (Dice(RunEnvironment.getInstance().getParameters().getDouble("LIATFluASpecificity"))) {
        ArrayList<BehaviourStep> plstSteps = new ArrayList();
        plstSteps.add(new Consequence_a0a0d0a3a2_3(behaviour));
        behaviour.injectSteps(plstSteps);
      } else {
        ArrayList<BehaviourStep> plstSteps = new ArrayList();
        plstSteps.add(new Consequence_a0a0d0a3a2_5(behaviour));
        behaviour.injectSteps(plstSteps);
      }
    }
  }
  public class Consequence_a0a0d0a3a2_3 extends InstantBehaviourStep {
    /*package*/ Behaviour behaviour;
    public Consequence_a0a0d0a3a2_3(Behaviour behaviour) {
      this.behaviour = behaviour;
    }

    public void execute() {
      ((patient) behaviour.getSignalTrigger().GetData("patient")).LIATFluAResult = "Negative";

    }
  }
  public class Consequence_a0a0d0a3a2_4 extends InstantBehaviourStep {
    /*package*/ Behaviour behaviour;
    public Consequence_a0a0d0a3a2_4(Behaviour behaviour) {
      this.behaviour = behaviour;
    }

    public void execute() {
      ((patient) behaviour.getSignalTrigger().GetData("patient")).LIATFluAResult = "Negative";

    }
  }
  public class Consequence_a0a0d0a3a2_5 extends InstantBehaviourStep {
    /*package*/ Behaviour behaviour;
    public Consequence_a0a0d0a3a2_5(Behaviour behaviour) {
      this.behaviour = behaviour;
    }

    public void execute() {
      ((patient) behaviour.getSignalTrigger().GetData("patient")).LIATFluAResult = "Positive";

    }
  }
  public class Consequence_a0a0d0a3a2_6 extends InstantBehaviourStep {
    /*package*/ Behaviour behaviour;
    public Consequence_a0a0d0a3a2_6(Behaviour behaviour) {
      this.behaviour = behaviour;
    }

    public void execute() {
      ((patient) behaviour.getSignalTrigger().GetData("patient")).LIATFluAResult = "Positive";

    }
  }
  public class Choice_e0a3a2_1 extends InstantBehaviourStep {
    /*package*/ Behaviour behaviour;
    public Choice_e0a3a2_1(Behaviour behaviour) {
      this.behaviour = behaviour;
    }

    public void execute() {
      if ((((patient) behaviour.getSignalTrigger().GetData("patient")).FluBInfectionStatus == "Symptomatic") || (((patient) behaviour.getSignalTrigger().GetData("patient")).FluBInfectionStatus == "Asymptomatic")) {
        ArrayList<BehaviourStep> plstSteps = new ArrayList();
        plstSteps.add(new Choice_a0e0a3a2(behaviour));
        behaviour.injectSteps(plstSteps);
      } else {
        ArrayList<BehaviourStep> plstSteps = new ArrayList();
        plstSteps.add(new Choice_a0e0a3a2_3(behaviour));
        behaviour.injectSteps(plstSteps);
      }
    }
  }
  public class Choice_a0e0a3a2 extends InstantBehaviourStep {
    /*package*/ Behaviour behaviour;
    public Choice_a0e0a3a2(Behaviour behaviour) {
      this.behaviour = behaviour;
    }

    public void execute() {
      if (Dice(RunEnvironment.getInstance().getParameters().getDouble("LIATFluBSensitivity"))) {
        ArrayList<BehaviourStep> plstSteps = new ArrayList();
        plstSteps.add(new Consequence_a0a0e0a3a2(behaviour));
        behaviour.injectSteps(plstSteps);
      } else {
        ArrayList<BehaviourStep> plstSteps = new ArrayList();
        plstSteps.add(new Consequence_a0a0e0a3a2_1(behaviour));
        behaviour.injectSteps(plstSteps);
      }
    }
  }
  public class Choice_a0e0a3a2_1 extends InstantBehaviourStep {
    /*package*/ Behaviour behaviour;
    public Choice_a0e0a3a2_1(Behaviour behaviour) {
      this.behaviour = behaviour;
    }

    public void execute() {
      if (Dice(RunEnvironment.getInstance().getParameters().getDouble("LIATFluBSensitivity"))) {
        ArrayList<BehaviourStep> plstSteps = new ArrayList();
        plstSteps.add(new Consequence_a0a0e0a3a2(behaviour));
        behaviour.injectSteps(plstSteps);
      } else {
        ArrayList<BehaviourStep> plstSteps = new ArrayList();
        plstSteps.add(new Consequence_a0a0e0a3a2_1(behaviour));
        behaviour.injectSteps(plstSteps);
      }
    }
  }
  public class Consequence_a0a0e0a3a2 extends InstantBehaviourStep {
    /*package*/ Behaviour behaviour;
    public Consequence_a0a0e0a3a2(Behaviour behaviour) {
      this.behaviour = behaviour;
    }

    public void execute() {
      ((patient) behaviour.getSignalTrigger().GetData("patient")).LIATFluBResult = "Positive";

    }
  }
  public class Consequence_a0a0e0a3a2_0 extends InstantBehaviourStep {
    /*package*/ Behaviour behaviour;
    public Consequence_a0a0e0a3a2_0(Behaviour behaviour) {
      this.behaviour = behaviour;
    }

    public void execute() {
      ((patient) behaviour.getSignalTrigger().GetData("patient")).LIATFluBResult = "Positive";

    }
  }
  public class Consequence_a0a0e0a3a2_1 extends InstantBehaviourStep {
    /*package*/ Behaviour behaviour;
    public Consequence_a0a0e0a3a2_1(Behaviour behaviour) {
      this.behaviour = behaviour;
    }

    public void execute() {
      ((patient) behaviour.getSignalTrigger().GetData("patient")).LIATFluBResult = "Negative";

    }
  }
  public class Consequence_a0a0e0a3a2_2 extends InstantBehaviourStep {
    /*package*/ Behaviour behaviour;
    public Consequence_a0a0e0a3a2_2(Behaviour behaviour) {
      this.behaviour = behaviour;
    }

    public void execute() {
      ((patient) behaviour.getSignalTrigger().GetData("patient")).LIATFluBResult = "Negative";

    }
  }
  public class Choice_a0e0a3a2_3 extends InstantBehaviourStep {
    /*package*/ Behaviour behaviour;
    public Choice_a0e0a3a2_3(Behaviour behaviour) {
      this.behaviour = behaviour;
    }

    public void execute() {
      if (Dice(RunEnvironment.getInstance().getParameters().getDouble("LIATFluBSpecificity"))) {
        ArrayList<BehaviourStep> plstSteps = new ArrayList();
        plstSteps.add(new Consequence_a0a0e0a3a2_3(behaviour));
        behaviour.injectSteps(plstSteps);
      } else {
        ArrayList<BehaviourStep> plstSteps = new ArrayList();
        plstSteps.add(new Consequence_a0a0e0a3a2_5(behaviour));
        behaviour.injectSteps(plstSteps);
      }
    }
  }
  public class Choice_a0e0a3a2_5 extends InstantBehaviourStep {
    /*package*/ Behaviour behaviour;
    public Choice_a0e0a3a2_5(Behaviour behaviour) {
      this.behaviour = behaviour;
    }

    public void execute() {
      if (Dice(RunEnvironment.getInstance().getParameters().getDouble("LIATFluBSpecificity"))) {
        ArrayList<BehaviourStep> plstSteps = new ArrayList();
        plstSteps.add(new Consequence_a0a0e0a3a2_3(behaviour));
        behaviour.injectSteps(plstSteps);
      } else {
        ArrayList<BehaviourStep> plstSteps = new ArrayList();
        plstSteps.add(new Consequence_a0a0e0a3a2_5(behaviour));
        behaviour.injectSteps(plstSteps);
      }
    }
  }
  public class Consequence_a0a0e0a3a2_3 extends InstantBehaviourStep {
    /*package*/ Behaviour behaviour;
    public Consequence_a0a0e0a3a2_3(Behaviour behaviour) {
      this.behaviour = behaviour;
    }

    public void execute() {
      ((patient) behaviour.getSignalTrigger().GetData("patient")).LIATFluBResult = "Negative";

    }
  }
  public class Consequence_a0a0e0a3a2_4 extends InstantBehaviourStep {
    /*package*/ Behaviour behaviour;
    public Consequence_a0a0e0a3a2_4(Behaviour behaviour) {
      this.behaviour = behaviour;
    }

    public void execute() {
      ((patient) behaviour.getSignalTrigger().GetData("patient")).LIATFluBResult = "Negative";

    }
  }
  public class Consequence_a0a0e0a3a2_5 extends InstantBehaviourStep {
    /*package*/ Behaviour behaviour;
    public Consequence_a0a0e0a3a2_5(Behaviour behaviour) {
      this.behaviour = behaviour;
    }

    public void execute() {
      ((patient) behaviour.getSignalTrigger().GetData("patient")).LIATFluBResult = "Positive";

    }
  }
  public class Consequence_a0a0e0a3a2_6 extends InstantBehaviourStep {
    /*package*/ Behaviour behaviour;
    public Consequence_a0a0e0a3a2_6(Behaviour behaviour) {
      this.behaviour = behaviour;
    }

    public void execute() {
      ((patient) behaviour.getSignalTrigger().GetData("patient")).LIATFluBResult = "Positive";

    }
  }
  public class UseAction_a0b3a2 extends InstantBehaviourStep {
    /*package*/ Behaviour behaviour;
    public UseAction_a0b3a2(Behaviour behaviour) {
      this.behaviour = behaviour;
    }

    public void execute() {

      ((Room) ToolBox().ReadMap().getCurrentRoom(CubicleNurse.this)).getParentArea().decrementResource(LabPCR.getInstance());
    }
  }
  public class StayAction_b0b3a2 extends PassiveBehaviourStep {
    /*package*/ Behaviour behaviour;
    /*package*/ int testingTime = LabPCRExecutionTimeMap.getInstance().getProcessingTime();
    /*package*/ int timeExecuted = 0;
    public StayAction_b0b3a2(Behaviour behaviour) {
      this.behaviour = behaviour;
    }

    public void execute() {
      // Do nothing 
      timeExecuted++;
    }

    public boolean finishCondition() {
      return timeExecuted == testingTime;
    }
  }
  public class Choice_c0b3a2 extends InstantBehaviourStep {
    /*package*/ Behaviour behaviour;
    public Choice_c0b3a2(Behaviour behaviour) {
      this.behaviour = behaviour;
    }

    public void execute() {
      if ((((patient) behaviour.getSignalTrigger().GetData("patient")).COVIDInfectionStatus == "Symptomatic") || (((patient) behaviour.getSignalTrigger().GetData("patient")).COVIDInfectionStatus == "Asymptomatic")) {
        ArrayList<BehaviourStep> plstSteps = new ArrayList();
        plstSteps.add(new Choice_a0c0b3a2(behaviour));
        behaviour.injectSteps(plstSteps);
      } else {
        ArrayList<BehaviourStep> plstSteps = new ArrayList();
        plstSteps.add(new Choice_a0c0b3a2_3(behaviour));
        behaviour.injectSteps(plstSteps);
      }
    }
  }
  public class Choice_d0b3a2 extends InstantBehaviourStep {
    /*package*/ Behaviour behaviour;
    public Choice_d0b3a2(Behaviour behaviour) {
      this.behaviour = behaviour;
    }

    public void execute() {
      if ((((patient) behaviour.getSignalTrigger().GetData("patient")).FluAInfectionStatus == "Symptomatic") || (((patient) behaviour.getSignalTrigger().GetData("patient")).FluAInfectionStatus == "Asymptomatic")) {
        ArrayList<BehaviourStep> plstSteps = new ArrayList();
        plstSteps.add(new Choice_a0d0b3a2(behaviour));
        behaviour.injectSteps(plstSteps);
      } else {
        ArrayList<BehaviourStep> plstSteps = new ArrayList();
        plstSteps.add(new Choice_a0d0b3a2_3(behaviour));
        behaviour.injectSteps(plstSteps);
      }
    }
  }
  public class Choice_e0b3a2 extends InstantBehaviourStep {
    /*package*/ Behaviour behaviour;
    public Choice_e0b3a2(Behaviour behaviour) {
      this.behaviour = behaviour;
    }

    public void execute() {
      if ((((patient) behaviour.getSignalTrigger().GetData("patient")).FluBInfectionStatus == "Symptomatic") || (((patient) behaviour.getSignalTrigger().GetData("patient")).FluBInfectionStatus == "Asymptomatic")) {
        ArrayList<BehaviourStep> plstSteps = new ArrayList();
        plstSteps.add(new Choice_a0e0b3a2(behaviour));
        behaviour.injectSteps(plstSteps);
      } else {
        ArrayList<BehaviourStep> plstSteps = new ArrayList();
        plstSteps.add(new Choice_a0e0b3a2_3(behaviour));
        behaviour.injectSteps(plstSteps);
      }
    }
  }
  public class UseAction_a0b3a2_0 extends InstantBehaviourStep {
    /*package*/ Behaviour behaviour;
    public UseAction_a0b3a2_0(Behaviour behaviour) {
      this.behaviour = behaviour;
    }

    public void execute() {

      ((Room) ToolBox().ReadMap().getCurrentRoom(CubicleNurse.this)).getParentArea().decrementResource(LabPCR.getInstance());
    }
  }
  public class StayAction_b0b3a2_1 extends PassiveBehaviourStep {
    /*package*/ Behaviour behaviour;
    /*package*/ int testingTime = LabPCRExecutionTimeMap.getInstance().getProcessingTime();
    /*package*/ int timeExecuted = 0;
    public StayAction_b0b3a2_1(Behaviour behaviour) {
      this.behaviour = behaviour;
    }

    public void execute() {
      // Do nothing 
      timeExecuted++;
    }

    public boolean finishCondition() {
      return timeExecuted == testingTime;
    }
  }
  public class Choice_c0b3a2_1 extends InstantBehaviourStep {
    /*package*/ Behaviour behaviour;
    public Choice_c0b3a2_1(Behaviour behaviour) {
      this.behaviour = behaviour;
    }

    public void execute() {
      if ((((patient) behaviour.getSignalTrigger().GetData("patient")).COVIDInfectionStatus == "Symptomatic") || (((patient) behaviour.getSignalTrigger().GetData("patient")).COVIDInfectionStatus == "Asymptomatic")) {
        ArrayList<BehaviourStep> plstSteps = new ArrayList();
        plstSteps.add(new Choice_a0c0b3a2(behaviour));
        behaviour.injectSteps(plstSteps);
      } else {
        ArrayList<BehaviourStep> plstSteps = new ArrayList();
        plstSteps.add(new Choice_a0c0b3a2_3(behaviour));
        behaviour.injectSteps(plstSteps);
      }
    }
  }
  public class Choice_a0c0b3a2 extends InstantBehaviourStep {
    /*package*/ Behaviour behaviour;
    public Choice_a0c0b3a2(Behaviour behaviour) {
      this.behaviour = behaviour;
    }

    public void execute() {
      if (Dice(RunEnvironment.getInstance().getParameters().getDouble("LabPCRCOVIDSensitivity"))) {
        ArrayList<BehaviourStep> plstSteps = new ArrayList();
        plstSteps.add(new Consequence_a0a0c0b3a2(behaviour));
        behaviour.injectSteps(plstSteps);
      } else {
        ArrayList<BehaviourStep> plstSteps = new ArrayList();
        plstSteps.add(new Consequence_a0a0c0b3a2_1(behaviour));
        behaviour.injectSteps(plstSteps);
      }
    }
  }
  public class Choice_a0c0b3a2_1 extends InstantBehaviourStep {
    /*package*/ Behaviour behaviour;
    public Choice_a0c0b3a2_1(Behaviour behaviour) {
      this.behaviour = behaviour;
    }

    public void execute() {
      if (Dice(RunEnvironment.getInstance().getParameters().getDouble("LabPCRCOVIDSensitivity"))) {
        ArrayList<BehaviourStep> plstSteps = new ArrayList();
        plstSteps.add(new Consequence_a0a0c0b3a2(behaviour));
        behaviour.injectSteps(plstSteps);
      } else {
        ArrayList<BehaviourStep> plstSteps = new ArrayList();
        plstSteps.add(new Consequence_a0a0c0b3a2_1(behaviour));
        behaviour.injectSteps(plstSteps);
      }
    }
  }
  public class Consequence_a0a0c0b3a2 extends InstantBehaviourStep {
    /*package*/ Behaviour behaviour;
    public Consequence_a0a0c0b3a2(Behaviour behaviour) {
      this.behaviour = behaviour;
    }

    public void execute() {
      ((patient) behaviour.getSignalTrigger().GetData("patient")).LabPCRCOVIDResult = "Positive";

    }
  }
  public class Consequence_a0a0c0b3a2_0 extends InstantBehaviourStep {
    /*package*/ Behaviour behaviour;
    public Consequence_a0a0c0b3a2_0(Behaviour behaviour) {
      this.behaviour = behaviour;
    }

    public void execute() {
      ((patient) behaviour.getSignalTrigger().GetData("patient")).LabPCRCOVIDResult = "Positive";

    }
  }
  public class Consequence_a0a0c0b3a2_1 extends InstantBehaviourStep {
    /*package*/ Behaviour behaviour;
    public Consequence_a0a0c0b3a2_1(Behaviour behaviour) {
      this.behaviour = behaviour;
    }

    public void execute() {
      ((patient) behaviour.getSignalTrigger().GetData("patient")).LabPCRCOVIDResult = "Negative";

    }
  }
  public class Consequence_a0a0c0b3a2_2 extends InstantBehaviourStep {
    /*package*/ Behaviour behaviour;
    public Consequence_a0a0c0b3a2_2(Behaviour behaviour) {
      this.behaviour = behaviour;
    }

    public void execute() {
      ((patient) behaviour.getSignalTrigger().GetData("patient")).LabPCRCOVIDResult = "Negative";

    }
  }
  public class Choice_a0c0b3a2_3 extends InstantBehaviourStep {
    /*package*/ Behaviour behaviour;
    public Choice_a0c0b3a2_3(Behaviour behaviour) {
      this.behaviour = behaviour;
    }

    public void execute() {
      if (Dice(RunEnvironment.getInstance().getParameters().getDouble("LabPCRCOVIDSpecificity"))) {
        ArrayList<BehaviourStep> plstSteps = new ArrayList();
        plstSteps.add(new Consequence_a0a0c0b3a2_3(behaviour));
        behaviour.injectSteps(plstSteps);
      } else {
        ArrayList<BehaviourStep> plstSteps = new ArrayList();
        plstSteps.add(new Consequence_a0a0c0b3a2_5(behaviour));
        behaviour.injectSteps(plstSteps);
      }
    }
  }
  public class Choice_a0c0b3a2_5 extends InstantBehaviourStep {
    /*package*/ Behaviour behaviour;
    public Choice_a0c0b3a2_5(Behaviour behaviour) {
      this.behaviour = behaviour;
    }

    public void execute() {
      if (Dice(RunEnvironment.getInstance().getParameters().getDouble("LabPCRCOVIDSpecificity"))) {
        ArrayList<BehaviourStep> plstSteps = new ArrayList();
        plstSteps.add(new Consequence_a0a0c0b3a2_3(behaviour));
        behaviour.injectSteps(plstSteps);
      } else {
        ArrayList<BehaviourStep> plstSteps = new ArrayList();
        plstSteps.add(new Consequence_a0a0c0b3a2_5(behaviour));
        behaviour.injectSteps(plstSteps);
      }
    }
  }
  public class Consequence_a0a0c0b3a2_3 extends InstantBehaviourStep {
    /*package*/ Behaviour behaviour;
    public Consequence_a0a0c0b3a2_3(Behaviour behaviour) {
      this.behaviour = behaviour;
    }

    public void execute() {
      ((patient) behaviour.getSignalTrigger().GetData("patient")).LabPCRCOVIDResult = "Negative";

    }
  }
  public class Consequence_a0a0c0b3a2_4 extends InstantBehaviourStep {
    /*package*/ Behaviour behaviour;
    public Consequence_a0a0c0b3a2_4(Behaviour behaviour) {
      this.behaviour = behaviour;
    }

    public void execute() {
      ((patient) behaviour.getSignalTrigger().GetData("patient")).LabPCRCOVIDResult = "Negative";

    }
  }
  public class Consequence_a0a0c0b3a2_5 extends InstantBehaviourStep {
    /*package*/ Behaviour behaviour;
    public Consequence_a0a0c0b3a2_5(Behaviour behaviour) {
      this.behaviour = behaviour;
    }

    public void execute() {
      ((patient) behaviour.getSignalTrigger().GetData("patient")).LabPCRCOVIDResult = "Positive";

    }
  }
  public class Consequence_a0a0c0b3a2_6 extends InstantBehaviourStep {
    /*package*/ Behaviour behaviour;
    public Consequence_a0a0c0b3a2_6(Behaviour behaviour) {
      this.behaviour = behaviour;
    }

    public void execute() {
      ((patient) behaviour.getSignalTrigger().GetData("patient")).LabPCRCOVIDResult = "Positive";

    }
  }
  public class Choice_d0b3a2_1 extends InstantBehaviourStep {
    /*package*/ Behaviour behaviour;
    public Choice_d0b3a2_1(Behaviour behaviour) {
      this.behaviour = behaviour;
    }

    public void execute() {
      if ((((patient) behaviour.getSignalTrigger().GetData("patient")).FluAInfectionStatus == "Symptomatic") || (((patient) behaviour.getSignalTrigger().GetData("patient")).FluAInfectionStatus == "Asymptomatic")) {
        ArrayList<BehaviourStep> plstSteps = new ArrayList();
        plstSteps.add(new Choice_a0d0b3a2(behaviour));
        behaviour.injectSteps(plstSteps);
      } else {
        ArrayList<BehaviourStep> plstSteps = new ArrayList();
        plstSteps.add(new Choice_a0d0b3a2_3(behaviour));
        behaviour.injectSteps(plstSteps);
      }
    }
  }
  public class Choice_a0d0b3a2 extends InstantBehaviourStep {
    /*package*/ Behaviour behaviour;
    public Choice_a0d0b3a2(Behaviour behaviour) {
      this.behaviour = behaviour;
    }

    public void execute() {
      if (Dice(RunEnvironment.getInstance().getParameters().getDouble("LabPCRFluASensitivity"))) {
        ArrayList<BehaviourStep> plstSteps = new ArrayList();
        plstSteps.add(new Consequence_a0a0d0b3a2(behaviour));
        behaviour.injectSteps(plstSteps);
      } else {
        ArrayList<BehaviourStep> plstSteps = new ArrayList();
        plstSteps.add(new Consequence_a0a0d0b3a2_1(behaviour));
        behaviour.injectSteps(plstSteps);
      }
    }
  }
  public class Choice_a0d0b3a2_1 extends InstantBehaviourStep {
    /*package*/ Behaviour behaviour;
    public Choice_a0d0b3a2_1(Behaviour behaviour) {
      this.behaviour = behaviour;
    }

    public void execute() {
      if (Dice(RunEnvironment.getInstance().getParameters().getDouble("LabPCRFluASensitivity"))) {
        ArrayList<BehaviourStep> plstSteps = new ArrayList();
        plstSteps.add(new Consequence_a0a0d0b3a2(behaviour));
        behaviour.injectSteps(plstSteps);
      } else {
        ArrayList<BehaviourStep> plstSteps = new ArrayList();
        plstSteps.add(new Consequence_a0a0d0b3a2_1(behaviour));
        behaviour.injectSteps(plstSteps);
      }
    }
  }
  public class Consequence_a0a0d0b3a2 extends InstantBehaviourStep {
    /*package*/ Behaviour behaviour;
    public Consequence_a0a0d0b3a2(Behaviour behaviour) {
      this.behaviour = behaviour;
    }

    public void execute() {
      ((patient) behaviour.getSignalTrigger().GetData("patient")).LabPCRFluAResult = "Positive";

    }
  }
  public class Consequence_a0a0d0b3a2_0 extends InstantBehaviourStep {
    /*package*/ Behaviour behaviour;
    public Consequence_a0a0d0b3a2_0(Behaviour behaviour) {
      this.behaviour = behaviour;
    }

    public void execute() {
      ((patient) behaviour.getSignalTrigger().GetData("patient")).LabPCRFluAResult = "Positive";

    }
  }
  public class Consequence_a0a0d0b3a2_1 extends InstantBehaviourStep {
    /*package*/ Behaviour behaviour;
    public Consequence_a0a0d0b3a2_1(Behaviour behaviour) {
      this.behaviour = behaviour;
    }

    public void execute() {
      ((patient) behaviour.getSignalTrigger().GetData("patient")).LabPCRFluAResult = "Negative";

    }
  }
  public class Consequence_a0a0d0b3a2_2 extends InstantBehaviourStep {
    /*package*/ Behaviour behaviour;
    public Consequence_a0a0d0b3a2_2(Behaviour behaviour) {
      this.behaviour = behaviour;
    }

    public void execute() {
      ((patient) behaviour.getSignalTrigger().GetData("patient")).LabPCRFluAResult = "Negative";

    }
  }
  public class Choice_a0d0b3a2_3 extends InstantBehaviourStep {
    /*package*/ Behaviour behaviour;
    public Choice_a0d0b3a2_3(Behaviour behaviour) {
      this.behaviour = behaviour;
    }

    public void execute() {
      if (Dice(RunEnvironment.getInstance().getParameters().getDouble("LabPCRFluASpecificity"))) {
        ArrayList<BehaviourStep> plstSteps = new ArrayList();
        plstSteps.add(new Consequence_a0a0d0b3a2_3(behaviour));
        behaviour.injectSteps(plstSteps);
      } else {
        ArrayList<BehaviourStep> plstSteps = new ArrayList();
        plstSteps.add(new Consequence_a0a0d0b3a2_5(behaviour));
        behaviour.injectSteps(plstSteps);
      }
    }
  }
  public class Choice_a0d0b3a2_5 extends InstantBehaviourStep {
    /*package*/ Behaviour behaviour;
    public Choice_a0d0b3a2_5(Behaviour behaviour) {
      this.behaviour = behaviour;
    }

    public void execute() {
      if (Dice(RunEnvironment.getInstance().getParameters().getDouble("LabPCRFluASpecificity"))) {
        ArrayList<BehaviourStep> plstSteps = new ArrayList();
        plstSteps.add(new Consequence_a0a0d0b3a2_3(behaviour));
        behaviour.injectSteps(plstSteps);
      } else {
        ArrayList<BehaviourStep> plstSteps = new ArrayList();
        plstSteps.add(new Consequence_a0a0d0b3a2_5(behaviour));
        behaviour.injectSteps(plstSteps);
      }
    }
  }
  public class Consequence_a0a0d0b3a2_3 extends InstantBehaviourStep {
    /*package*/ Behaviour behaviour;
    public Consequence_a0a0d0b3a2_3(Behaviour behaviour) {
      this.behaviour = behaviour;
    }

    public void execute() {
      ((patient) behaviour.getSignalTrigger().GetData("patient")).LabPCRFluAResult = "Negative";

    }
  }
  public class Consequence_a0a0d0b3a2_4 extends InstantBehaviourStep {
    /*package*/ Behaviour behaviour;
    public Consequence_a0a0d0b3a2_4(Behaviour behaviour) {
      this.behaviour = behaviour;
    }

    public void execute() {
      ((patient) behaviour.getSignalTrigger().GetData("patient")).LabPCRFluAResult = "Negative";

    }
  }
  public class Consequence_a0a0d0b3a2_5 extends InstantBehaviourStep {
    /*package*/ Behaviour behaviour;
    public Consequence_a0a0d0b3a2_5(Behaviour behaviour) {
      this.behaviour = behaviour;
    }

    public void execute() {
      ((patient) behaviour.getSignalTrigger().GetData("patient")).LabPCRFluAResult = "Positive";

    }
  }
  public class Consequence_a0a0d0b3a2_6 extends InstantBehaviourStep {
    /*package*/ Behaviour behaviour;
    public Consequence_a0a0d0b3a2_6(Behaviour behaviour) {
      this.behaviour = behaviour;
    }

    public void execute() {
      ((patient) behaviour.getSignalTrigger().GetData("patient")).LabPCRFluAResult = "Positive";

    }
  }
  public class Choice_e0b3a2_1 extends InstantBehaviourStep {
    /*package*/ Behaviour behaviour;
    public Choice_e0b3a2_1(Behaviour behaviour) {
      this.behaviour = behaviour;
    }

    public void execute() {
      if ((((patient) behaviour.getSignalTrigger().GetData("patient")).FluBInfectionStatus == "Symptomatic") || (((patient) behaviour.getSignalTrigger().GetData("patient")).FluBInfectionStatus == "Asymptomatic")) {
        ArrayList<BehaviourStep> plstSteps = new ArrayList();
        plstSteps.add(new Choice_a0e0b3a2(behaviour));
        behaviour.injectSteps(plstSteps);
      } else {
        ArrayList<BehaviourStep> plstSteps = new ArrayList();
        plstSteps.add(new Choice_a0e0b3a2_3(behaviour));
        behaviour.injectSteps(plstSteps);
      }
    }
  }
  public class Choice_a0e0b3a2 extends InstantBehaviourStep {
    /*package*/ Behaviour behaviour;
    public Choice_a0e0b3a2(Behaviour behaviour) {
      this.behaviour = behaviour;
    }

    public void execute() {
      if (Dice(RunEnvironment.getInstance().getParameters().getDouble("LabPCRFluBSensitivity"))) {
        ArrayList<BehaviourStep> plstSteps = new ArrayList();
        plstSteps.add(new Consequence_a0a0e0b3a2(behaviour));
        behaviour.injectSteps(plstSteps);
      } else {
        ArrayList<BehaviourStep> plstSteps = new ArrayList();
        plstSteps.add(new Consequence_a0a0e0b3a2_1(behaviour));
        behaviour.injectSteps(plstSteps);
      }
    }
  }
  public class Choice_a0e0b3a2_1 extends InstantBehaviourStep {
    /*package*/ Behaviour behaviour;
    public Choice_a0e0b3a2_1(Behaviour behaviour) {
      this.behaviour = behaviour;
    }

    public void execute() {
      if (Dice(RunEnvironment.getInstance().getParameters().getDouble("LabPCRFluBSensitivity"))) {
        ArrayList<BehaviourStep> plstSteps = new ArrayList();
        plstSteps.add(new Consequence_a0a0e0b3a2(behaviour));
        behaviour.injectSteps(plstSteps);
      } else {
        ArrayList<BehaviourStep> plstSteps = new ArrayList();
        plstSteps.add(new Consequence_a0a0e0b3a2_1(behaviour));
        behaviour.injectSteps(plstSteps);
      }
    }
  }
  public class Consequence_a0a0e0b3a2 extends InstantBehaviourStep {
    /*package*/ Behaviour behaviour;
    public Consequence_a0a0e0b3a2(Behaviour behaviour) {
      this.behaviour = behaviour;
    }

    public void execute() {
      ((patient) behaviour.getSignalTrigger().GetData("patient")).LabPCRFluBResult = "Positive";

    }
  }
  public class Consequence_a0a0e0b3a2_0 extends InstantBehaviourStep {
    /*package*/ Behaviour behaviour;
    public Consequence_a0a0e0b3a2_0(Behaviour behaviour) {
      this.behaviour = behaviour;
    }

    public void execute() {
      ((patient) behaviour.getSignalTrigger().GetData("patient")).LabPCRFluBResult = "Positive";

    }
  }
  public class Consequence_a0a0e0b3a2_1 extends InstantBehaviourStep {
    /*package*/ Behaviour behaviour;
    public Consequence_a0a0e0b3a2_1(Behaviour behaviour) {
      this.behaviour = behaviour;
    }

    public void execute() {
      ((patient) behaviour.getSignalTrigger().GetData("patient")).LabPCRFluBResult = "Negative";

    }
  }
  public class Consequence_a0a0e0b3a2_2 extends InstantBehaviourStep {
    /*package*/ Behaviour behaviour;
    public Consequence_a0a0e0b3a2_2(Behaviour behaviour) {
      this.behaviour = behaviour;
    }

    public void execute() {
      ((patient) behaviour.getSignalTrigger().GetData("patient")).LabPCRFluBResult = "Negative";

    }
  }
  public class Choice_a0e0b3a2_3 extends InstantBehaviourStep {
    /*package*/ Behaviour behaviour;
    public Choice_a0e0b3a2_3(Behaviour behaviour) {
      this.behaviour = behaviour;
    }

    public void execute() {
      if (Dice(RunEnvironment.getInstance().getParameters().getDouble("LabPCRFluBSpecificity"))) {
        ArrayList<BehaviourStep> plstSteps = new ArrayList();
        plstSteps.add(new Consequence_a0a0e0b3a2_3(behaviour));
        behaviour.injectSteps(plstSteps);
      } else {
        ArrayList<BehaviourStep> plstSteps = new ArrayList();
        plstSteps.add(new Consequence_a0a0e0b3a2_5(behaviour));
        behaviour.injectSteps(plstSteps);
      }
    }
  }
  public class Choice_a0e0b3a2_5 extends InstantBehaviourStep {
    /*package*/ Behaviour behaviour;
    public Choice_a0e0b3a2_5(Behaviour behaviour) {
      this.behaviour = behaviour;
    }

    public void execute() {
      if (Dice(RunEnvironment.getInstance().getParameters().getDouble("LabPCRFluBSpecificity"))) {
        ArrayList<BehaviourStep> plstSteps = new ArrayList();
        plstSteps.add(new Consequence_a0a0e0b3a2_3(behaviour));
        behaviour.injectSteps(plstSteps);
      } else {
        ArrayList<BehaviourStep> plstSteps = new ArrayList();
        plstSteps.add(new Consequence_a0a0e0b3a2_5(behaviour));
        behaviour.injectSteps(plstSteps);
      }
    }
  }
  public class Consequence_a0a0e0b3a2_3 extends InstantBehaviourStep {
    /*package*/ Behaviour behaviour;
    public Consequence_a0a0e0b3a2_3(Behaviour behaviour) {
      this.behaviour = behaviour;
    }

    public void execute() {
      ((patient) behaviour.getSignalTrigger().GetData("patient")).LabPCRFluBResult = "Negative";

    }
  }
  public class Consequence_a0a0e0b3a2_4 extends InstantBehaviourStep {
    /*package*/ Behaviour behaviour;
    public Consequence_a0a0e0b3a2_4(Behaviour behaviour) {
      this.behaviour = behaviour;
    }

    public void execute() {
      ((patient) behaviour.getSignalTrigger().GetData("patient")).LabPCRFluBResult = "Negative";

    }
  }
  public class Consequence_a0a0e0b3a2_5 extends InstantBehaviourStep {
    /*package*/ Behaviour behaviour;
    public Consequence_a0a0e0b3a2_5(Behaviour behaviour) {
      this.behaviour = behaviour;
    }

    public void execute() {
      ((patient) behaviour.getSignalTrigger().GetData("patient")).LabPCRFluBResult = "Positive";

    }
  }
  public class Consequence_a0a0e0b3a2_6 extends InstantBehaviourStep {
    /*package*/ Behaviour behaviour;
    public Consequence_a0a0e0b3a2_6(Behaviour behaviour) {
      this.behaviour = behaviour;
    }

    public void execute() {
      ((patient) behaviour.getSignalTrigger().GetData("patient")).LabPCRFluBResult = "Positive";

    }
  }
  public class Choice_e0c_1 extends InstantBehaviourStep {
    /*package*/ Behaviour behaviour;
    public Choice_e0c_1(Behaviour behaviour) {
      this.behaviour = behaviour;
    }

    public void execute() {
      if (((patient) behaviour.getSignalTrigger().GetData("patient")).LIATCOVIDResult == "Negative" || ((patient) behaviour.getSignalTrigger().GetData("patient")).CepheidCOVIDResult == "Negative" || ((patient) behaviour.getSignalTrigger().GetData("patient")).LabPCRCOVIDResult == "Negative") {
        ArrayList<BehaviourStep> plstSteps = new ArrayList();
        plstSteps.add(new SendSignalAction_a0e0c(behaviour));
        behaviour.injectSteps(plstSteps);
      } else {
        ArrayList<BehaviourStep> plstSteps = new ArrayList();
        behaviour.injectSteps(plstSteps);
      }
    }
  }
  public class SendSignalAction_a0e0c extends BehaviourStep {
    /*package*/ Behaviour behaviour;

    public SendSignalAction_a0e0c(Behaviour behaviour) {
      this.behaviour = behaviour;
    }

    public void execute() {
      Board b = ReadBoard();
      Signal sendSignalTemp = new Signal();
      sendSignalTemp = new AdmitSideRoomTrigger_jSignal();
      sendSignalTemp.AddData("patient", behaviour.getSignalTrigger().GetData("patient"));

      b.PushMission(sendSignalTemp);
    }
  }
  public class SendSignalAction_a0e0c_1 extends BehaviourStep {
    /*package*/ Behaviour behaviour;

    public SendSignalAction_a0e0c_1(Behaviour behaviour) {
      this.behaviour = behaviour;
    }

    public void execute() {
      Board b = ReadBoard();
      Signal sendSignalTemp = new Signal();
      sendSignalTemp = new AdmitSideRoomTrigger_jSignal();
      sendSignalTemp.AddData("patient", behaviour.getSignalTrigger().GetData("patient"));

      b.PushMission(sendSignalTemp);
    }
  }
  public class Choice_f0c_1 extends InstantBehaviourStep {
    /*package*/ Behaviour behaviour;
    public Choice_f0c_1(Behaviour behaviour) {
      this.behaviour = behaviour;
    }

    public void execute() {
      if (((patient) behaviour.getSignalTrigger().GetData("patient")).LIATCOVIDResult == "Positive" || ((patient) behaviour.getSignalTrigger().GetData("patient")).CepheidCOVIDResult == "Positive" || ((patient) behaviour.getSignalTrigger().GetData("patient")).LabPCRCOVIDResult == "Positive") {
        ArrayList<BehaviourStep> plstSteps = new ArrayList();
        plstSteps.add(new SendSignalAction_a0f0c(behaviour));
        behaviour.injectSteps(plstSteps);
      } else {
        ArrayList<BehaviourStep> plstSteps = new ArrayList();
        behaviour.injectSteps(plstSteps);
      }
    }
  }
  public class SendSignalAction_a0f0c extends BehaviourStep {
    /*package*/ Behaviour behaviour;

    public SendSignalAction_a0f0c(Behaviour behaviour) {
      this.behaviour = behaviour;
    }

    public void execute() {
      Board b = ReadBoard();
      Signal sendSignalTemp = new Signal();
      sendSignalTemp = new AdmitRedTrigger_kSignal();
      sendSignalTemp.AddData("patient", behaviour.getSignalTrigger().GetData("patient"));

      b.PushMission(sendSignalTemp);
    }
  }
  public class SendSignalAction_a0f0c_1 extends BehaviourStep {
    /*package*/ Behaviour behaviour;

    public SendSignalAction_a0f0c_1(Behaviour behaviour) {
      this.behaviour = behaviour;
    }

    public void execute() {
      Board b = ReadBoard();
      Signal sendSignalTemp = new Signal();
      sendSignalTemp = new AdmitRedTrigger_kSignal();
      sendSignalTemp.AddData("patient", behaviour.getSignalTrigger().GetData("patient"));

      b.PushMission(sendSignalTemp);
    }
  }
  public class Choice_g0c_1 extends InstantBehaviourStep {
    /*package*/ Behaviour behaviour;
    public Choice_g0c_1(Behaviour behaviour) {
      this.behaviour = behaviour;
    }

    public void execute() {
      if (((patient) behaviour.getSignalTrigger().GetData("patient")).Severity == "low") {
        ArrayList<BehaviourStep> plstSteps = new ArrayList();
        plstSteps.add(new SendSignalAction_a0g0c(behaviour));
        behaviour.injectSteps(plstSteps);
      } else {
        ArrayList<BehaviourStep> plstSteps = new ArrayList();
        behaviour.injectSteps(plstSteps);
      }
    }
  }
  public class SendSignalAction_a0g0c extends BehaviourStep {
    /*package*/ Behaviour behaviour;

    public SendSignalAction_a0g0c(Behaviour behaviour) {
      this.behaviour = behaviour;
    }

    public void execute() {
      Board b = ReadBoard();
      Signal sendSignalTemp = new Signal();
      sendSignalTemp = new DischargeTrigger_nSignal();
      sendSignalTemp.AddData("patient", behaviour.getSignalTrigger().GetData("patient"));

      b.PushMission(sendSignalTemp);
    }
  }
  public class SendSignalAction_a0g0c_1 extends BehaviourStep {
    /*package*/ Behaviour behaviour;

    public SendSignalAction_a0g0c_1(Behaviour behaviour) {
      this.behaviour = behaviour;
    }

    public void execute() {
      Board b = ReadBoard();
      Signal sendSignalTemp = new Signal();
      sendSignalTemp = new DischargeTrigger_nSignal();
      sendSignalTemp.AddData("patient", behaviour.getSignalTrigger().GetData("patient"));

      b.PushMission(sendSignalTemp);
    }
  }
  public class StayAction_h0c_1 extends BehaviourStep {
    /*package*/ Behaviour behaviour;
    /*package*/ int timeExecuted = 0;
    public StayAction_h0c_1(Behaviour behaviour) {
      this.behaviour = behaviour;
    }

    public void execute() {
      // Do nothing 
      timeExecuted++;
    }

    public boolean finishCondition() {
      return (timeExecuted == (60 / RunEnvironment.getInstance().getParameters().getInteger("SecondsPerTick")));

    }
  }
  public class MoveAction_a0d_3 extends BehaviourStep {
    /*package*/ Behaviour behaviour;
    /*package*/ Object target;
    /*package*/ Object concreteTarget;
    public MoveAction_a0d_3(Behaviour behaviour) {
      target = NonRespiratoryCubicle.getInstance();
      this.behaviour = behaviour;
    }

    public void execute() {
      if (concreteTarget == null) {
        if (target instanceof RoomType) {
          concreteTarget = SelectLocation(((RoomType) target), behaviour);
        } else {
          concreteTarget = target;
        }
      }

      if (concreteTarget != null) {
        if (target instanceof RoomType) {
          if (EvaluateRoomChoice(((Room) concreteTarget)) == Double.MAX_VALUE) {
            concreteTarget = SelectLocation(((RoomType) target), behaviour);
          }
        }
        MoveTowards(concreteTarget);

      }
    }

    public boolean finishCondition() {
      return concreteTarget != null && ImAt(concreteTarget);
    }
  }
  public class OrderAction_b0d extends BehaviourStep {
    /*package*/ Behaviour behaviour;
    public OrderAction_b0d(Behaviour behaviour) {
      this.behaviour = behaviour;
    }

    public void execute() {
      Actor a = (Actor) behaviour.getSignalTrigger().GetData("patient");

      a.TakeOrder(new MoveToOrder().WithDestination(CubicleNurse.this.curInside).andThen(new MoveToOrder().WithDestination(Bed.class)));
    }
  }
  public class StayForConditionAction_c0d extends BehaviourStep {
    /*package*/ Behaviour behaviour;

    public StayForConditionAction_c0d(Behaviour behaviour) {
      this.behaviour = behaviour;
    }

    public void execute() {
      // Do nothing 
    }

    public boolean finishCondition() {
      return curInside != null && curInside == ((Actor) behaviour.getSignalTrigger().GetData("patient")).getRoom();
    }
  }
  public class StayAction_d0d_1 extends BehaviourStep {
    /*package*/ Behaviour behaviour;
    /*package*/ int timeExecuted = 0;
    public StayAction_d0d_1(Behaviour behaviour) {
      this.behaviour = behaviour;
    }

    public void execute() {
      // Do nothing 
      timeExecuted++;
    }

    public boolean finishCondition() {
      return (timeExecuted == (120 / RunEnvironment.getInstance().getParameters().getInteger("SecondsPerTick")));

    }
  }
  public class SendSignalAction_e0d extends BehaviourStep {
    /*package*/ Behaviour behaviour;

    public SendSignalAction_e0d(Behaviour behaviour) {
      this.behaviour = behaviour;
    }

    public void execute() {
      Board b = ReadBoard();
      Signal sendSignalTemp = new Signal();
      sendSignalTemp = new AdmitAmberTrigger_mSignal();
      sendSignalTemp.AddData("patient", behaviour.getSignalTrigger().GetData("patient"));

      b.PushMission(sendSignalTemp);
    }
  }
  public class StayAction_f0d extends BehaviourStep {
    /*package*/ Behaviour behaviour;
    /*package*/ int timeExecuted = 0;
    public StayAction_f0d(Behaviour behaviour) {
      this.behaviour = behaviour;
    }

    public void execute() {
      // Do nothing 
      timeExecuted++;
    }

    public boolean finishCondition() {
      return (timeExecuted == (60 / RunEnvironment.getInstance().getParameters().getInteger("SecondsPerTick")));

    }
  }
  public class MoveAction_a0d_5 extends BehaviourStep {
    /*package*/ Behaviour behaviour;
    /*package*/ Object target;
    /*package*/ Object concreteTarget;
    public MoveAction_a0d_5(Behaviour behaviour) {
      target = NonRespiratoryCubicle.getInstance();
      this.behaviour = behaviour;
    }

    public void execute() {
      if (concreteTarget == null) {
        if (target instanceof RoomType) {
          concreteTarget = SelectLocation(((RoomType) target), behaviour);
        } else {
          concreteTarget = target;
        }
      }

      if (concreteTarget != null) {
        if (target instanceof RoomType) {
          if (EvaluateRoomChoice(((Room) concreteTarget)) == Double.MAX_VALUE) {
            concreteTarget = SelectLocation(((RoomType) target), behaviour);
          }
        }
        MoveTowards(concreteTarget);

      }
    }

    public boolean finishCondition() {
      return concreteTarget != null && ImAt(concreteTarget);
    }
  }
  public class OrderAction_b0d_1 extends BehaviourStep {
    /*package*/ Behaviour behaviour;
    public OrderAction_b0d_1(Behaviour behaviour) {
      this.behaviour = behaviour;
    }

    public void execute() {
      Actor a = (Actor) behaviour.getSignalTrigger().GetData("patient");

      a.TakeOrder(new MoveToOrder().WithDestination(CubicleNurse.this.curInside).andThen(new MoveToOrder().WithDestination(Bed.class)));
    }
  }
  public class StayForConditionAction_c0d_0 extends BehaviourStep {
    /*package*/ Behaviour behaviour;

    public StayForConditionAction_c0d_0(Behaviour behaviour) {
      this.behaviour = behaviour;
    }

    public void execute() {
      // Do nothing 
    }

    public boolean finishCondition() {
      return curInside != null && curInside == ((Actor) behaviour.getSignalTrigger().GetData("patient")).getRoom();
    }
  }
  public class StayAction_d0d_3 extends BehaviourStep {
    /*package*/ Behaviour behaviour;
    /*package*/ int timeExecuted = 0;
    public StayAction_d0d_3(Behaviour behaviour) {
      this.behaviour = behaviour;
    }

    public void execute() {
      // Do nothing 
      timeExecuted++;
    }

    public boolean finishCondition() {
      return (timeExecuted == (120 / RunEnvironment.getInstance().getParameters().getInteger("SecondsPerTick")));

    }
  }
  public class SendSignalAction_e0d_1 extends BehaviourStep {
    /*package*/ Behaviour behaviour;

    public SendSignalAction_e0d_1(Behaviour behaviour) {
      this.behaviour = behaviour;
    }

    public void execute() {
      Board b = ReadBoard();
      Signal sendSignalTemp = new Signal();
      sendSignalTemp = new AdmitAmberTrigger_mSignal();
      sendSignalTemp.AddData("patient", behaviour.getSignalTrigger().GetData("patient"));

      b.PushMission(sendSignalTemp);
    }
  }
  public class StayAction_f0d_1 extends BehaviourStep {
    /*package*/ Behaviour behaviour;
    /*package*/ int timeExecuted = 0;
    public StayAction_f0d_1(Behaviour behaviour) {
      this.behaviour = behaviour;
    }

    public void execute() {
      // Do nothing 
      timeExecuted++;
    }

    public boolean finishCondition() {
      return (timeExecuted == (60 / RunEnvironment.getInstance().getParameters().getInteger("SecondsPerTick")));

    }
  }
  public class MoveAction_a0e_3 extends BehaviourStep {
    /*package*/ Behaviour behaviour;
    /*package*/ Object target;
    /*package*/ Object concreteTarget;
    public MoveAction_a0e_3(Behaviour behaviour) {
      target = behaviour.getSignalTrigger().GetData("patient");
      this.behaviour = behaviour;
    }

    public void execute() {
      if (concreteTarget == null) {
        if (target instanceof RoomType) {
          concreteTarget = SelectLocation(((RoomType) target), behaviour);
        } else {
          concreteTarget = target;
        }
      }

      if (concreteTarget != null) {
        if (target instanceof RoomType) {
          if (EvaluateRoomChoice(((Room) concreteTarget)) == Double.MAX_VALUE) {
            concreteTarget = SelectLocation(((RoomType) target), behaviour);
          }
        }
        MoveTowards(concreteTarget);

      }
    }

    public boolean finishCondition() {
      return concreteTarget != null && ImAt(concreteTarget);
    }
  }
  public class MoveAction_b0e_3 extends BehaviourStep {
    /*package*/ Behaviour behaviour;
    /*package*/ Object target;
    /*package*/ Object concreteTarget;
    public MoveAction_b0e_3(Behaviour behaviour) {
      target = AmberBay.getInstance();
      this.behaviour = behaviour;
    }

    public void execute() {
      if (concreteTarget == null) {
        if (target instanceof RoomType) {
          concreteTarget = SelectLocation(((RoomType) target), behaviour);
        } else {
          concreteTarget = target;
        }
      }

      if (concreteTarget != null) {
        if (target instanceof RoomType) {
          if (EvaluateRoomChoice(((Room) concreteTarget)) == Double.MAX_VALUE) {
            concreteTarget = SelectLocation(((RoomType) target), behaviour);
          }
        }
        MoveTowards(concreteTarget);

      }
    }

    public boolean finishCondition() {
      return concreteTarget != null && ImAt(concreteTarget);
    }
  }
  public class OrderAction_c0e_3 extends BehaviourStep {
    /*package*/ Behaviour behaviour;
    public OrderAction_c0e_3(Behaviour behaviour) {
      this.behaviour = behaviour;
    }

    public void execute() {
      Actor a = (Actor) behaviour.getSignalTrigger().GetData("patient");

      a.TakeOrder(new MoveToOrder().WithDestination(CubicleNurse.this));
    }
  }
  public class StayForConditionAction_d0e_1 extends BehaviourStep {
    /*package*/ Behaviour behaviour;

    public StayForConditionAction_d0e_1(Behaviour behaviour) {
      this.behaviour = behaviour;
    }

    public void execute() {
      // Do nothing 
    }

    public boolean finishCondition() {
      return ImAt(behaviour.getSignalTrigger().GetData("patient"));
    }
  }
  public class Consequence_e0e_1 extends InstantBehaviourStep {
    /*package*/ Behaviour behaviour;
    public Consequence_e0e_1(Behaviour behaviour) {
      this.behaviour = behaviour;
    }

    public void execute() {
      ((patient) behaviour.getSignalTrigger().GetData("patient")).admittedTo = "AmberBay";

    }
  }
  public class RemoveRelationshipAction_f0e_1 extends BehaviourStep {
    /*package*/ Behaviour behaviour;
    public RemoveRelationshipAction_f0e_1(Behaviour behaviour) {
      this.behaviour = behaviour;
    }

    public void execute() {
      Network network = ((Network) context.getProjection("CurrentPatientAllocations"));
      Iterator<RepastEdge<Agent>> patientStaffAllocations = network.getEdges(behaviour.getSignalTrigger().GetData("patient")).iterator();
      while (patientStaffAllocations.hasNext()) {
        network.removeEdge(patientStaffAllocations.next());
      }
    }
  }
  public class SendSignalAction_g0e extends BehaviourStep {
    /*package*/ Behaviour behaviour;

    public SendSignalAction_g0e(Behaviour behaviour) {
      this.behaviour = behaviour;
    }

    public void execute() {
      Board b = ReadBoard();
      Signal sendSignalTemp = new Signal();
      sendSignalTemp = new DoPCRTrigger_aSignal();
      sendSignalTemp.AddData("patient", behaviour.getSignalTrigger().GetData("patient"));

      b.PushMission(sendSignalTemp);
    }
  }
  public class MoveAction_a0e_5 extends BehaviourStep {
    /*package*/ Behaviour behaviour;
    /*package*/ Object target;
    /*package*/ Object concreteTarget;
    public MoveAction_a0e_5(Behaviour behaviour) {
      target = behaviour.getSignalTrigger().GetData("patient");
      this.behaviour = behaviour;
    }

    public void execute() {
      if (concreteTarget == null) {
        if (target instanceof RoomType) {
          concreteTarget = SelectLocation(((RoomType) target), behaviour);
        } else {
          concreteTarget = target;
        }
      }

      if (concreteTarget != null) {
        if (target instanceof RoomType) {
          if (EvaluateRoomChoice(((Room) concreteTarget)) == Double.MAX_VALUE) {
            concreteTarget = SelectLocation(((RoomType) target), behaviour);
          }
        }
        MoveTowards(concreteTarget);

      }
    }

    public boolean finishCondition() {
      return concreteTarget != null && ImAt(concreteTarget);
    }
  }
  public class MoveAction_b0e_5 extends BehaviourStep {
    /*package*/ Behaviour behaviour;
    /*package*/ Object target;
    /*package*/ Object concreteTarget;
    public MoveAction_b0e_5(Behaviour behaviour) {
      target = AmberBay.getInstance();
      this.behaviour = behaviour;
    }

    public void execute() {
      if (concreteTarget == null) {
        if (target instanceof RoomType) {
          concreteTarget = SelectLocation(((RoomType) target), behaviour);
        } else {
          concreteTarget = target;
        }
      }

      if (concreteTarget != null) {
        if (target instanceof RoomType) {
          if (EvaluateRoomChoice(((Room) concreteTarget)) == Double.MAX_VALUE) {
            concreteTarget = SelectLocation(((RoomType) target), behaviour);
          }
        }
        MoveTowards(concreteTarget);

      }
    }

    public boolean finishCondition() {
      return concreteTarget != null && ImAt(concreteTarget);
    }
  }
  public class OrderAction_c0e_5 extends BehaviourStep {
    /*package*/ Behaviour behaviour;
    public OrderAction_c0e_5(Behaviour behaviour) {
      this.behaviour = behaviour;
    }

    public void execute() {
      Actor a = (Actor) behaviour.getSignalTrigger().GetData("patient");

      a.TakeOrder(new MoveToOrder().WithDestination(CubicleNurse.this));
    }
  }
  public class StayForConditionAction_d0e_2 extends BehaviourStep {
    /*package*/ Behaviour behaviour;

    public StayForConditionAction_d0e_2(Behaviour behaviour) {
      this.behaviour = behaviour;
    }

    public void execute() {
      // Do nothing 
    }

    public boolean finishCondition() {
      return ImAt(behaviour.getSignalTrigger().GetData("patient"));
    }
  }
  public class Consequence_e0e_2 extends InstantBehaviourStep {
    /*package*/ Behaviour behaviour;
    public Consequence_e0e_2(Behaviour behaviour) {
      this.behaviour = behaviour;
    }

    public void execute() {
      ((patient) behaviour.getSignalTrigger().GetData("patient")).admittedTo = "AmberBay";

    }
  }
  public class RemoveRelationshipAction_f0e_2 extends BehaviourStep {
    /*package*/ Behaviour behaviour;
    public RemoveRelationshipAction_f0e_2(Behaviour behaviour) {
      this.behaviour = behaviour;
    }

    public void execute() {
      Network network = ((Network) context.getProjection("CurrentPatientAllocations"));
      Iterator<RepastEdge<Agent>> patientStaffAllocations = network.getEdges(behaviour.getSignalTrigger().GetData("patient")).iterator();
      while (patientStaffAllocations.hasNext()) {
        network.removeEdge(patientStaffAllocations.next());
      }
    }
  }
  public class SendSignalAction_g0e_1 extends BehaviourStep {
    /*package*/ Behaviour behaviour;

    public SendSignalAction_g0e_1(Behaviour behaviour) {
      this.behaviour = behaviour;
    }

    public void execute() {
      Board b = ReadBoard();
      Signal sendSignalTemp = new Signal();
      sendSignalTemp = new DoPCRTrigger_aSignal();
      sendSignalTemp.AddData("patient", behaviour.getSignalTrigger().GetData("patient"));

      b.PushMission(sendSignalTemp);
    }
  }
  public class MoveAction_a0f_3 extends BehaviourStep {
    /*package*/ Behaviour behaviour;
    /*package*/ Object target;
    /*package*/ Object concreteTarget;
    public MoveAction_a0f_3(Behaviour behaviour) {
      target = MainEntrance.getInstance();
      this.behaviour = behaviour;
    }

    public void execute() {
      if (concreteTarget == null) {
        if (target instanceof RoomType) {
          concreteTarget = SelectLocation(((RoomType) target), behaviour);
        } else {
          concreteTarget = target;
        }
      }

      if (concreteTarget != null) {
        if (target instanceof RoomType) {
          if (EvaluateRoomChoice(((Room) concreteTarget)) == Double.MAX_VALUE) {
            concreteTarget = SelectLocation(((RoomType) target), behaviour);
          }
        }
        MoveTowards(concreteTarget);

      }
    }

    public boolean finishCondition() {
      return concreteTarget != null && ImAt(concreteTarget);
    }
  }
  public class OrderAction_b0f_3 extends BehaviourStep {
    /*package*/ Behaviour behaviour;
    public OrderAction_b0f_3(Behaviour behaviour) {
      this.behaviour = behaviour;
    }

    public void execute() {
      Actor a = (Actor) behaviour.getSignalTrigger().GetData("patient");

      a.TakeOrder(new MoveToOrder().WithDestination(CubicleNurse.this));
    }
  }
  public class StayForConditionAction_c0f_1 extends BehaviourStep {
    /*package*/ Behaviour behaviour;

    public StayForConditionAction_c0f_1(Behaviour behaviour) {
      this.behaviour = behaviour;
    }

    public void execute() {
      // Do nothing 
    }

    public boolean finishCondition() {
      return ImAt(behaviour.getSignalTrigger().GetData("patient"));
    }
  }
  public class Consequence_d0f_1 extends InstantBehaviourStep {
    /*package*/ Behaviour behaviour;
    public Consequence_d0f_1(Behaviour behaviour) {
      this.behaviour = behaviour;
    }

    public void execute() {
      ((patient) behaviour.getSignalTrigger().GetData("patient")).admittedTo = "MainEntrance";

    }
  }
  public class RemoveRelationshipAction_e0f_1 extends BehaviourStep {
    /*package*/ Behaviour behaviour;
    public RemoveRelationshipAction_e0f_1(Behaviour behaviour) {
      this.behaviour = behaviour;
    }

    public void execute() {
      Network network = ((Network) context.getProjection("CurrentPatientAllocations"));
      Iterator<RepastEdge<Agent>> patientStaffAllocations = network.getEdges(behaviour.getSignalTrigger().GetData("patient")).iterator();
      while (patientStaffAllocations.hasNext()) {
        network.removeEdge(patientStaffAllocations.next());
      }
    }
  }
  public class MoveAction_a0f_5 extends BehaviourStep {
    /*package*/ Behaviour behaviour;
    /*package*/ Object target;
    /*package*/ Object concreteTarget;
    public MoveAction_a0f_5(Behaviour behaviour) {
      target = MainEntrance.getInstance();
      this.behaviour = behaviour;
    }

    public void execute() {
      if (concreteTarget == null) {
        if (target instanceof RoomType) {
          concreteTarget = SelectLocation(((RoomType) target), behaviour);
        } else {
          concreteTarget = target;
        }
      }

      if (concreteTarget != null) {
        if (target instanceof RoomType) {
          if (EvaluateRoomChoice(((Room) concreteTarget)) == Double.MAX_VALUE) {
            concreteTarget = SelectLocation(((RoomType) target), behaviour);
          }
        }
        MoveTowards(concreteTarget);

      }
    }

    public boolean finishCondition() {
      return concreteTarget != null && ImAt(concreteTarget);
    }
  }
  public class OrderAction_b0f_5 extends BehaviourStep {
    /*package*/ Behaviour behaviour;
    public OrderAction_b0f_5(Behaviour behaviour) {
      this.behaviour = behaviour;
    }

    public void execute() {
      Actor a = (Actor) behaviour.getSignalTrigger().GetData("patient");

      a.TakeOrder(new MoveToOrder().WithDestination(CubicleNurse.this));
    }
  }
  public class StayForConditionAction_c0f_2 extends BehaviourStep {
    /*package*/ Behaviour behaviour;

    public StayForConditionAction_c0f_2(Behaviour behaviour) {
      this.behaviour = behaviour;
    }

    public void execute() {
      // Do nothing 
    }

    public boolean finishCondition() {
      return ImAt(behaviour.getSignalTrigger().GetData("patient"));
    }
  }
  public class Consequence_d0f_2 extends InstantBehaviourStep {
    /*package*/ Behaviour behaviour;
    public Consequence_d0f_2(Behaviour behaviour) {
      this.behaviour = behaviour;
    }

    public void execute() {
      ((patient) behaviour.getSignalTrigger().GetData("patient")).admittedTo = "MainEntrance";

    }
  }
  public class RemoveRelationshipAction_e0f_2 extends BehaviourStep {
    /*package*/ Behaviour behaviour;
    public RemoveRelationshipAction_e0f_2(Behaviour behaviour) {
      this.behaviour = behaviour;
    }

    public void execute() {
      Network network = ((Network) context.getProjection("CurrentPatientAllocations"));
      Iterator<RepastEdge<Agent>> patientStaffAllocations = network.getEdges(behaviour.getSignalTrigger().GetData("patient")).iterator();
      while (patientStaffAllocations.hasNext()) {
        network.removeEdge(patientStaffAllocations.next());
      }
    }
  }
  public class MoveAction_a0g extends BehaviourStep {
    /*package*/ Behaviour behaviour;
    /*package*/ Object target;
    /*package*/ Object concreteTarget;
    public MoveAction_a0g(Behaviour behaviour) {
      target = RespiratoryCubicle.getInstance();
      this.behaviour = behaviour;
    }

    public void execute() {
      if (concreteTarget == null) {
        if (target instanceof RoomType) {
          concreteTarget = SelectLocation(((RoomType) target), behaviour);
        } else {
          concreteTarget = target;
        }
      }

      if (concreteTarget != null) {
        if (target instanceof RoomType) {
          if (EvaluateRoomChoice(((Room) concreteTarget)) == Double.MAX_VALUE) {
            concreteTarget = SelectLocation(((RoomType) target), behaviour);
          }
        }
        MoveTowards(concreteTarget);

      }
    }

    public boolean finishCondition() {
      return concreteTarget != null && ImAt(concreteTarget);
    }
  }
  public class StayAction_b0g extends BehaviourStep {
    /*package*/ Behaviour behaviour;
    /*package*/ int timeExecuted = 0;
    public StayAction_b0g(Behaviour behaviour) {
      this.behaviour = behaviour;
    }

    public void execute() {
      // Do nothing 
      timeExecuted++;
    }

    public boolean finishCondition() {
      return (timeExecuted == (900 / RunEnvironment.getInstance().getParameters().getInteger("SecondsPerTick")));

    }
  }
  public class SendSignalAction_c0g extends BehaviourStep {
    /*package*/ Behaviour behaviour;

    public SendSignalAction_c0g(Behaviour behaviour) {
      this.behaviour = behaviour;
    }

    public void execute() {
      Board b = ReadBoard();
      Signal sendSignalTemp = new Signal();
      sendSignalTemp = new DoneTrigger_bSignal();
      sendSignalTemp.AddData("patient", behaviour.getSignalTrigger().GetData("patient"));

      b.PushMission(sendSignalTemp);
    }
  }
  public class StayAction_d0g extends BehaviourStep {
    /*package*/ Behaviour behaviour;
    /*package*/ int timeExecuted = 0;
    public StayAction_d0g(Behaviour behaviour) {
      this.behaviour = behaviour;
    }

    public void execute() {
      // Do nothing 
      timeExecuted++;
    }

    public boolean finishCondition() {
      return (timeExecuted == (60 / RunEnvironment.getInstance().getParameters().getInteger("SecondsPerTick")));

    }
  }
  public class MoveAction_a0g_1 extends BehaviourStep {
    /*package*/ Behaviour behaviour;
    /*package*/ Object target;
    /*package*/ Object concreteTarget;
    public MoveAction_a0g_1(Behaviour behaviour) {
      target = RespiratoryCubicle.getInstance();
      this.behaviour = behaviour;
    }

    public void execute() {
      if (concreteTarget == null) {
        if (target instanceof RoomType) {
          concreteTarget = SelectLocation(((RoomType) target), behaviour);
        } else {
          concreteTarget = target;
        }
      }

      if (concreteTarget != null) {
        if (target instanceof RoomType) {
          if (EvaluateRoomChoice(((Room) concreteTarget)) == Double.MAX_VALUE) {
            concreteTarget = SelectLocation(((RoomType) target), behaviour);
          }
        }
        MoveTowards(concreteTarget);

      }
    }

    public boolean finishCondition() {
      return concreteTarget != null && ImAt(concreteTarget);
    }
  }
  public class StayAction_b0g_1 extends BehaviourStep {
    /*package*/ Behaviour behaviour;
    /*package*/ int timeExecuted = 0;
    public StayAction_b0g_1(Behaviour behaviour) {
      this.behaviour = behaviour;
    }

    public void execute() {
      // Do nothing 
      timeExecuted++;
    }

    public boolean finishCondition() {
      return (timeExecuted == (900 / RunEnvironment.getInstance().getParameters().getInteger("SecondsPerTick")));

    }
  }
  public class SendSignalAction_c0g_1 extends BehaviourStep {
    /*package*/ Behaviour behaviour;

    public SendSignalAction_c0g_1(Behaviour behaviour) {
      this.behaviour = behaviour;
    }

    public void execute() {
      Board b = ReadBoard();
      Signal sendSignalTemp = new Signal();
      sendSignalTemp = new DoneTrigger_bSignal();
      sendSignalTemp.AddData("patient", behaviour.getSignalTrigger().GetData("patient"));

      b.PushMission(sendSignalTemp);
    }
  }
  public class StayAction_d0g_1 extends BehaviourStep {
    /*package*/ Behaviour behaviour;
    /*package*/ int timeExecuted = 0;
    public StayAction_d0g_1(Behaviour behaviour) {
      this.behaviour = behaviour;
    }

    public void execute() {
      // Do nothing 
      timeExecuted++;
    }

    public boolean finishCondition() {
      return (timeExecuted == (60 / RunEnvironment.getInstance().getParameters().getInteger("SecondsPerTick")));

    }
  }
  public class MoveAction_a0h extends BehaviourStep {
    /*package*/ Behaviour behaviour;
    /*package*/ Object target;
    /*package*/ Object concreteTarget;
    public MoveAction_a0h(Behaviour behaviour) {
      target = RespiratoryCubicle.getInstance();
      this.behaviour = behaviour;
    }

    public void execute() {
      if (concreteTarget == null) {
        if (target instanceof RoomType) {
          concreteTarget = SelectLocation(((RoomType) target), behaviour);
        } else {
          concreteTarget = target;
        }
      }

      if (concreteTarget != null) {
        if (target instanceof RoomType) {
          if (EvaluateRoomChoice(((Room) concreteTarget)) == Double.MAX_VALUE) {
            concreteTarget = SelectLocation(((RoomType) target), behaviour);
          }
        }
        MoveTowards(concreteTarget);

      }
    }

    public boolean finishCondition() {
      return concreteTarget != null && ImAt(concreteTarget);
    }
  }
  public class StayAction_b0h extends BehaviourStep {
    /*package*/ Behaviour behaviour;
    /*package*/ int timeExecuted = 0;
    public StayAction_b0h(Behaviour behaviour) {
      this.behaviour = behaviour;
    }

    public void execute() {
      // Do nothing 
      timeExecuted++;
    }

    public boolean finishCondition() {
      return (timeExecuted == (60 / RunEnvironment.getInstance().getParameters().getInteger("SecondsPerTick")));

    }
  }
  public class SendSignalAction_c0h extends BehaviourStep {
    /*package*/ Behaviour behaviour;

    public SendSignalAction_c0h(Behaviour behaviour) {
      this.behaviour = behaviour;
    }

    public void execute() {
      Board b = ReadBoard();
      Signal sendSignalTemp = new Signal();
      sendSignalTemp = new GetTestResultTrigger_aSignal();
      sendSignalTemp.AddData("patient", behaviour.getSignalTrigger().GetData("patient"));

      b.PushMission(sendSignalTemp);
    }
  }
  public class StayAction_d0h extends BehaviourStep {
    /*package*/ Behaviour behaviour;
    /*package*/ int timeExecuted = 0;
    public StayAction_d0h(Behaviour behaviour) {
      this.behaviour = behaviour;
    }

    public void execute() {
      // Do nothing 
      timeExecuted++;
    }

    public boolean finishCondition() {
      return (timeExecuted == (60 / RunEnvironment.getInstance().getParameters().getInteger("SecondsPerTick")));

    }
  }
  public class MoveAction_a0h_1 extends BehaviourStep {
    /*package*/ Behaviour behaviour;
    /*package*/ Object target;
    /*package*/ Object concreteTarget;
    public MoveAction_a0h_1(Behaviour behaviour) {
      target = RespiratoryCubicle.getInstance();
      this.behaviour = behaviour;
    }

    public void execute() {
      if (concreteTarget == null) {
        if (target instanceof RoomType) {
          concreteTarget = SelectLocation(((RoomType) target), behaviour);
        } else {
          concreteTarget = target;
        }
      }

      if (concreteTarget != null) {
        if (target instanceof RoomType) {
          if (EvaluateRoomChoice(((Room) concreteTarget)) == Double.MAX_VALUE) {
            concreteTarget = SelectLocation(((RoomType) target), behaviour);
          }
        }
        MoveTowards(concreteTarget);

      }
    }

    public boolean finishCondition() {
      return concreteTarget != null && ImAt(concreteTarget);
    }
  }
  public class StayAction_b0h_1 extends BehaviourStep {
    /*package*/ Behaviour behaviour;
    /*package*/ int timeExecuted = 0;
    public StayAction_b0h_1(Behaviour behaviour) {
      this.behaviour = behaviour;
    }

    public void execute() {
      // Do nothing 
      timeExecuted++;
    }

    public boolean finishCondition() {
      return (timeExecuted == (60 / RunEnvironment.getInstance().getParameters().getInteger("SecondsPerTick")));

    }
  }
  public class SendSignalAction_c0h_1 extends BehaviourStep {
    /*package*/ Behaviour behaviour;

    public SendSignalAction_c0h_1(Behaviour behaviour) {
      this.behaviour = behaviour;
    }

    public void execute() {
      Board b = ReadBoard();
      Signal sendSignalTemp = new Signal();
      sendSignalTemp = new GetTestResultTrigger_aSignal();
      sendSignalTemp.AddData("patient", behaviour.getSignalTrigger().GetData("patient"));

      b.PushMission(sendSignalTemp);
    }
  }
  public class StayAction_d0h_1 extends BehaviourStep {
    /*package*/ Behaviour behaviour;
    /*package*/ int timeExecuted = 0;
    public StayAction_d0h_1(Behaviour behaviour) {
      this.behaviour = behaviour;
    }

    public void execute() {
      // Do nothing 
      timeExecuted++;
    }

    public boolean finishCondition() {
      return (timeExecuted == (60 / RunEnvironment.getInstance().getParameters().getInteger("SecondsPerTick")));

    }
  }
  public class MoveAction_a0i extends BehaviourStep {
    /*package*/ Behaviour behaviour;
    /*package*/ Object target;
    /*package*/ Object concreteTarget;
    public MoveAction_a0i(Behaviour behaviour) {
      target = RespiratoryCubicle.getInstance();
      this.behaviour = behaviour;
    }

    public void execute() {
      if (concreteTarget == null) {
        if (target instanceof RoomType) {
          concreteTarget = SelectLocation(((RoomType) target), behaviour);
        } else {
          concreteTarget = target;
        }
      }

      if (concreteTarget != null) {
        if (target instanceof RoomType) {
          if (EvaluateRoomChoice(((Room) concreteTarget)) == Double.MAX_VALUE) {
            concreteTarget = SelectLocation(((RoomType) target), behaviour);
          }
        }
        MoveTowards(concreteTarget);

      }
    }

    public boolean finishCondition() {
      return concreteTarget != null && ImAt(concreteTarget);
    }
  }
  public class OrderAction_b0i extends BehaviourStep {
    /*package*/ Behaviour behaviour;
    public OrderAction_b0i(Behaviour behaviour) {
      this.behaviour = behaviour;
    }

    public void execute() {
      Actor a = (Actor) behaviour.getSignalTrigger().GetData("patient");

      a.TakeOrder(new MoveToOrder().WithDestination(CubicleNurse.this.curInside).andThen(new MoveToOrder().WithDestination(Bed.class)));
    }
  }
  public class StayForConditionAction_c0i extends BehaviourStep {
    /*package*/ Behaviour behaviour;

    public StayForConditionAction_c0i(Behaviour behaviour) {
      this.behaviour = behaviour;
    }

    public void execute() {
      // Do nothing 
    }

    public boolean finishCondition() {
      return curInside != null && curInside == ((Actor) behaviour.getSignalTrigger().GetData("patient")).getRoom();
    }
  }
  public class StayAction_d0i extends BehaviourStep {
    /*package*/ Behaviour behaviour;
    /*package*/ int timeExecuted = 0;
    public StayAction_d0i(Behaviour behaviour) {
      this.behaviour = behaviour;
    }

    public void execute() {
      // Do nothing 
      timeExecuted++;
    }

    public boolean finishCondition() {
      return (timeExecuted == (120 / RunEnvironment.getInstance().getParameters().getInteger("SecondsPerTick")));

    }
  }
  public class SendSignalAction_e0i extends BehaviourStep {
    /*package*/ Behaviour behaviour;

    public SendSignalAction_e0i(Behaviour behaviour) {
      this.behaviour = behaviour;
    }

    public void execute() {
      Board b = ReadBoard();
      Signal sendSignalTemp = new Signal();
      sendSignalTemp = new Wait15Trigger_aSignal();
      sendSignalTemp.AddData("patient", behaviour.getSignalTrigger().GetData("patient"));

      b.PushMission(sendSignalTemp);
    }
  }
  public class StayAction_f0i extends BehaviourStep {
    /*package*/ Behaviour behaviour;
    /*package*/ int timeExecuted = 0;
    public StayAction_f0i(Behaviour behaviour) {
      this.behaviour = behaviour;
    }

    public void execute() {
      // Do nothing 
      timeExecuted++;
    }

    public boolean finishCondition() {
      return (timeExecuted == (60 / RunEnvironment.getInstance().getParameters().getInteger("SecondsPerTick")));

    }
  }
  public class MoveAction_a0i_1 extends BehaviourStep {
    /*package*/ Behaviour behaviour;
    /*package*/ Object target;
    /*package*/ Object concreteTarget;
    public MoveAction_a0i_1(Behaviour behaviour) {
      target = RespiratoryCubicle.getInstance();
      this.behaviour = behaviour;
    }

    public void execute() {
      if (concreteTarget == null) {
        if (target instanceof RoomType) {
          concreteTarget = SelectLocation(((RoomType) target), behaviour);
        } else {
          concreteTarget = target;
        }
      }

      if (concreteTarget != null) {
        if (target instanceof RoomType) {
          if (EvaluateRoomChoice(((Room) concreteTarget)) == Double.MAX_VALUE) {
            concreteTarget = SelectLocation(((RoomType) target), behaviour);
          }
        }
        MoveTowards(concreteTarget);

      }
    }

    public boolean finishCondition() {
      return concreteTarget != null && ImAt(concreteTarget);
    }
  }
  public class OrderAction_b0i_1 extends BehaviourStep {
    /*package*/ Behaviour behaviour;
    public OrderAction_b0i_1(Behaviour behaviour) {
      this.behaviour = behaviour;
    }

    public void execute() {
      Actor a = (Actor) behaviour.getSignalTrigger().GetData("patient");

      a.TakeOrder(new MoveToOrder().WithDestination(CubicleNurse.this.curInside).andThen(new MoveToOrder().WithDestination(Bed.class)));
    }
  }
  public class StayForConditionAction_c0i_0 extends BehaviourStep {
    /*package*/ Behaviour behaviour;

    public StayForConditionAction_c0i_0(Behaviour behaviour) {
      this.behaviour = behaviour;
    }

    public void execute() {
      // Do nothing 
    }

    public boolean finishCondition() {
      return curInside != null && curInside == ((Actor) behaviour.getSignalTrigger().GetData("patient")).getRoom();
    }
  }
  public class StayAction_d0i_1 extends BehaviourStep {
    /*package*/ Behaviour behaviour;
    /*package*/ int timeExecuted = 0;
    public StayAction_d0i_1(Behaviour behaviour) {
      this.behaviour = behaviour;
    }

    public void execute() {
      // Do nothing 
      timeExecuted++;
    }

    public boolean finishCondition() {
      return (timeExecuted == (120 / RunEnvironment.getInstance().getParameters().getInteger("SecondsPerTick")));

    }
  }
  public class SendSignalAction_e0i_1 extends BehaviourStep {
    /*package*/ Behaviour behaviour;

    public SendSignalAction_e0i_1(Behaviour behaviour) {
      this.behaviour = behaviour;
    }

    public void execute() {
      Board b = ReadBoard();
      Signal sendSignalTemp = new Signal();
      sendSignalTemp = new Wait15Trigger_aSignal();
      sendSignalTemp.AddData("patient", behaviour.getSignalTrigger().GetData("patient"));

      b.PushMission(sendSignalTemp);
    }
  }
  public class StayAction_f0i_1 extends BehaviourStep {
    /*package*/ Behaviour behaviour;
    /*package*/ int timeExecuted = 0;
    public StayAction_f0i_1(Behaviour behaviour) {
      this.behaviour = behaviour;
    }

    public void execute() {
      // Do nothing 
      timeExecuted++;
    }

    public boolean finishCondition() {
      return (timeExecuted == (60 / RunEnvironment.getInstance().getParameters().getInteger("SecondsPerTick")));

    }
  }
  public class MoveAction_a0j extends BehaviourStep {
    /*package*/ Behaviour behaviour;
    /*package*/ Object target;
    /*package*/ Object concreteTarget;
    public MoveAction_a0j(Behaviour behaviour) {
      target = RespiratoryCubicle.getInstance();
      this.behaviour = behaviour;
    }

    public void execute() {
      if (concreteTarget == null) {
        if (target instanceof RoomType) {
          concreteTarget = SelectLocation(((RoomType) target), behaviour);
        } else {
          concreteTarget = target;
        }
      }

      if (concreteTarget != null) {
        if (target instanceof RoomType) {
          if (EvaluateRoomChoice(((Room) concreteTarget)) == Double.MAX_VALUE) {
            concreteTarget = SelectLocation(((RoomType) target), behaviour);
          }
        }
        MoveTowards(concreteTarget);

      }
    }

    public boolean finishCondition() {
      return concreteTarget != null && ImAt(concreteTarget);
    }
  }
  public class UseAction_b0j extends InstantBehaviourStep {
    /*package*/ Behaviour behaviour;
    public UseAction_b0j(Behaviour behaviour) {
      this.behaviour = behaviour;
    }

    public void execute() {

      ((Room) ToolBox().ReadMap().getCurrentRoom(CubicleNurse.this)).getParentArea().decrementResource(LFD.getInstance());
    }
  }
  public class StayAction_c0j extends PassiveBehaviourStep {
    /*package*/ Behaviour behaviour;
    /*package*/ int testingTime = LFDExecutionTimeMap.getInstance().getProcessingTime();
    /*package*/ int timeExecuted = 0;
    public StayAction_c0j(Behaviour behaviour) {
      this.behaviour = behaviour;
    }

    public void execute() {
      // Do nothing 
      timeExecuted++;
    }

    public boolean finishCondition() {
      return timeExecuted == testingTime;
    }
  }
  public class Choice_d0j extends InstantBehaviourStep {
    /*package*/ Behaviour behaviour;
    public Choice_d0j(Behaviour behaviour) {
      this.behaviour = behaviour;
    }

    public void execute() {
      if ((((patient) behaviour.getSignalTrigger().GetData("patient")).COVIDInfectionStatus == "Symptomatic") || (((patient) behaviour.getSignalTrigger().GetData("patient")).COVIDInfectionStatus == "Asymptomatic")) {
        ArrayList<BehaviourStep> plstSteps = new ArrayList();
        plstSteps.add(new Choice_a0d0j(behaviour));
        behaviour.injectSteps(plstSteps);
      } else {
        ArrayList<BehaviourStep> plstSteps = new ArrayList();
        plstSteps.add(new Choice_a0d0j_3(behaviour));
        behaviour.injectSteps(plstSteps);
      }
    }
  }
  public class Choice_e0j extends InstantBehaviourStep {
    /*package*/ Behaviour behaviour;
    public Choice_e0j(Behaviour behaviour) {
      this.behaviour = behaviour;
    }

    public void execute() {
      if ((((patient) behaviour.getSignalTrigger().GetData("patient")).FluAInfectionStatus == "Symptomatic") || (((patient) behaviour.getSignalTrigger().GetData("patient")).FluAInfectionStatus == "Asymptomatic")) {
        ArrayList<BehaviourStep> plstSteps = new ArrayList();
        plstSteps.add(new Choice_a0e0j(behaviour));
        behaviour.injectSteps(plstSteps);
      } else {
        ArrayList<BehaviourStep> plstSteps = new ArrayList();
        plstSteps.add(new Choice_a0e0j_3(behaviour));
        behaviour.injectSteps(plstSteps);
      }
    }
  }
  public class Choice_f0j extends InstantBehaviourStep {
    /*package*/ Behaviour behaviour;
    public Choice_f0j(Behaviour behaviour) {
      this.behaviour = behaviour;
    }

    public void execute() {
      if ((((patient) behaviour.getSignalTrigger().GetData("patient")).FluBInfectionStatus == "Symptomatic") || (((patient) behaviour.getSignalTrigger().GetData("patient")).FluBInfectionStatus == "Asymptomatic")) {
        ArrayList<BehaviourStep> plstSteps = new ArrayList();
        plstSteps.add(new Choice_a0f0j(behaviour));
        behaviour.injectSteps(plstSteps);
      } else {
        ArrayList<BehaviourStep> plstSteps = new ArrayList();
        plstSteps.add(new Choice_a0f0j_3(behaviour));
        behaviour.injectSteps(plstSteps);
      }
    }
  }
  public class Choice_g0j extends InstantBehaviourStep {
    /*package*/ Behaviour behaviour;
    public Choice_g0j(Behaviour behaviour) {
      this.behaviour = behaviour;
    }

    public void execute() {
      if (((patient) behaviour.getSignalTrigger().GetData("patient")).LFDCOVIDResult == "Negative") {
        ArrayList<BehaviourStep> plstSteps = new ArrayList();
        plstSteps.add(new SendSignalAction_a0g0j(behaviour));
        behaviour.injectSteps(plstSteps);
      } else {
        ArrayList<BehaviourStep> plstSteps = new ArrayList();
        behaviour.injectSteps(plstSteps);
      }
    }
  }
  public class Choice_h0j extends InstantBehaviourStep {
    /*package*/ Behaviour behaviour;
    public Choice_h0j(Behaviour behaviour) {
      this.behaviour = behaviour;
    }

    public void execute() {
      if (((patient) behaviour.getSignalTrigger().GetData("patient")).LFDCOVIDResult == "Positive") {
        ArrayList<BehaviourStep> plstSteps = new ArrayList();
        plstSteps.add(new SendSignalAction_a0h0j(behaviour));
        behaviour.injectSteps(plstSteps);
      } else {
        ArrayList<BehaviourStep> plstSteps = new ArrayList();
        behaviour.injectSteps(plstSteps);
      }
    }
  }
  public class StayAction_i0j extends BehaviourStep {
    /*package*/ Behaviour behaviour;
    /*package*/ int timeExecuted = 0;
    public StayAction_i0j(Behaviour behaviour) {
      this.behaviour = behaviour;
    }

    public void execute() {
      // Do nothing 
      timeExecuted++;
    }

    public boolean finishCondition() {
      return (timeExecuted == (60 / RunEnvironment.getInstance().getParameters().getInteger("SecondsPerTick")));

    }
  }
  public class MoveAction_a0j_1 extends BehaviourStep {
    /*package*/ Behaviour behaviour;
    /*package*/ Object target;
    /*package*/ Object concreteTarget;
    public MoveAction_a0j_1(Behaviour behaviour) {
      target = RespiratoryCubicle.getInstance();
      this.behaviour = behaviour;
    }

    public void execute() {
      if (concreteTarget == null) {
        if (target instanceof RoomType) {
          concreteTarget = SelectLocation(((RoomType) target), behaviour);
        } else {
          concreteTarget = target;
        }
      }

      if (concreteTarget != null) {
        if (target instanceof RoomType) {
          if (EvaluateRoomChoice(((Room) concreteTarget)) == Double.MAX_VALUE) {
            concreteTarget = SelectLocation(((RoomType) target), behaviour);
          }
        }
        MoveTowards(concreteTarget);

      }
    }

    public boolean finishCondition() {
      return concreteTarget != null && ImAt(concreteTarget);
    }
  }
  public class UseAction_b0j_0 extends InstantBehaviourStep {
    /*package*/ Behaviour behaviour;
    public UseAction_b0j_0(Behaviour behaviour) {
      this.behaviour = behaviour;
    }

    public void execute() {

      ((Room) ToolBox().ReadMap().getCurrentRoom(CubicleNurse.this)).getParentArea().decrementResource(LFD.getInstance());
    }
  }
  public class StayAction_c0j_1 extends PassiveBehaviourStep {
    /*package*/ Behaviour behaviour;
    /*package*/ int testingTime = LFDExecutionTimeMap.getInstance().getProcessingTime();
    /*package*/ int timeExecuted = 0;
    public StayAction_c0j_1(Behaviour behaviour) {
      this.behaviour = behaviour;
    }

    public void execute() {
      // Do nothing 
      timeExecuted++;
    }

    public boolean finishCondition() {
      return timeExecuted == testingTime;
    }
  }
  public class Choice_d0j_1 extends InstantBehaviourStep {
    /*package*/ Behaviour behaviour;
    public Choice_d0j_1(Behaviour behaviour) {
      this.behaviour = behaviour;
    }

    public void execute() {
      if ((((patient) behaviour.getSignalTrigger().GetData("patient")).COVIDInfectionStatus == "Symptomatic") || (((patient) behaviour.getSignalTrigger().GetData("patient")).COVIDInfectionStatus == "Asymptomatic")) {
        ArrayList<BehaviourStep> plstSteps = new ArrayList();
        plstSteps.add(new Choice_a0d0j(behaviour));
        behaviour.injectSteps(plstSteps);
      } else {
        ArrayList<BehaviourStep> plstSteps = new ArrayList();
        plstSteps.add(new Choice_a0d0j_3(behaviour));
        behaviour.injectSteps(plstSteps);
      }
    }
  }
  public class Choice_a0d0j extends InstantBehaviourStep {
    /*package*/ Behaviour behaviour;
    public Choice_a0d0j(Behaviour behaviour) {
      this.behaviour = behaviour;
    }

    public void execute() {
      if (Dice(RunEnvironment.getInstance().getParameters().getDouble("LFDCOVIDSensitivity"))) {
        ArrayList<BehaviourStep> plstSteps = new ArrayList();
        plstSteps.add(new Consequence_a0a0d0j(behaviour));
        behaviour.injectSteps(plstSteps);
      } else {
        ArrayList<BehaviourStep> plstSteps = new ArrayList();
        plstSteps.add(new Consequence_a0a0d0j_1(behaviour));
        behaviour.injectSteps(plstSteps);
      }
    }
  }
  public class Choice_a0d0j_1 extends InstantBehaviourStep {
    /*package*/ Behaviour behaviour;
    public Choice_a0d0j_1(Behaviour behaviour) {
      this.behaviour = behaviour;
    }

    public void execute() {
      if (Dice(RunEnvironment.getInstance().getParameters().getDouble("LFDCOVIDSensitivity"))) {
        ArrayList<BehaviourStep> plstSteps = new ArrayList();
        plstSteps.add(new Consequence_a0a0d0j(behaviour));
        behaviour.injectSteps(plstSteps);
      } else {
        ArrayList<BehaviourStep> plstSteps = new ArrayList();
        plstSteps.add(new Consequence_a0a0d0j_1(behaviour));
        behaviour.injectSteps(plstSteps);
      }
    }
  }
  public class Consequence_a0a0d0j extends InstantBehaviourStep {
    /*package*/ Behaviour behaviour;
    public Consequence_a0a0d0j(Behaviour behaviour) {
      this.behaviour = behaviour;
    }

    public void execute() {
      ((patient) behaviour.getSignalTrigger().GetData("patient")).LFDCOVIDResult = "Positive";

    }
  }
  public class Consequence_a0a0d0j_0 extends InstantBehaviourStep {
    /*package*/ Behaviour behaviour;
    public Consequence_a0a0d0j_0(Behaviour behaviour) {
      this.behaviour = behaviour;
    }

    public void execute() {
      ((patient) behaviour.getSignalTrigger().GetData("patient")).LFDCOVIDResult = "Positive";

    }
  }
  public class Consequence_a0a0d0j_1 extends InstantBehaviourStep {
    /*package*/ Behaviour behaviour;
    public Consequence_a0a0d0j_1(Behaviour behaviour) {
      this.behaviour = behaviour;
    }

    public void execute() {
      ((patient) behaviour.getSignalTrigger().GetData("patient")).LFDCOVIDResult = "Negative";

    }
  }
  public class Consequence_a0a0d0j_2 extends InstantBehaviourStep {
    /*package*/ Behaviour behaviour;
    public Consequence_a0a0d0j_2(Behaviour behaviour) {
      this.behaviour = behaviour;
    }

    public void execute() {
      ((patient) behaviour.getSignalTrigger().GetData("patient")).LFDCOVIDResult = "Negative";

    }
  }
  public class Choice_a0d0j_3 extends InstantBehaviourStep {
    /*package*/ Behaviour behaviour;
    public Choice_a0d0j_3(Behaviour behaviour) {
      this.behaviour = behaviour;
    }

    public void execute() {
      if (Dice(RunEnvironment.getInstance().getParameters().getDouble("LFDCOVIDSpecificity"))) {
        ArrayList<BehaviourStep> plstSteps = new ArrayList();
        plstSteps.add(new Consequence_a0a0d0j_3(behaviour));
        behaviour.injectSteps(plstSteps);
      } else {
        ArrayList<BehaviourStep> plstSteps = new ArrayList();
        plstSteps.add(new Consequence_a0a0d0j_5(behaviour));
        behaviour.injectSteps(plstSteps);
      }
    }
  }
  public class Choice_a0d0j_5 extends InstantBehaviourStep {
    /*package*/ Behaviour behaviour;
    public Choice_a0d0j_5(Behaviour behaviour) {
      this.behaviour = behaviour;
    }

    public void execute() {
      if (Dice(RunEnvironment.getInstance().getParameters().getDouble("LFDCOVIDSpecificity"))) {
        ArrayList<BehaviourStep> plstSteps = new ArrayList();
        plstSteps.add(new Consequence_a0a0d0j_3(behaviour));
        behaviour.injectSteps(plstSteps);
      } else {
        ArrayList<BehaviourStep> plstSteps = new ArrayList();
        plstSteps.add(new Consequence_a0a0d0j_5(behaviour));
        behaviour.injectSteps(plstSteps);
      }
    }
  }
  public class Consequence_a0a0d0j_3 extends InstantBehaviourStep {
    /*package*/ Behaviour behaviour;
    public Consequence_a0a0d0j_3(Behaviour behaviour) {
      this.behaviour = behaviour;
    }

    public void execute() {
      ((patient) behaviour.getSignalTrigger().GetData("patient")).LFDCOVIDResult = "Negative";

    }
  }
  public class Consequence_a0a0d0j_4 extends InstantBehaviourStep {
    /*package*/ Behaviour behaviour;
    public Consequence_a0a0d0j_4(Behaviour behaviour) {
      this.behaviour = behaviour;
    }

    public void execute() {
      ((patient) behaviour.getSignalTrigger().GetData("patient")).LFDCOVIDResult = "Negative";

    }
  }
  public class Consequence_a0a0d0j_5 extends InstantBehaviourStep {
    /*package*/ Behaviour behaviour;
    public Consequence_a0a0d0j_5(Behaviour behaviour) {
      this.behaviour = behaviour;
    }

    public void execute() {
      ((patient) behaviour.getSignalTrigger().GetData("patient")).LFDCOVIDResult = "Positive";

    }
  }
  public class Consequence_a0a0d0j_6 extends InstantBehaviourStep {
    /*package*/ Behaviour behaviour;
    public Consequence_a0a0d0j_6(Behaviour behaviour) {
      this.behaviour = behaviour;
    }

    public void execute() {
      ((patient) behaviour.getSignalTrigger().GetData("patient")).LFDCOVIDResult = "Positive";

    }
  }
  public class Choice_e0j_1 extends InstantBehaviourStep {
    /*package*/ Behaviour behaviour;
    public Choice_e0j_1(Behaviour behaviour) {
      this.behaviour = behaviour;
    }

    public void execute() {
      if ((((patient) behaviour.getSignalTrigger().GetData("patient")).FluAInfectionStatus == "Symptomatic") || (((patient) behaviour.getSignalTrigger().GetData("patient")).FluAInfectionStatus == "Asymptomatic")) {
        ArrayList<BehaviourStep> plstSteps = new ArrayList();
        plstSteps.add(new Choice_a0e0j(behaviour));
        behaviour.injectSteps(plstSteps);
      } else {
        ArrayList<BehaviourStep> plstSteps = new ArrayList();
        plstSteps.add(new Choice_a0e0j_3(behaviour));
        behaviour.injectSteps(plstSteps);
      }
    }
  }
  public class Choice_a0e0j extends InstantBehaviourStep {
    /*package*/ Behaviour behaviour;
    public Choice_a0e0j(Behaviour behaviour) {
      this.behaviour = behaviour;
    }

    public void execute() {
      if (Dice(RunEnvironment.getInstance().getParameters().getDouble("LFDFluASensitivity"))) {
        ArrayList<BehaviourStep> plstSteps = new ArrayList();
        plstSteps.add(new Consequence_a0a0e0j(behaviour));
        behaviour.injectSteps(plstSteps);
      } else {
        ArrayList<BehaviourStep> plstSteps = new ArrayList();
        plstSteps.add(new Consequence_a0a0e0j_1(behaviour));
        behaviour.injectSteps(plstSteps);
      }
    }
  }
  public class Choice_a0e0j_1 extends InstantBehaviourStep {
    /*package*/ Behaviour behaviour;
    public Choice_a0e0j_1(Behaviour behaviour) {
      this.behaviour = behaviour;
    }

    public void execute() {
      if (Dice(RunEnvironment.getInstance().getParameters().getDouble("LFDFluASensitivity"))) {
        ArrayList<BehaviourStep> plstSteps = new ArrayList();
        plstSteps.add(new Consequence_a0a0e0j(behaviour));
        behaviour.injectSteps(plstSteps);
      } else {
        ArrayList<BehaviourStep> plstSteps = new ArrayList();
        plstSteps.add(new Consequence_a0a0e0j_1(behaviour));
        behaviour.injectSteps(plstSteps);
      }
    }
  }
  public class Consequence_a0a0e0j extends InstantBehaviourStep {
    /*package*/ Behaviour behaviour;
    public Consequence_a0a0e0j(Behaviour behaviour) {
      this.behaviour = behaviour;
    }

    public void execute() {
      ((patient) behaviour.getSignalTrigger().GetData("patient")).LFDFluAResult = "Positive";

    }
  }
  public class Consequence_a0a0e0j_0 extends InstantBehaviourStep {
    /*package*/ Behaviour behaviour;
    public Consequence_a0a0e0j_0(Behaviour behaviour) {
      this.behaviour = behaviour;
    }

    public void execute() {
      ((patient) behaviour.getSignalTrigger().GetData("patient")).LFDFluAResult = "Positive";

    }
  }
  public class Consequence_a0a0e0j_1 extends InstantBehaviourStep {
    /*package*/ Behaviour behaviour;
    public Consequence_a0a0e0j_1(Behaviour behaviour) {
      this.behaviour = behaviour;
    }

    public void execute() {
      ((patient) behaviour.getSignalTrigger().GetData("patient")).LFDFluAResult = "Negative";

    }
  }
  public class Consequence_a0a0e0j_2 extends InstantBehaviourStep {
    /*package*/ Behaviour behaviour;
    public Consequence_a0a0e0j_2(Behaviour behaviour) {
      this.behaviour = behaviour;
    }

    public void execute() {
      ((patient) behaviour.getSignalTrigger().GetData("patient")).LFDFluAResult = "Negative";

    }
  }
  public class Choice_a0e0j_3 extends InstantBehaviourStep {
    /*package*/ Behaviour behaviour;
    public Choice_a0e0j_3(Behaviour behaviour) {
      this.behaviour = behaviour;
    }

    public void execute() {
      if (Dice(RunEnvironment.getInstance().getParameters().getDouble("LFDFluASpecificity"))) {
        ArrayList<BehaviourStep> plstSteps = new ArrayList();
        plstSteps.add(new Consequence_a0a0e0j_3(behaviour));
        behaviour.injectSteps(plstSteps);
      } else {
        ArrayList<BehaviourStep> plstSteps = new ArrayList();
        plstSteps.add(new Consequence_a0a0e0j_5(behaviour));
        behaviour.injectSteps(plstSteps);
      }
    }
  }
  public class Choice_a0e0j_5 extends InstantBehaviourStep {
    /*package*/ Behaviour behaviour;
    public Choice_a0e0j_5(Behaviour behaviour) {
      this.behaviour = behaviour;
    }

    public void execute() {
      if (Dice(RunEnvironment.getInstance().getParameters().getDouble("LFDFluASpecificity"))) {
        ArrayList<BehaviourStep> plstSteps = new ArrayList();
        plstSteps.add(new Consequence_a0a0e0j_3(behaviour));
        behaviour.injectSteps(plstSteps);
      } else {
        ArrayList<BehaviourStep> plstSteps = new ArrayList();
        plstSteps.add(new Consequence_a0a0e0j_5(behaviour));
        behaviour.injectSteps(plstSteps);
      }
    }
  }
  public class Consequence_a0a0e0j_3 extends InstantBehaviourStep {
    /*package*/ Behaviour behaviour;
    public Consequence_a0a0e0j_3(Behaviour behaviour) {
      this.behaviour = behaviour;
    }

    public void execute() {
      ((patient) behaviour.getSignalTrigger().GetData("patient")).LFDFluAResult = "Negative";

    }
  }
  public class Consequence_a0a0e0j_4 extends InstantBehaviourStep {
    /*package*/ Behaviour behaviour;
    public Consequence_a0a0e0j_4(Behaviour behaviour) {
      this.behaviour = behaviour;
    }

    public void execute() {
      ((patient) behaviour.getSignalTrigger().GetData("patient")).LFDFluAResult = "Negative";

    }
  }
  public class Consequence_a0a0e0j_5 extends InstantBehaviourStep {
    /*package*/ Behaviour behaviour;
    public Consequence_a0a0e0j_5(Behaviour behaviour) {
      this.behaviour = behaviour;
    }

    public void execute() {
      ((patient) behaviour.getSignalTrigger().GetData("patient")).LFDFluAResult = "Positive";

    }
  }
  public class Consequence_a0a0e0j_6 extends InstantBehaviourStep {
    /*package*/ Behaviour behaviour;
    public Consequence_a0a0e0j_6(Behaviour behaviour) {
      this.behaviour = behaviour;
    }

    public void execute() {
      ((patient) behaviour.getSignalTrigger().GetData("patient")).LFDFluAResult = "Positive";

    }
  }
  public class Choice_f0j_1 extends InstantBehaviourStep {
    /*package*/ Behaviour behaviour;
    public Choice_f0j_1(Behaviour behaviour) {
      this.behaviour = behaviour;
    }

    public void execute() {
      if ((((patient) behaviour.getSignalTrigger().GetData("patient")).FluBInfectionStatus == "Symptomatic") || (((patient) behaviour.getSignalTrigger().GetData("patient")).FluBInfectionStatus == "Asymptomatic")) {
        ArrayList<BehaviourStep> plstSteps = new ArrayList();
        plstSteps.add(new Choice_a0f0j(behaviour));
        behaviour.injectSteps(plstSteps);
      } else {
        ArrayList<BehaviourStep> plstSteps = new ArrayList();
        plstSteps.add(new Choice_a0f0j_3(behaviour));
        behaviour.injectSteps(plstSteps);
      }
    }
  }
  public class Choice_a0f0j extends InstantBehaviourStep {
    /*package*/ Behaviour behaviour;
    public Choice_a0f0j(Behaviour behaviour) {
      this.behaviour = behaviour;
    }

    public void execute() {
      if (Dice(RunEnvironment.getInstance().getParameters().getDouble("LFDFluBSensitivity"))) {
        ArrayList<BehaviourStep> plstSteps = new ArrayList();
        plstSteps.add(new Consequence_a0a0f0j(behaviour));
        behaviour.injectSteps(plstSteps);
      } else {
        ArrayList<BehaviourStep> plstSteps = new ArrayList();
        plstSteps.add(new Consequence_a0a0f0j_1(behaviour));
        behaviour.injectSteps(plstSteps);
      }
    }
  }
  public class Choice_a0f0j_1 extends InstantBehaviourStep {
    /*package*/ Behaviour behaviour;
    public Choice_a0f0j_1(Behaviour behaviour) {
      this.behaviour = behaviour;
    }

    public void execute() {
      if (Dice(RunEnvironment.getInstance().getParameters().getDouble("LFDFluBSensitivity"))) {
        ArrayList<BehaviourStep> plstSteps = new ArrayList();
        plstSteps.add(new Consequence_a0a0f0j(behaviour));
        behaviour.injectSteps(plstSteps);
      } else {
        ArrayList<BehaviourStep> plstSteps = new ArrayList();
        plstSteps.add(new Consequence_a0a0f0j_1(behaviour));
        behaviour.injectSteps(plstSteps);
      }
    }
  }
  public class Consequence_a0a0f0j extends InstantBehaviourStep {
    /*package*/ Behaviour behaviour;
    public Consequence_a0a0f0j(Behaviour behaviour) {
      this.behaviour = behaviour;
    }

    public void execute() {
      ((patient) behaviour.getSignalTrigger().GetData("patient")).LFDFluBResult = "Positive";

    }
  }
  public class Consequence_a0a0f0j_0 extends InstantBehaviourStep {
    /*package*/ Behaviour behaviour;
    public Consequence_a0a0f0j_0(Behaviour behaviour) {
      this.behaviour = behaviour;
    }

    public void execute() {
      ((patient) behaviour.getSignalTrigger().GetData("patient")).LFDFluBResult = "Positive";

    }
  }
  public class Consequence_a0a0f0j_1 extends InstantBehaviourStep {
    /*package*/ Behaviour behaviour;
    public Consequence_a0a0f0j_1(Behaviour behaviour) {
      this.behaviour = behaviour;
    }

    public void execute() {
      ((patient) behaviour.getSignalTrigger().GetData("patient")).LFDFluBResult = "Negative";

    }
  }
  public class Consequence_a0a0f0j_2 extends InstantBehaviourStep {
    /*package*/ Behaviour behaviour;
    public Consequence_a0a0f0j_2(Behaviour behaviour) {
      this.behaviour = behaviour;
    }

    public void execute() {
      ((patient) behaviour.getSignalTrigger().GetData("patient")).LFDFluBResult = "Negative";

    }
  }
  public class Choice_a0f0j_3 extends InstantBehaviourStep {
    /*package*/ Behaviour behaviour;
    public Choice_a0f0j_3(Behaviour behaviour) {
      this.behaviour = behaviour;
    }

    public void execute() {
      if (Dice(RunEnvironment.getInstance().getParameters().getDouble("LFDFluBSpecificity"))) {
        ArrayList<BehaviourStep> plstSteps = new ArrayList();
        plstSteps.add(new Consequence_a0a0f0j_3(behaviour));
        behaviour.injectSteps(plstSteps);
      } else {
        ArrayList<BehaviourStep> plstSteps = new ArrayList();
        plstSteps.add(new Consequence_a0a0f0j_5(behaviour));
        behaviour.injectSteps(plstSteps);
      }
    }
  }
  public class Choice_a0f0j_5 extends InstantBehaviourStep {
    /*package*/ Behaviour behaviour;
    public Choice_a0f0j_5(Behaviour behaviour) {
      this.behaviour = behaviour;
    }

    public void execute() {
      if (Dice(RunEnvironment.getInstance().getParameters().getDouble("LFDFluBSpecificity"))) {
        ArrayList<BehaviourStep> plstSteps = new ArrayList();
        plstSteps.add(new Consequence_a0a0f0j_3(behaviour));
        behaviour.injectSteps(plstSteps);
      } else {
        ArrayList<BehaviourStep> plstSteps = new ArrayList();
        plstSteps.add(new Consequence_a0a0f0j_5(behaviour));
        behaviour.injectSteps(plstSteps);
      }
    }
  }
  public class Consequence_a0a0f0j_3 extends InstantBehaviourStep {
    /*package*/ Behaviour behaviour;
    public Consequence_a0a0f0j_3(Behaviour behaviour) {
      this.behaviour = behaviour;
    }

    public void execute() {
      ((patient) behaviour.getSignalTrigger().GetData("patient")).LFDFluBResult = "Negative";

    }
  }
  public class Consequence_a0a0f0j_4 extends InstantBehaviourStep {
    /*package*/ Behaviour behaviour;
    public Consequence_a0a0f0j_4(Behaviour behaviour) {
      this.behaviour = behaviour;
    }

    public void execute() {
      ((patient) behaviour.getSignalTrigger().GetData("patient")).LFDFluBResult = "Negative";

    }
  }
  public class Consequence_a0a0f0j_5 extends InstantBehaviourStep {
    /*package*/ Behaviour behaviour;
    public Consequence_a0a0f0j_5(Behaviour behaviour) {
      this.behaviour = behaviour;
    }

    public void execute() {
      ((patient) behaviour.getSignalTrigger().GetData("patient")).LFDFluBResult = "Positive";

    }
  }
  public class Consequence_a0a0f0j_6 extends InstantBehaviourStep {
    /*package*/ Behaviour behaviour;
    public Consequence_a0a0f0j_6(Behaviour behaviour) {
      this.behaviour = behaviour;
    }

    public void execute() {
      ((patient) behaviour.getSignalTrigger().GetData("patient")).LFDFluBResult = "Positive";

    }
  }
  public class Choice_g0j_1 extends InstantBehaviourStep {
    /*package*/ Behaviour behaviour;
    public Choice_g0j_1(Behaviour behaviour) {
      this.behaviour = behaviour;
    }

    public void execute() {
      if (((patient) behaviour.getSignalTrigger().GetData("patient")).LFDCOVIDResult == "Negative") {
        ArrayList<BehaviourStep> plstSteps = new ArrayList();
        plstSteps.add(new SendSignalAction_a0g0j(behaviour));
        behaviour.injectSteps(plstSteps);
      } else {
        ArrayList<BehaviourStep> plstSteps = new ArrayList();
        behaviour.injectSteps(plstSteps);
      }
    }
  }
  public class SendSignalAction_a0g0j extends BehaviourStep {
    /*package*/ Behaviour behaviour;

    public SendSignalAction_a0g0j(Behaviour behaviour) {
      this.behaviour = behaviour;
    }

    public void execute() {
      Board b = ReadBoard();
      Signal sendSignalTemp = new Signal();
      sendSignalTemp = new DecideandapplyPOCTTrigger_dSignal();
      sendSignalTemp.AddData("patient", behaviour.getSignalTrigger().GetData("patient"));

      b.PushMission(sendSignalTemp);
    }
  }
  public class SendSignalAction_a0g0j_1 extends BehaviourStep {
    /*package*/ Behaviour behaviour;

    public SendSignalAction_a0g0j_1(Behaviour behaviour) {
      this.behaviour = behaviour;
    }

    public void execute() {
      Board b = ReadBoard();
      Signal sendSignalTemp = new Signal();
      sendSignalTemp = new DecideandapplyPOCTTrigger_dSignal();
      sendSignalTemp.AddData("patient", behaviour.getSignalTrigger().GetData("patient"));

      b.PushMission(sendSignalTemp);
    }
  }
  public class Choice_h0j_1 extends InstantBehaviourStep {
    /*package*/ Behaviour behaviour;
    public Choice_h0j_1(Behaviour behaviour) {
      this.behaviour = behaviour;
    }

    public void execute() {
      if (((patient) behaviour.getSignalTrigger().GetData("patient")).LFDCOVIDResult == "Positive") {
        ArrayList<BehaviourStep> plstSteps = new ArrayList();
        plstSteps.add(new SendSignalAction_a0h0j(behaviour));
        behaviour.injectSteps(plstSteps);
      } else {
        ArrayList<BehaviourStep> plstSteps = new ArrayList();
        behaviour.injectSteps(plstSteps);
      }
    }
  }
  public class SendSignalAction_a0h0j extends BehaviourStep {
    /*package*/ Behaviour behaviour;

    public SendSignalAction_a0h0j(Behaviour behaviour) {
      this.behaviour = behaviour;
    }

    public void execute() {
      Board b = ReadBoard();
      Signal sendSignalTemp = new Signal();
      sendSignalTemp = new PCRTrigger_fSignal();
      sendSignalTemp.AddData("patient", behaviour.getSignalTrigger().GetData("patient"));

      b.PushMission(sendSignalTemp);
    }
  }
  public class SendSignalAction_a0h0j_1 extends BehaviourStep {
    /*package*/ Behaviour behaviour;

    public SendSignalAction_a0h0j_1(Behaviour behaviour) {
      this.behaviour = behaviour;
    }

    public void execute() {
      Board b = ReadBoard();
      Signal sendSignalTemp = new Signal();
      sendSignalTemp = new PCRTrigger_fSignal();
      sendSignalTemp.AddData("patient", behaviour.getSignalTrigger().GetData("patient"));

      b.PushMission(sendSignalTemp);
    }
  }
  public class StayAction_i0j_1 extends BehaviourStep {
    /*package*/ Behaviour behaviour;
    /*package*/ int timeExecuted = 0;
    public StayAction_i0j_1(Behaviour behaviour) {
      this.behaviour = behaviour;
    }

    public void execute() {
      // Do nothing 
      timeExecuted++;
    }

    public boolean finishCondition() {
      return (timeExecuted == (60 / RunEnvironment.getInstance().getParameters().getInteger("SecondsPerTick")));

    }
  }
  public class MoveAction_a0k extends BehaviourStep {
    /*package*/ Behaviour behaviour;
    /*package*/ Object target;
    /*package*/ Object concreteTarget;
    public MoveAction_a0k(Behaviour behaviour) {
      target = NonRespiratoryCubicle.getInstance();
      this.behaviour = behaviour;
    }

    public void execute() {
      if (concreteTarget == null) {
        if (target instanceof RoomType) {
          concreteTarget = SelectLocation(((RoomType) target), behaviour);
        } else {
          concreteTarget = target;
        }
      }

      if (concreteTarget != null) {
        if (target instanceof RoomType) {
          if (EvaluateRoomChoice(((Room) concreteTarget)) == Double.MAX_VALUE) {
            concreteTarget = SelectLocation(((RoomType) target), behaviour);
          }
        }
        MoveTowards(concreteTarget);

      }
    }

    public boolean finishCondition() {
      return concreteTarget != null && ImAt(concreteTarget);
    }
  }
  public class UseAction_b0k extends InstantBehaviourStep {
    /*package*/ Behaviour behaviour;
    public UseAction_b0k(Behaviour behaviour) {
      this.behaviour = behaviour;
    }

    public void execute() {

      ((Room) ToolBox().ReadMap().getCurrentRoom(CubicleNurse.this)).getParentArea().decrementResource(LFD.getInstance());
    }
  }
  public class StayAction_c0k extends PassiveBehaviourStep {
    /*package*/ Behaviour behaviour;
    /*package*/ int testingTime = LFDExecutionTimeMap.getInstance().getProcessingTime();
    /*package*/ int timeExecuted = 0;
    public StayAction_c0k(Behaviour behaviour) {
      this.behaviour = behaviour;
    }

    public void execute() {
      // Do nothing 
      timeExecuted++;
    }

    public boolean finishCondition() {
      return timeExecuted == testingTime;
    }
  }
  public class Choice_d0k extends InstantBehaviourStep {
    /*package*/ Behaviour behaviour;
    public Choice_d0k(Behaviour behaviour) {
      this.behaviour = behaviour;
    }

    public void execute() {
      if ((((patient) behaviour.getSignalTrigger().GetData("patient")).COVIDInfectionStatus == "Symptomatic") || (((patient) behaviour.getSignalTrigger().GetData("patient")).COVIDInfectionStatus == "Asymptomatic")) {
        ArrayList<BehaviourStep> plstSteps = new ArrayList();
        plstSteps.add(new Choice_a0d0k(behaviour));
        behaviour.injectSteps(plstSteps);
      } else {
        ArrayList<BehaviourStep> plstSteps = new ArrayList();
        plstSteps.add(new Choice_a0d0k_3(behaviour));
        behaviour.injectSteps(plstSteps);
      }
    }
  }
  public class Choice_e0k extends InstantBehaviourStep {
    /*package*/ Behaviour behaviour;
    public Choice_e0k(Behaviour behaviour) {
      this.behaviour = behaviour;
    }

    public void execute() {
      if ((((patient) behaviour.getSignalTrigger().GetData("patient")).FluAInfectionStatus == "Symptomatic") || (((patient) behaviour.getSignalTrigger().GetData("patient")).FluAInfectionStatus == "Asymptomatic")) {
        ArrayList<BehaviourStep> plstSteps = new ArrayList();
        plstSteps.add(new Choice_a0e0k(behaviour));
        behaviour.injectSteps(plstSteps);
      } else {
        ArrayList<BehaviourStep> plstSteps = new ArrayList();
        plstSteps.add(new Choice_a0e0k_3(behaviour));
        behaviour.injectSteps(plstSteps);
      }
    }
  }
  public class Choice_f0k extends InstantBehaviourStep {
    /*package*/ Behaviour behaviour;
    public Choice_f0k(Behaviour behaviour) {
      this.behaviour = behaviour;
    }

    public void execute() {
      if ((((patient) behaviour.getSignalTrigger().GetData("patient")).FluBInfectionStatus == "Symptomatic") || (((patient) behaviour.getSignalTrigger().GetData("patient")).FluBInfectionStatus == "Asymptomatic")) {
        ArrayList<BehaviourStep> plstSteps = new ArrayList();
        plstSteps.add(new Choice_a0f0k(behaviour));
        behaviour.injectSteps(plstSteps);
      } else {
        ArrayList<BehaviourStep> plstSteps = new ArrayList();
        plstSteps.add(new Choice_a0f0k_3(behaviour));
        behaviour.injectSteps(plstSteps);
      }
    }
  }
  public class Choice_g0k extends InstantBehaviourStep {
    /*package*/ Behaviour behaviour;
    public Choice_g0k(Behaviour behaviour) {
      this.behaviour = behaviour;
    }

    public void execute() {
      if (((patient) behaviour.getSignalTrigger().GetData("patient")).LFDCOVIDResult == "Positive" && !((((patient) behaviour.getSignalTrigger().GetData("patient")).Severity == "low"))) {
        ArrayList<BehaviourStep> plstSteps = new ArrayList();
        plstSteps.add(new SendSignalAction_a0g0k(behaviour));
        behaviour.injectSteps(plstSteps);
      } else {
        ArrayList<BehaviourStep> plstSteps = new ArrayList();
        behaviour.injectSteps(plstSteps);
      }
    }
  }
  public class Choice_h0k extends InstantBehaviourStep {
    /*package*/ Behaviour behaviour;
    public Choice_h0k(Behaviour behaviour) {
      this.behaviour = behaviour;
    }

    public void execute() {
      if (((patient) behaviour.getSignalTrigger().GetData("patient")).LFDCOVIDResult == "Negative" && !((((patient) behaviour.getSignalTrigger().GetData("patient")).Severity == "low"))) {
        ArrayList<BehaviourStep> plstSteps = new ArrayList();
        plstSteps.add(new SendSignalAction_a0h0k(behaviour));
        behaviour.injectSteps(plstSteps);
      } else {
        ArrayList<BehaviourStep> plstSteps = new ArrayList();
        behaviour.injectSteps(plstSteps);
      }
    }
  }
  public class Choice_i0k extends InstantBehaviourStep {
    /*package*/ Behaviour behaviour;
    public Choice_i0k(Behaviour behaviour) {
      this.behaviour = behaviour;
    }

    public void execute() {
      if (((patient) behaviour.getSignalTrigger().GetData("patient")).Severity == "low") {
        ArrayList<BehaviourStep> plstSteps = new ArrayList();
        plstSteps.add(new SendSignalAction_a0i0k(behaviour));
        behaviour.injectSteps(plstSteps);
      } else {
        ArrayList<BehaviourStep> plstSteps = new ArrayList();
        behaviour.injectSteps(plstSteps);
      }
    }
  }
  public class StayAction_j0k extends BehaviourStep {
    /*package*/ Behaviour behaviour;
    /*package*/ int timeExecuted = 0;
    public StayAction_j0k(Behaviour behaviour) {
      this.behaviour = behaviour;
    }

    public void execute() {
      // Do nothing 
      timeExecuted++;
    }

    public boolean finishCondition() {
      return (timeExecuted == (60 / RunEnvironment.getInstance().getParameters().getInteger("SecondsPerTick")));

    }
  }
  public class MoveAction_a0k_1 extends BehaviourStep {
    /*package*/ Behaviour behaviour;
    /*package*/ Object target;
    /*package*/ Object concreteTarget;
    public MoveAction_a0k_1(Behaviour behaviour) {
      target = NonRespiratoryCubicle.getInstance();
      this.behaviour = behaviour;
    }

    public void execute() {
      if (concreteTarget == null) {
        if (target instanceof RoomType) {
          concreteTarget = SelectLocation(((RoomType) target), behaviour);
        } else {
          concreteTarget = target;
        }
      }

      if (concreteTarget != null) {
        if (target instanceof RoomType) {
          if (EvaluateRoomChoice(((Room) concreteTarget)) == Double.MAX_VALUE) {
            concreteTarget = SelectLocation(((RoomType) target), behaviour);
          }
        }
        MoveTowards(concreteTarget);

      }
    }

    public boolean finishCondition() {
      return concreteTarget != null && ImAt(concreteTarget);
    }
  }
  public class UseAction_b0k_0 extends InstantBehaviourStep {
    /*package*/ Behaviour behaviour;
    public UseAction_b0k_0(Behaviour behaviour) {
      this.behaviour = behaviour;
    }

    public void execute() {

      ((Room) ToolBox().ReadMap().getCurrentRoom(CubicleNurse.this)).getParentArea().decrementResource(LFD.getInstance());
    }
  }
  public class StayAction_c0k_1 extends PassiveBehaviourStep {
    /*package*/ Behaviour behaviour;
    /*package*/ int testingTime = LFDExecutionTimeMap.getInstance().getProcessingTime();
    /*package*/ int timeExecuted = 0;
    public StayAction_c0k_1(Behaviour behaviour) {
      this.behaviour = behaviour;
    }

    public void execute() {
      // Do nothing 
      timeExecuted++;
    }

    public boolean finishCondition() {
      return timeExecuted == testingTime;
    }
  }
  public class Choice_d0k_1 extends InstantBehaviourStep {
    /*package*/ Behaviour behaviour;
    public Choice_d0k_1(Behaviour behaviour) {
      this.behaviour = behaviour;
    }

    public void execute() {
      if ((((patient) behaviour.getSignalTrigger().GetData("patient")).COVIDInfectionStatus == "Symptomatic") || (((patient) behaviour.getSignalTrigger().GetData("patient")).COVIDInfectionStatus == "Asymptomatic")) {
        ArrayList<BehaviourStep> plstSteps = new ArrayList();
        plstSteps.add(new Choice_a0d0k(behaviour));
        behaviour.injectSteps(plstSteps);
      } else {
        ArrayList<BehaviourStep> plstSteps = new ArrayList();
        plstSteps.add(new Choice_a0d0k_3(behaviour));
        behaviour.injectSteps(plstSteps);
      }
    }
  }
  public class Choice_a0d0k extends InstantBehaviourStep {
    /*package*/ Behaviour behaviour;
    public Choice_a0d0k(Behaviour behaviour) {
      this.behaviour = behaviour;
    }

    public void execute() {
      if (Dice(RunEnvironment.getInstance().getParameters().getDouble("LFDCOVIDSensitivity"))) {
        ArrayList<BehaviourStep> plstSteps = new ArrayList();
        plstSteps.add(new Consequence_a0a0d0k(behaviour));
        behaviour.injectSteps(plstSteps);
      } else {
        ArrayList<BehaviourStep> plstSteps = new ArrayList();
        plstSteps.add(new Consequence_a0a0d0k_1(behaviour));
        behaviour.injectSteps(plstSteps);
      }
    }
  }
  public class Choice_a0d0k_1 extends InstantBehaviourStep {
    /*package*/ Behaviour behaviour;
    public Choice_a0d0k_1(Behaviour behaviour) {
      this.behaviour = behaviour;
    }

    public void execute() {
      if (Dice(RunEnvironment.getInstance().getParameters().getDouble("LFDCOVIDSensitivity"))) {
        ArrayList<BehaviourStep> plstSteps = new ArrayList();
        plstSteps.add(new Consequence_a0a0d0k(behaviour));
        behaviour.injectSteps(plstSteps);
      } else {
        ArrayList<BehaviourStep> plstSteps = new ArrayList();
        plstSteps.add(new Consequence_a0a0d0k_1(behaviour));
        behaviour.injectSteps(plstSteps);
      }
    }
  }
  public class Consequence_a0a0d0k extends InstantBehaviourStep {
    /*package*/ Behaviour behaviour;
    public Consequence_a0a0d0k(Behaviour behaviour) {
      this.behaviour = behaviour;
    }

    public void execute() {
      ((patient) behaviour.getSignalTrigger().GetData("patient")).LFDCOVIDResult = "Positive";

    }
  }
  public class Consequence_a0a0d0k_0 extends InstantBehaviourStep {
    /*package*/ Behaviour behaviour;
    public Consequence_a0a0d0k_0(Behaviour behaviour) {
      this.behaviour = behaviour;
    }

    public void execute() {
      ((patient) behaviour.getSignalTrigger().GetData("patient")).LFDCOVIDResult = "Positive";

    }
  }
  public class Consequence_a0a0d0k_1 extends InstantBehaviourStep {
    /*package*/ Behaviour behaviour;
    public Consequence_a0a0d0k_1(Behaviour behaviour) {
      this.behaviour = behaviour;
    }

    public void execute() {
      ((patient) behaviour.getSignalTrigger().GetData("patient")).LFDCOVIDResult = "Negative";

    }
  }
  public class Consequence_a0a0d0k_2 extends InstantBehaviourStep {
    /*package*/ Behaviour behaviour;
    public Consequence_a0a0d0k_2(Behaviour behaviour) {
      this.behaviour = behaviour;
    }

    public void execute() {
      ((patient) behaviour.getSignalTrigger().GetData("patient")).LFDCOVIDResult = "Negative";

    }
  }
  public class Choice_a0d0k_3 extends InstantBehaviourStep {
    /*package*/ Behaviour behaviour;
    public Choice_a0d0k_3(Behaviour behaviour) {
      this.behaviour = behaviour;
    }

    public void execute() {
      if (Dice(RunEnvironment.getInstance().getParameters().getDouble("LFDCOVIDSpecificity"))) {
        ArrayList<BehaviourStep> plstSteps = new ArrayList();
        plstSteps.add(new Consequence_a0a0d0k_3(behaviour));
        behaviour.injectSteps(plstSteps);
      } else {
        ArrayList<BehaviourStep> plstSteps = new ArrayList();
        plstSteps.add(new Consequence_a0a0d0k_5(behaviour));
        behaviour.injectSteps(plstSteps);
      }
    }
  }
  public class Choice_a0d0k_5 extends InstantBehaviourStep {
    /*package*/ Behaviour behaviour;
    public Choice_a0d0k_5(Behaviour behaviour) {
      this.behaviour = behaviour;
    }

    public void execute() {
      if (Dice(RunEnvironment.getInstance().getParameters().getDouble("LFDCOVIDSpecificity"))) {
        ArrayList<BehaviourStep> plstSteps = new ArrayList();
        plstSteps.add(new Consequence_a0a0d0k_3(behaviour));
        behaviour.injectSteps(plstSteps);
      } else {
        ArrayList<BehaviourStep> plstSteps = new ArrayList();
        plstSteps.add(new Consequence_a0a0d0k_5(behaviour));
        behaviour.injectSteps(plstSteps);
      }
    }
  }
  public class Consequence_a0a0d0k_3 extends InstantBehaviourStep {
    /*package*/ Behaviour behaviour;
    public Consequence_a0a0d0k_3(Behaviour behaviour) {
      this.behaviour = behaviour;
    }

    public void execute() {
      ((patient) behaviour.getSignalTrigger().GetData("patient")).LFDCOVIDResult = "Negative";

    }
  }
  public class Consequence_a0a0d0k_4 extends InstantBehaviourStep {
    /*package*/ Behaviour behaviour;
    public Consequence_a0a0d0k_4(Behaviour behaviour) {
      this.behaviour = behaviour;
    }

    public void execute() {
      ((patient) behaviour.getSignalTrigger().GetData("patient")).LFDCOVIDResult = "Negative";

    }
  }
  public class Consequence_a0a0d0k_5 extends InstantBehaviourStep {
    /*package*/ Behaviour behaviour;
    public Consequence_a0a0d0k_5(Behaviour behaviour) {
      this.behaviour = behaviour;
    }

    public void execute() {
      ((patient) behaviour.getSignalTrigger().GetData("patient")).LFDCOVIDResult = "Positive";

    }
  }
  public class Consequence_a0a0d0k_6 extends InstantBehaviourStep {
    /*package*/ Behaviour behaviour;
    public Consequence_a0a0d0k_6(Behaviour behaviour) {
      this.behaviour = behaviour;
    }

    public void execute() {
      ((patient) behaviour.getSignalTrigger().GetData("patient")).LFDCOVIDResult = "Positive";

    }
  }
  public class Choice_e0k_1 extends InstantBehaviourStep {
    /*package*/ Behaviour behaviour;
    public Choice_e0k_1(Behaviour behaviour) {
      this.behaviour = behaviour;
    }

    public void execute() {
      if ((((patient) behaviour.getSignalTrigger().GetData("patient")).FluAInfectionStatus == "Symptomatic") || (((patient) behaviour.getSignalTrigger().GetData("patient")).FluAInfectionStatus == "Asymptomatic")) {
        ArrayList<BehaviourStep> plstSteps = new ArrayList();
        plstSteps.add(new Choice_a0e0k(behaviour));
        behaviour.injectSteps(plstSteps);
      } else {
        ArrayList<BehaviourStep> plstSteps = new ArrayList();
        plstSteps.add(new Choice_a0e0k_3(behaviour));
        behaviour.injectSteps(plstSteps);
      }
    }
  }
  public class Choice_a0e0k extends InstantBehaviourStep {
    /*package*/ Behaviour behaviour;
    public Choice_a0e0k(Behaviour behaviour) {
      this.behaviour = behaviour;
    }

    public void execute() {
      if (Dice(RunEnvironment.getInstance().getParameters().getDouble("LFDFluASensitivity"))) {
        ArrayList<BehaviourStep> plstSteps = new ArrayList();
        plstSteps.add(new Consequence_a0a0e0k(behaviour));
        behaviour.injectSteps(plstSteps);
      } else {
        ArrayList<BehaviourStep> plstSteps = new ArrayList();
        plstSteps.add(new Consequence_a0a0e0k_1(behaviour));
        behaviour.injectSteps(plstSteps);
      }
    }
  }
  public class Choice_a0e0k_1 extends InstantBehaviourStep {
    /*package*/ Behaviour behaviour;
    public Choice_a0e0k_1(Behaviour behaviour) {
      this.behaviour = behaviour;
    }

    public void execute() {
      if (Dice(RunEnvironment.getInstance().getParameters().getDouble("LFDFluASensitivity"))) {
        ArrayList<BehaviourStep> plstSteps = new ArrayList();
        plstSteps.add(new Consequence_a0a0e0k(behaviour));
        behaviour.injectSteps(plstSteps);
      } else {
        ArrayList<BehaviourStep> plstSteps = new ArrayList();
        plstSteps.add(new Consequence_a0a0e0k_1(behaviour));
        behaviour.injectSteps(plstSteps);
      }
    }
  }
  public class Consequence_a0a0e0k extends InstantBehaviourStep {
    /*package*/ Behaviour behaviour;
    public Consequence_a0a0e0k(Behaviour behaviour) {
      this.behaviour = behaviour;
    }

    public void execute() {
      ((patient) behaviour.getSignalTrigger().GetData("patient")).LFDFluAResult = "Positive";

    }
  }
  public class Consequence_a0a0e0k_0 extends InstantBehaviourStep {
    /*package*/ Behaviour behaviour;
    public Consequence_a0a0e0k_0(Behaviour behaviour) {
      this.behaviour = behaviour;
    }

    public void execute() {
      ((patient) behaviour.getSignalTrigger().GetData("patient")).LFDFluAResult = "Positive";

    }
  }
  public class Consequence_a0a0e0k_1 extends InstantBehaviourStep {
    /*package*/ Behaviour behaviour;
    public Consequence_a0a0e0k_1(Behaviour behaviour) {
      this.behaviour = behaviour;
    }

    public void execute() {
      ((patient) behaviour.getSignalTrigger().GetData("patient")).LFDFluAResult = "Negative";

    }
  }
  public class Consequence_a0a0e0k_2 extends InstantBehaviourStep {
    /*package*/ Behaviour behaviour;
    public Consequence_a0a0e0k_2(Behaviour behaviour) {
      this.behaviour = behaviour;
    }

    public void execute() {
      ((patient) behaviour.getSignalTrigger().GetData("patient")).LFDFluAResult = "Negative";

    }
  }
  public class Choice_a0e0k_3 extends InstantBehaviourStep {
    /*package*/ Behaviour behaviour;
    public Choice_a0e0k_3(Behaviour behaviour) {
      this.behaviour = behaviour;
    }

    public void execute() {
      if (Dice(RunEnvironment.getInstance().getParameters().getDouble("LFDFluASpecificity"))) {
        ArrayList<BehaviourStep> plstSteps = new ArrayList();
        plstSteps.add(new Consequence_a0a0e0k_3(behaviour));
        behaviour.injectSteps(plstSteps);
      } else {
        ArrayList<BehaviourStep> plstSteps = new ArrayList();
        plstSteps.add(new Consequence_a0a0e0k_5(behaviour));
        behaviour.injectSteps(plstSteps);
      }
    }
  }
  public class Choice_a0e0k_5 extends InstantBehaviourStep {
    /*package*/ Behaviour behaviour;
    public Choice_a0e0k_5(Behaviour behaviour) {
      this.behaviour = behaviour;
    }

    public void execute() {
      if (Dice(RunEnvironment.getInstance().getParameters().getDouble("LFDFluASpecificity"))) {
        ArrayList<BehaviourStep> plstSteps = new ArrayList();
        plstSteps.add(new Consequence_a0a0e0k_3(behaviour));
        behaviour.injectSteps(plstSteps);
      } else {
        ArrayList<BehaviourStep> plstSteps = new ArrayList();
        plstSteps.add(new Consequence_a0a0e0k_5(behaviour));
        behaviour.injectSteps(plstSteps);
      }
    }
  }
  public class Consequence_a0a0e0k_3 extends InstantBehaviourStep {
    /*package*/ Behaviour behaviour;
    public Consequence_a0a0e0k_3(Behaviour behaviour) {
      this.behaviour = behaviour;
    }

    public void execute() {
      ((patient) behaviour.getSignalTrigger().GetData("patient")).LFDFluAResult = "Negative";

    }
  }
  public class Consequence_a0a0e0k_4 extends InstantBehaviourStep {
    /*package*/ Behaviour behaviour;
    public Consequence_a0a0e0k_4(Behaviour behaviour) {
      this.behaviour = behaviour;
    }

    public void execute() {
      ((patient) behaviour.getSignalTrigger().GetData("patient")).LFDFluAResult = "Negative";

    }
  }
  public class Consequence_a0a0e0k_5 extends InstantBehaviourStep {
    /*package*/ Behaviour behaviour;
    public Consequence_a0a0e0k_5(Behaviour behaviour) {
      this.behaviour = behaviour;
    }

    public void execute() {
      ((patient) behaviour.getSignalTrigger().GetData("patient")).LFDFluAResult = "Positive";

    }
  }
  public class Consequence_a0a0e0k_6 extends InstantBehaviourStep {
    /*package*/ Behaviour behaviour;
    public Consequence_a0a0e0k_6(Behaviour behaviour) {
      this.behaviour = behaviour;
    }

    public void execute() {
      ((patient) behaviour.getSignalTrigger().GetData("patient")).LFDFluAResult = "Positive";

    }
  }
  public class Choice_f0k_1 extends InstantBehaviourStep {
    /*package*/ Behaviour behaviour;
    public Choice_f0k_1(Behaviour behaviour) {
      this.behaviour = behaviour;
    }

    public void execute() {
      if ((((patient) behaviour.getSignalTrigger().GetData("patient")).FluBInfectionStatus == "Symptomatic") || (((patient) behaviour.getSignalTrigger().GetData("patient")).FluBInfectionStatus == "Asymptomatic")) {
        ArrayList<BehaviourStep> plstSteps = new ArrayList();
        plstSteps.add(new Choice_a0f0k(behaviour));
        behaviour.injectSteps(plstSteps);
      } else {
        ArrayList<BehaviourStep> plstSteps = new ArrayList();
        plstSteps.add(new Choice_a0f0k_3(behaviour));
        behaviour.injectSteps(plstSteps);
      }
    }
  }
  public class Choice_a0f0k extends InstantBehaviourStep {
    /*package*/ Behaviour behaviour;
    public Choice_a0f0k(Behaviour behaviour) {
      this.behaviour = behaviour;
    }

    public void execute() {
      if (Dice(RunEnvironment.getInstance().getParameters().getDouble("LFDFluBSensitivity"))) {
        ArrayList<BehaviourStep> plstSteps = new ArrayList();
        plstSteps.add(new Consequence_a0a0f0k(behaviour));
        behaviour.injectSteps(plstSteps);
      } else {
        ArrayList<BehaviourStep> plstSteps = new ArrayList();
        plstSteps.add(new Consequence_a0a0f0k_1(behaviour));
        behaviour.injectSteps(plstSteps);
      }
    }
  }
  public class Choice_a0f0k_1 extends InstantBehaviourStep {
    /*package*/ Behaviour behaviour;
    public Choice_a0f0k_1(Behaviour behaviour) {
      this.behaviour = behaviour;
    }

    public void execute() {
      if (Dice(RunEnvironment.getInstance().getParameters().getDouble("LFDFluBSensitivity"))) {
        ArrayList<BehaviourStep> plstSteps = new ArrayList();
        plstSteps.add(new Consequence_a0a0f0k(behaviour));
        behaviour.injectSteps(plstSteps);
      } else {
        ArrayList<BehaviourStep> plstSteps = new ArrayList();
        plstSteps.add(new Consequence_a0a0f0k_1(behaviour));
        behaviour.injectSteps(plstSteps);
      }
    }
  }
  public class Consequence_a0a0f0k extends InstantBehaviourStep {
    /*package*/ Behaviour behaviour;
    public Consequence_a0a0f0k(Behaviour behaviour) {
      this.behaviour = behaviour;
    }

    public void execute() {
      ((patient) behaviour.getSignalTrigger().GetData("patient")).LFDFluBResult = "Positive";

    }
  }
  public class Consequence_a0a0f0k_0 extends InstantBehaviourStep {
    /*package*/ Behaviour behaviour;
    public Consequence_a0a0f0k_0(Behaviour behaviour) {
      this.behaviour = behaviour;
    }

    public void execute() {
      ((patient) behaviour.getSignalTrigger().GetData("patient")).LFDFluBResult = "Positive";

    }
  }
  public class Consequence_a0a0f0k_1 extends InstantBehaviourStep {
    /*package*/ Behaviour behaviour;
    public Consequence_a0a0f0k_1(Behaviour behaviour) {
      this.behaviour = behaviour;
    }

    public void execute() {
      ((patient) behaviour.getSignalTrigger().GetData("patient")).LFDFluBResult = "Negative";

    }
  }
  public class Consequence_a0a0f0k_2 extends InstantBehaviourStep {
    /*package*/ Behaviour behaviour;
    public Consequence_a0a0f0k_2(Behaviour behaviour) {
      this.behaviour = behaviour;
    }

    public void execute() {
      ((patient) behaviour.getSignalTrigger().GetData("patient")).LFDFluBResult = "Negative";

    }
  }
  public class Choice_a0f0k_3 extends InstantBehaviourStep {
    /*package*/ Behaviour behaviour;
    public Choice_a0f0k_3(Behaviour behaviour) {
      this.behaviour = behaviour;
    }

    public void execute() {
      if (Dice(RunEnvironment.getInstance().getParameters().getDouble("LFDFluBSpecificity"))) {
        ArrayList<BehaviourStep> plstSteps = new ArrayList();
        plstSteps.add(new Consequence_a0a0f0k_3(behaviour));
        behaviour.injectSteps(plstSteps);
      } else {
        ArrayList<BehaviourStep> plstSteps = new ArrayList();
        plstSteps.add(new Consequence_a0a0f0k_5(behaviour));
        behaviour.injectSteps(plstSteps);
      }
    }
  }
  public class Choice_a0f0k_5 extends InstantBehaviourStep {
    /*package*/ Behaviour behaviour;
    public Choice_a0f0k_5(Behaviour behaviour) {
      this.behaviour = behaviour;
    }

    public void execute() {
      if (Dice(RunEnvironment.getInstance().getParameters().getDouble("LFDFluBSpecificity"))) {
        ArrayList<BehaviourStep> plstSteps = new ArrayList();
        plstSteps.add(new Consequence_a0a0f0k_3(behaviour));
        behaviour.injectSteps(plstSteps);
      } else {
        ArrayList<BehaviourStep> plstSteps = new ArrayList();
        plstSteps.add(new Consequence_a0a0f0k_5(behaviour));
        behaviour.injectSteps(plstSteps);
      }
    }
  }
  public class Consequence_a0a0f0k_3 extends InstantBehaviourStep {
    /*package*/ Behaviour behaviour;
    public Consequence_a0a0f0k_3(Behaviour behaviour) {
      this.behaviour = behaviour;
    }

    public void execute() {
      ((patient) behaviour.getSignalTrigger().GetData("patient")).LFDFluBResult = "Negative";

    }
  }
  public class Consequence_a0a0f0k_4 extends InstantBehaviourStep {
    /*package*/ Behaviour behaviour;
    public Consequence_a0a0f0k_4(Behaviour behaviour) {
      this.behaviour = behaviour;
    }

    public void execute() {
      ((patient) behaviour.getSignalTrigger().GetData("patient")).LFDFluBResult = "Negative";

    }
  }
  public class Consequence_a0a0f0k_5 extends InstantBehaviourStep {
    /*package*/ Behaviour behaviour;
    public Consequence_a0a0f0k_5(Behaviour behaviour) {
      this.behaviour = behaviour;
    }

    public void execute() {
      ((patient) behaviour.getSignalTrigger().GetData("patient")).LFDFluBResult = "Positive";

    }
  }
  public class Consequence_a0a0f0k_6 extends InstantBehaviourStep {
    /*package*/ Behaviour behaviour;
    public Consequence_a0a0f0k_6(Behaviour behaviour) {
      this.behaviour = behaviour;
    }

    public void execute() {
      ((patient) behaviour.getSignalTrigger().GetData("patient")).LFDFluBResult = "Positive";

    }
  }
  public class Choice_g0k_1 extends InstantBehaviourStep {
    /*package*/ Behaviour behaviour;
    public Choice_g0k_1(Behaviour behaviour) {
      this.behaviour = behaviour;
    }

    public void execute() {
      if (((patient) behaviour.getSignalTrigger().GetData("patient")).LFDCOVIDResult == "Positive" && !((((patient) behaviour.getSignalTrigger().GetData("patient")).Severity == "low"))) {
        ArrayList<BehaviourStep> plstSteps = new ArrayList();
        plstSteps.add(new SendSignalAction_a0g0k(behaviour));
        behaviour.injectSteps(plstSteps);
      } else {
        ArrayList<BehaviourStep> plstSteps = new ArrayList();
        behaviour.injectSteps(plstSteps);
      }
    }
  }
  public class SendSignalAction_a0g0k extends BehaviourStep {
    /*package*/ Behaviour behaviour;

    public SendSignalAction_a0g0k(Behaviour behaviour) {
      this.behaviour = behaviour;
    }

    public void execute() {
      Board b = ReadBoard();
      Signal sendSignalTemp = new Signal();
      sendSignalTemp = new DecideandapplyPOCTTrigger_dSignal();
      sendSignalTemp.AddData("patient", behaviour.getSignalTrigger().GetData("patient"));

      b.PushMission(sendSignalTemp);
    }
  }
  public class SendSignalAction_a0g0k_1 extends BehaviourStep {
    /*package*/ Behaviour behaviour;

    public SendSignalAction_a0g0k_1(Behaviour behaviour) {
      this.behaviour = behaviour;
    }

    public void execute() {
      Board b = ReadBoard();
      Signal sendSignalTemp = new Signal();
      sendSignalTemp = new DecideandapplyPOCTTrigger_dSignal();
      sendSignalTemp.AddData("patient", behaviour.getSignalTrigger().GetData("patient"));

      b.PushMission(sendSignalTemp);
    }
  }
  public class Choice_h0k_1 extends InstantBehaviourStep {
    /*package*/ Behaviour behaviour;
    public Choice_h0k_1(Behaviour behaviour) {
      this.behaviour = behaviour;
    }

    public void execute() {
      if (((patient) behaviour.getSignalTrigger().GetData("patient")).LFDCOVIDResult == "Negative" && !((((patient) behaviour.getSignalTrigger().GetData("patient")).Severity == "low"))) {
        ArrayList<BehaviourStep> plstSteps = new ArrayList();
        plstSteps.add(new SendSignalAction_a0h0k(behaviour));
        behaviour.injectSteps(plstSteps);
      } else {
        ArrayList<BehaviourStep> plstSteps = new ArrayList();
        behaviour.injectSteps(plstSteps);
      }
    }
  }
  public class SendSignalAction_a0h0k extends BehaviourStep {
    /*package*/ Behaviour behaviour;

    public SendSignalAction_a0h0k(Behaviour behaviour) {
      this.behaviour = behaviour;
    }

    public void execute() {
      Board b = ReadBoard();
      Signal sendSignalTemp = new Signal();
      sendSignalTemp = new IfadmittinggotoamberanddoPCRTrigger_eSignal();
      sendSignalTemp.AddData("patient", behaviour.getSignalTrigger().GetData("patient"));

      b.PushMission(sendSignalTemp);
    }
  }
  public class SendSignalAction_a0h0k_1 extends BehaviourStep {
    /*package*/ Behaviour behaviour;

    public SendSignalAction_a0h0k_1(Behaviour behaviour) {
      this.behaviour = behaviour;
    }

    public void execute() {
      Board b = ReadBoard();
      Signal sendSignalTemp = new Signal();
      sendSignalTemp = new IfadmittinggotoamberanddoPCRTrigger_eSignal();
      sendSignalTemp.AddData("patient", behaviour.getSignalTrigger().GetData("patient"));

      b.PushMission(sendSignalTemp);
    }
  }
  public class Choice_i0k_1 extends InstantBehaviourStep {
    /*package*/ Behaviour behaviour;
    public Choice_i0k_1(Behaviour behaviour) {
      this.behaviour = behaviour;
    }

    public void execute() {
      if (((patient) behaviour.getSignalTrigger().GetData("patient")).Severity == "low") {
        ArrayList<BehaviourStep> plstSteps = new ArrayList();
        plstSteps.add(new SendSignalAction_a0i0k(behaviour));
        behaviour.injectSteps(plstSteps);
      } else {
        ArrayList<BehaviourStep> plstSteps = new ArrayList();
        behaviour.injectSteps(plstSteps);
      }
    }
  }
  public class SendSignalAction_a0i0k extends BehaviourStep {
    /*package*/ Behaviour behaviour;

    public SendSignalAction_a0i0k(Behaviour behaviour) {
      this.behaviour = behaviour;
    }

    public void execute() {
      Board b = ReadBoard();
      Signal sendSignalTemp = new Signal();
      sendSignalTemp = new DischargeTrigger_iSignal();
      sendSignalTemp.AddData("patient", behaviour.getSignalTrigger().GetData("patient"));

      b.PushMission(sendSignalTemp);
    }
  }
  public class SendSignalAction_a0i0k_1 extends BehaviourStep {
    /*package*/ Behaviour behaviour;

    public SendSignalAction_a0i0k_1(Behaviour behaviour) {
      this.behaviour = behaviour;
    }

    public void execute() {
      Board b = ReadBoard();
      Signal sendSignalTemp = new Signal();
      sendSignalTemp = new DischargeTrigger_iSignal();
      sendSignalTemp.AddData("patient", behaviour.getSignalTrigger().GetData("patient"));

      b.PushMission(sendSignalTemp);
    }
  }
  public class StayAction_j0k_1 extends BehaviourStep {
    /*package*/ Behaviour behaviour;
    /*package*/ int timeExecuted = 0;
    public StayAction_j0k_1(Behaviour behaviour) {
      this.behaviour = behaviour;
    }

    public void execute() {
      // Do nothing 
      timeExecuted++;
    }

    public boolean finishCondition() {
      return (timeExecuted == (60 / RunEnvironment.getInstance().getParameters().getInteger("SecondsPerTick")));

    }
  }
  public class StayForConditionAction_a0l extends BehaviourStep {
    /*package*/ Behaviour behaviour;

    public StayForConditionAction_a0l(Behaviour behaviour) {
      this.behaviour = behaviour;
    }

    public void execute() {
      // Do nothing 
    }

    public boolean finishCondition() {
      return ImAt(behaviour.getSignalTrigger().GetData("patient"));
    }
  }
  public class StayAction_b0l extends BehaviourStep {
    /*package*/ Behaviour behaviour;
    /*package*/ int timeExecuted = 0;
    public StayAction_b0l(Behaviour behaviour) {
      this.behaviour = behaviour;
    }

    public void execute() {
      // Do nothing 
      timeExecuted++;
    }

    public boolean finishCondition() {
      return (timeExecuted == (180 / RunEnvironment.getInstance().getParameters().getInteger("SecondsPerTick")));

    }
  }
  public class SendSignalAction_c0l extends BehaviourStep {
    /*package*/ Behaviour behaviour;

    public SendSignalAction_c0l(Behaviour behaviour) {
      this.behaviour = behaviour;
    }

    public void execute() {
      Board b = ReadBoard();
      Signal sendSignalTemp = new Signal();
      sendSignalTemp = new ProcessTestatBoothTrigger_bSignal();
      sendSignalTemp.AddData("patient", behaviour.getSignalTrigger().GetData("patient"));

      b.PushMission(sendSignalTemp);
    }
  }
  public class StayAction_d0l extends BehaviourStep {
    /*package*/ Behaviour behaviour;
    /*package*/ int timeExecuted = 0;
    public StayAction_d0l(Behaviour behaviour) {
      this.behaviour = behaviour;
    }

    public void execute() {
      // Do nothing 
      timeExecuted++;
    }

    public boolean finishCondition() {
      return (timeExecuted == (60 / RunEnvironment.getInstance().getParameters().getInteger("SecondsPerTick")));

    }
  }
  public class StayForConditionAction_a0l_0 extends BehaviourStep {
    /*package*/ Behaviour behaviour;

    public StayForConditionAction_a0l_0(Behaviour behaviour) {
      this.behaviour = behaviour;
    }

    public void execute() {
      // Do nothing 
    }

    public boolean finishCondition() {
      return ImAt(behaviour.getSignalTrigger().GetData("patient"));
    }
  }
  public class StayAction_b0l_1 extends BehaviourStep {
    /*package*/ Behaviour behaviour;
    /*package*/ int timeExecuted = 0;
    public StayAction_b0l_1(Behaviour behaviour) {
      this.behaviour = behaviour;
    }

    public void execute() {
      // Do nothing 
      timeExecuted++;
    }

    public boolean finishCondition() {
      return (timeExecuted == (180 / RunEnvironment.getInstance().getParameters().getInteger("SecondsPerTick")));

    }
  }
  public class SendSignalAction_c0l_1 extends BehaviourStep {
    /*package*/ Behaviour behaviour;

    public SendSignalAction_c0l_1(Behaviour behaviour) {
      this.behaviour = behaviour;
    }

    public void execute() {
      Board b = ReadBoard();
      Signal sendSignalTemp = new Signal();
      sendSignalTemp = new ProcessTestatBoothTrigger_bSignal();
      sendSignalTemp.AddData("patient", behaviour.getSignalTrigger().GetData("patient"));

      b.PushMission(sendSignalTemp);
    }
  }
  public class StayAction_d0l_1 extends BehaviourStep {
    /*package*/ Behaviour behaviour;
    /*package*/ int timeExecuted = 0;
    public StayAction_d0l_1(Behaviour behaviour) {
      this.behaviour = behaviour;
    }

    public void execute() {
      // Do nothing 
      timeExecuted++;
    }

    public boolean finishCondition() {
      return (timeExecuted == (60 / RunEnvironment.getInstance().getParameters().getInteger("SecondsPerTick")));

    }
  }
  public class MoveAction_a0m extends BehaviourStep {
    /*package*/ Behaviour behaviour;
    /*package*/ Object target;
    /*package*/ Object concreteTarget;
    public MoveAction_a0m(Behaviour behaviour) {
      target = LIATBooth.getInstance();
      this.behaviour = behaviour;
    }

    public void execute() {
      if (concreteTarget == null) {
        if (target instanceof RoomType) {
          concreteTarget = SelectLocation(((RoomType) target), behaviour);
        } else {
          concreteTarget = target;
        }
      }

      if (concreteTarget != null) {
        if (target instanceof RoomType) {
          if (EvaluateRoomChoice(((Room) concreteTarget)) == Double.MAX_VALUE) {
            concreteTarget = SelectLocation(((RoomType) target), behaviour);
          }
        }
        MoveTowards(concreteTarget);

      }
    }

    public boolean finishCondition() {
      return concreteTarget != null && ImAt(concreteTarget);
    }
  }
  public class StayAction_b0m extends PassiveBehaviourStep {
    /*package*/ Behaviour behaviour;
    /*package*/ int testingTime = TimeDistributionTable_a1_0.getInstance().getProcessingTime();
    /*package*/ int timeExecuted = 0;
    public StayAction_b0m(Behaviour behaviour) {
      this.behaviour = behaviour;
    }

    public void execute() {
      // Do nothing 
      timeExecuted++;
    }

    public boolean finishCondition() {
      return timeExecuted == testingTime;
    }
  }
  public class SendSignalAction_c0m extends BehaviourStep {
    /*package*/ Behaviour behaviour;

    public SendSignalAction_c0m(Behaviour behaviour) {
      this.behaviour = behaviour;
    }

    public void execute() {
      Board b = ReadBoard();
      Signal sendSignalTemp = new Signal();
      sendSignalTemp = new CollectSampleTrigger_cSignal();
      sendSignalTemp.AddData("patient", behaviour.getSignalTrigger().GetData("patient"));

      b.PushMission(sendSignalTemp);
    }
  }
  public class StayAction_d0m extends BehaviourStep {
    /*package*/ Behaviour behaviour;
    /*package*/ int timeExecuted = 0;
    public StayAction_d0m(Behaviour behaviour) {
      this.behaviour = behaviour;
    }

    public void execute() {
      // Do nothing 
      timeExecuted++;
    }

    public boolean finishCondition() {
      return (timeExecuted == (60 / RunEnvironment.getInstance().getParameters().getInteger("SecondsPerTick")));

    }
  }
  public class MoveAction_a0m_1 extends BehaviourStep {
    /*package*/ Behaviour behaviour;
    /*package*/ Object target;
    /*package*/ Object concreteTarget;
    public MoveAction_a0m_1(Behaviour behaviour) {
      target = LIATBooth.getInstance();
      this.behaviour = behaviour;
    }

    public void execute() {
      if (concreteTarget == null) {
        if (target instanceof RoomType) {
          concreteTarget = SelectLocation(((RoomType) target), behaviour);
        } else {
          concreteTarget = target;
        }
      }

      if (concreteTarget != null) {
        if (target instanceof RoomType) {
          if (EvaluateRoomChoice(((Room) concreteTarget)) == Double.MAX_VALUE) {
            concreteTarget = SelectLocation(((RoomType) target), behaviour);
          }
        }
        MoveTowards(concreteTarget);

      }
    }

    public boolean finishCondition() {
      return concreteTarget != null && ImAt(concreteTarget);
    }
  }
  public class StayAction_b0m_1 extends PassiveBehaviourStep {
    /*package*/ Behaviour behaviour;
    /*package*/ int testingTime = TimeDistributionTable_a1_0.getInstance().getProcessingTime();
    /*package*/ int timeExecuted = 0;
    public StayAction_b0m_1(Behaviour behaviour) {
      this.behaviour = behaviour;
    }

    public void execute() {
      // Do nothing 
      timeExecuted++;
    }

    public boolean finishCondition() {
      return timeExecuted == testingTime;
    }
  }
  public class SendSignalAction_c0m_1 extends BehaviourStep {
    /*package*/ Behaviour behaviour;

    public SendSignalAction_c0m_1(Behaviour behaviour) {
      this.behaviour = behaviour;
    }

    public void execute() {
      Board b = ReadBoard();
      Signal sendSignalTemp = new Signal();
      sendSignalTemp = new CollectSampleTrigger_cSignal();
      sendSignalTemp.AddData("patient", behaviour.getSignalTrigger().GetData("patient"));

      b.PushMission(sendSignalTemp);
    }
  }
  public class StayAction_d0m_1 extends BehaviourStep {
    /*package*/ Behaviour behaviour;
    /*package*/ int timeExecuted = 0;
    public StayAction_d0m_1(Behaviour behaviour) {
      this.behaviour = behaviour;
    }

    public void execute() {
      // Do nothing 
      timeExecuted++;
    }

    public boolean finishCondition() {
      return (timeExecuted == (60 / RunEnvironment.getInstance().getParameters().getInteger("SecondsPerTick")));

    }
  }
  public class MoveAction_a0n extends BehaviourStep {
    /*package*/ Behaviour behaviour;
    /*package*/ Object target;
    /*package*/ Object concreteTarget;
    public MoveAction_a0n(Behaviour behaviour) {
      target = LIATBooth.getInstance();
      this.behaviour = behaviour;
    }

    public void execute() {
      if (concreteTarget == null) {
        if (target instanceof RoomType) {
          concreteTarget = SelectLocation(((RoomType) target), behaviour);
        } else {
          concreteTarget = target;
        }
      }

      if (concreteTarget != null) {
        if (target instanceof RoomType) {
          if (EvaluateRoomChoice(((Room) concreteTarget)) == Double.MAX_VALUE) {
            concreteTarget = SelectLocation(((RoomType) target), behaviour);
          }
        }
        MoveTowards(concreteTarget);

      }
    }

    public boolean finishCondition() {
      return concreteTarget != null && ImAt(concreteTarget);
    }
  }
  public class StayAction_b0n extends BehaviourStep {
    /*package*/ Behaviour behaviour;
    /*package*/ int timeExecuted = 0;
    public StayAction_b0n(Behaviour behaviour) {
      this.behaviour = behaviour;
    }

    public void execute() {
      // Do nothing 
      timeExecuted++;
    }

    public boolean finishCondition() {
      return (timeExecuted == (60 / RunEnvironment.getInstance().getParameters().getInteger("SecondsPerTick")));

    }
  }
  public class StayAction_c0n extends BehaviourStep {
    /*package*/ Behaviour behaviour;
    /*package*/ int timeExecuted = 0;
    public StayAction_c0n(Behaviour behaviour) {
      this.behaviour = behaviour;
    }

    public void execute() {
      // Do nothing 
      timeExecuted++;
    }

    public boolean finishCondition() {
      return (timeExecuted == (60 / RunEnvironment.getInstance().getParameters().getInteger("SecondsPerTick")));

    }
  }
  public class MoveAction_a0n_1 extends BehaviourStep {
    /*package*/ Behaviour behaviour;
    /*package*/ Object target;
    /*package*/ Object concreteTarget;
    public MoveAction_a0n_1(Behaviour behaviour) {
      target = LIATBooth.getInstance();
      this.behaviour = behaviour;
    }

    public void execute() {
      if (concreteTarget == null) {
        if (target instanceof RoomType) {
          concreteTarget = SelectLocation(((RoomType) target), behaviour);
        } else {
          concreteTarget = target;
        }
      }

      if (concreteTarget != null) {
        if (target instanceof RoomType) {
          if (EvaluateRoomChoice(((Room) concreteTarget)) == Double.MAX_VALUE) {
            concreteTarget = SelectLocation(((RoomType) target), behaviour);
          }
        }
        MoveTowards(concreteTarget);

      }
    }

    public boolean finishCondition() {
      return concreteTarget != null && ImAt(concreteTarget);
    }
  }
  public class StayAction_b0n_1 extends BehaviourStep {
    /*package*/ Behaviour behaviour;
    /*package*/ int timeExecuted = 0;
    public StayAction_b0n_1(Behaviour behaviour) {
      this.behaviour = behaviour;
    }

    public void execute() {
      // Do nothing 
      timeExecuted++;
    }

    public boolean finishCondition() {
      return (timeExecuted == (60 / RunEnvironment.getInstance().getParameters().getInteger("SecondsPerTick")));

    }
  }
  public class StayAction_c0n_1 extends BehaviourStep {
    /*package*/ Behaviour behaviour;
    /*package*/ int timeExecuted = 0;
    public StayAction_c0n_1(Behaviour behaviour) {
      this.behaviour = behaviour;
    }

    public void execute() {
      // Do nothing 
      timeExecuted++;
    }

    public boolean finishCondition() {
      return (timeExecuted == (60 / RunEnvironment.getInstance().getParameters().getInteger("SecondsPerTick")));

    }
  }
  public class MoveAction_a0a_23 extends BehaviourStep {
    /*package*/ Behaviour behaviour;
    /*package*/ Object target;
    /*package*/ Object concreteTarget;
    public MoveAction_a0a_23(Behaviour behaviour) {
      target = WaitingRoom.getInstance();
      this.behaviour = behaviour;
    }

    public void execute() {
      if (concreteTarget == null) {
        if (target instanceof RoomType) {
          concreteTarget = SelectLocation(((RoomType) target), behaviour);
        } else {
          concreteTarget = target;
        }
      }

      if (concreteTarget != null) {
        if (target instanceof RoomType) {
          if (EvaluateRoomChoice(((Room) concreteTarget)) == Double.MAX_VALUE) {
            concreteTarget = SelectLocation(((RoomType) target), behaviour);
          }
        }
        MoveTowards(concreteTarget);

      }
    }

    public boolean finishCondition() {
      return concreteTarget != null && ImAt(concreteTarget);
    }
  }
  public class StayAction_b0a_3 extends BehaviourStep {
    /*package*/ Behaviour behaviour;
    /*package*/ int timeExecuted = 0;
    public StayAction_b0a_3(Behaviour behaviour) {
      this.behaviour = behaviour;
    }

    public void execute() {
      // Do nothing 
      timeExecuted++;
    }

    public boolean finishCondition() {
      return (timeExecuted == (60 / RunEnvironment.getInstance().getParameters().getInteger("SecondsPerTick")));

    }
  }
  public class MoveAction_a0a_25 extends BehaviourStep {
    /*package*/ Behaviour behaviour;
    /*package*/ Object target;
    /*package*/ Object concreteTarget;
    public MoveAction_a0a_25(Behaviour behaviour) {
      target = WaitingRoom.getInstance();
      this.behaviour = behaviour;
    }

    public void execute() {
      if (concreteTarget == null) {
        if (target instanceof RoomType) {
          concreteTarget = SelectLocation(((RoomType) target), behaviour);
        } else {
          concreteTarget = target;
        }
      }

      if (concreteTarget != null) {
        if (target instanceof RoomType) {
          if (EvaluateRoomChoice(((Room) concreteTarget)) == Double.MAX_VALUE) {
            concreteTarget = SelectLocation(((RoomType) target), behaviour);
          }
        }
        MoveTowards(concreteTarget);

      }
    }

    public boolean finishCondition() {
      return concreteTarget != null && ImAt(concreteTarget);
    }
  }
  public class StayAction_b0a_5 extends BehaviourStep {
    /*package*/ Behaviour behaviour;
    /*package*/ int timeExecuted = 0;
    public StayAction_b0a_5(Behaviour behaviour) {
      this.behaviour = behaviour;
    }

    public void execute() {
      // Do nothing 
      timeExecuted++;
    }

    public boolean finishCondition() {
      return (timeExecuted == (60 / RunEnvironment.getInstance().getParameters().getInteger("SecondsPerTick")));

    }
  }


  public void InitLFT_b(Signal s) {
    behaviourBuilder.setSignalTrigger(s);
    ArrayList<BehaviourStep> plstSteps = new ArrayList();
    plstSteps.add(new MoveAction_a0a_7(behaviourBuilder));
    plstSteps.add(new OrderAction_b0a_3(behaviourBuilder));
    plstSteps.add(new StayForConditionAction_c0a_0(behaviourBuilder));
    plstSteps.add(new StayAction_d0a(behaviourBuilder));
    plstSteps.add(new SendSignalAction_e0a(behaviourBuilder));
    plstSteps.add(new StayAction_f0a(behaviourBuilder));
    behaviourBuilder.setSteps(plstSteps);

    Signal sendSignalTemp = new Signal();

  }
  public void InitLFT_c(Signal s) {
    behaviourBuilder.setSignalTrigger(s);
    ArrayList<BehaviourStep> plstSteps = new ArrayList();
    plstSteps.add(new MoveAction_a0b(behaviourBuilder));
    plstSteps.add(new OrderAction_b0b(behaviourBuilder));
    plstSteps.add(new StayForConditionAction_c0b(behaviourBuilder));
    plstSteps.add(new StayAction_d0b(behaviourBuilder));
    plstSteps.add(new SendSignalAction_e0b(behaviourBuilder));
    plstSteps.add(new OrderAction_f0b(behaviourBuilder));
    plstSteps.add(new StayAction_g0b(behaviourBuilder));
    behaviourBuilder.setSteps(plstSteps);

    Signal sendSignalTemp = new Signal();

  }
  public void InitDecideandapplyPOCT_d(Signal s) {
    behaviourBuilder.setSignalTrigger(s);
    ArrayList<BehaviourStep> plstSteps = new ArrayList();
    plstSteps.add(new MoveAction_a0c(behaviourBuilder));
    plstSteps.add(new OrderAction_b0c(behaviourBuilder));
    plstSteps.add(new StayForConditionAction_c0c(behaviourBuilder));
    plstSteps.add(new ProbabilityDistribution_d0c(behaviourBuilder));
    plstSteps.add(new Choice_e0c(behaviourBuilder));
    plstSteps.add(new Choice_f0c(behaviourBuilder));
    plstSteps.add(new Choice_g0c(behaviourBuilder));
    plstSteps.add(new StayAction_h0c(behaviourBuilder));
    behaviourBuilder.setSteps(plstSteps);

    Signal sendSignalTemp = new Signal();

  }
  public void InitIfadmittinggotoamberanddoPCR_e(Signal s) {
    behaviourBuilder.setSignalTrigger(s);
    ArrayList<BehaviourStep> plstSteps = new ArrayList();
    plstSteps.add(new MoveAction_a0d_3(behaviourBuilder));
    plstSteps.add(new OrderAction_b0d(behaviourBuilder));
    plstSteps.add(new StayForConditionAction_c0d(behaviourBuilder));
    plstSteps.add(new StayAction_d0d_1(behaviourBuilder));
    plstSteps.add(new SendSignalAction_e0d(behaviourBuilder));
    plstSteps.add(new StayAction_f0d(behaviourBuilder));
    behaviourBuilder.setSteps(plstSteps);

    Signal sendSignalTemp = new Signal();

  }
  public void InitAdmitActionAdmitAmber_m(Signal s) {
    behaviourBuilder.setSignalTrigger(s);
    ArrayList<BehaviourStep> plstSteps = new ArrayList();
    plstSteps.add(new MoveAction_a0e_3(behaviourBuilder));
    plstSteps.add(new MoveAction_b0e_3(behaviourBuilder));
    plstSteps.add(new OrderAction_c0e_3(behaviourBuilder));
    plstSteps.add(new StayForConditionAction_d0e_1(behaviourBuilder));
    plstSteps.add(new Consequence_e0e_1(behaviourBuilder));
    plstSteps.add(new RemoveRelationshipAction_f0e_1(behaviourBuilder));
    plstSteps.add(new SendSignalAction_g0e(behaviourBuilder));
    behaviourBuilder.setSteps(plstSteps);

    Signal sendSignalTemp = new Signal();

  }
  public void InitDischargeActionDischarge_n(Signal s) {
    behaviourBuilder.setSignalTrigger(s);
    ArrayList<BehaviourStep> plstSteps = new ArrayList();
    plstSteps.add(new MoveAction_a0f_3(behaviourBuilder));
    plstSteps.add(new OrderAction_b0f_3(behaviourBuilder));
    plstSteps.add(new StayForConditionAction_c0f_1(behaviourBuilder));
    plstSteps.add(new Consequence_d0f_1(behaviourBuilder));
    plstSteps.add(new RemoveRelationshipAction_e0f_1(behaviourBuilder));
    behaviourBuilder.setSteps(plstSteps);

    Signal sendSignalTemp = new Signal();

  }
  public void InitWait15_a(Signal s) {
    behaviourBuilder.setSignalTrigger(s);
    ArrayList<BehaviourStep> plstSteps = new ArrayList();
    plstSteps.add(new MoveAction_a0g(behaviourBuilder));
    plstSteps.add(new StayAction_b0g(behaviourBuilder));
    plstSteps.add(new SendSignalAction_c0g(behaviourBuilder));
    plstSteps.add(new StayAction_d0g(behaviourBuilder));
    behaviourBuilder.setSteps(plstSteps);

    Signal sendSignalTemp = new Signal();

  }
  public void InitDone_b(Signal s) {
    behaviourBuilder.setSignalTrigger(s);
    ArrayList<BehaviourStep> plstSteps = new ArrayList();
    plstSteps.add(new MoveAction_a0h(behaviourBuilder));
    plstSteps.add(new StayAction_b0h(behaviourBuilder));
    plstSteps.add(new SendSignalAction_c0h(behaviourBuilder));
    plstSteps.add(new StayAction_d0h(behaviourBuilder));
    behaviourBuilder.setSteps(plstSteps);

    Signal sendSignalTemp = new Signal();

  }
  public void InitTakesample_c(Signal s) {
    behaviourBuilder.setSignalTrigger(s);
    ArrayList<BehaviourStep> plstSteps = new ArrayList();
    plstSteps.add(new MoveAction_a0i(behaviourBuilder));
    plstSteps.add(new OrderAction_b0i(behaviourBuilder));
    plstSteps.add(new StayForConditionAction_c0i(behaviourBuilder));
    plstSteps.add(new StayAction_d0i(behaviourBuilder));
    plstSteps.add(new SendSignalAction_e0i(behaviourBuilder));
    plstSteps.add(new StayAction_f0i(behaviourBuilder));
    behaviourBuilder.setSteps(plstSteps);

    Signal sendSignalTemp = new Signal();

  }
  public void InitGetTestResult_d(Signal s) {
    behaviourBuilder.setSignalTrigger(s);
    ArrayList<BehaviourStep> plstSteps = new ArrayList();
    plstSteps.add(new MoveAction_a0j(behaviourBuilder));
    plstSteps.add(new UseAction_b0j(behaviourBuilder));
    plstSteps.add(new StayAction_c0j(behaviourBuilder));
    plstSteps.add(new Choice_d0j(behaviourBuilder));
    plstSteps.add(new Choice_e0j(behaviourBuilder));
    plstSteps.add(new Choice_f0j(behaviourBuilder));
    plstSteps.add(new Choice_g0j(behaviourBuilder));
    plstSteps.add(new Choice_h0j(behaviourBuilder));
    plstSteps.add(new StayAction_i0j(behaviourBuilder));
    behaviourBuilder.setSteps(plstSteps);

    Signal sendSignalTemp = new Signal();

  }
  public void InitGetTestResult_e(Signal s) {
    behaviourBuilder.setSignalTrigger(s);
    ArrayList<BehaviourStep> plstSteps = new ArrayList();
    plstSteps.add(new MoveAction_a0k(behaviourBuilder));
    plstSteps.add(new UseAction_b0k(behaviourBuilder));
    plstSteps.add(new StayAction_c0k(behaviourBuilder));
    plstSteps.add(new Choice_d0k(behaviourBuilder));
    plstSteps.add(new Choice_e0k(behaviourBuilder));
    plstSteps.add(new Choice_f0k(behaviourBuilder));
    plstSteps.add(new Choice_g0k(behaviourBuilder));
    plstSteps.add(new Choice_h0k(behaviourBuilder));
    plstSteps.add(new Choice_i0k(behaviourBuilder));
    plstSteps.add(new StayAction_j0k(behaviourBuilder));
    behaviourBuilder.setSteps(plstSteps);

    Signal sendSignalTemp = new Signal();

  }
  public void InitTakesample_a(Signal s) {
    behaviourBuilder.setSignalTrigger(s);
    ArrayList<BehaviourStep> plstSteps = new ArrayList();
    plstSteps.add(new StayForConditionAction_a0l(behaviourBuilder));
    plstSteps.add(new StayAction_b0l(behaviourBuilder));
    plstSteps.add(new SendSignalAction_c0l(behaviourBuilder));
    plstSteps.add(new StayAction_d0l(behaviourBuilder));
    behaviourBuilder.setSteps(plstSteps);

    Signal sendSignalTemp = new Signal();

  }
  public void InitProcessTestatBooth_b(Signal s) {
    behaviourBuilder.setSignalTrigger(s);
    ArrayList<BehaviourStep> plstSteps = new ArrayList();
    plstSteps.add(new MoveAction_a0m(behaviourBuilder));
    plstSteps.add(new StayAction_b0m(behaviourBuilder));
    plstSteps.add(new SendSignalAction_c0m(behaviourBuilder));
    plstSteps.add(new StayAction_d0m(behaviourBuilder));
    behaviourBuilder.setSteps(plstSteps);

    Signal sendSignalTemp = new Signal();

  }
  public void InitCollectSample_c(Signal s) {
    behaviourBuilder.setSignalTrigger(s);
    ArrayList<BehaviourStep> plstSteps = new ArrayList();
    plstSteps.add(new MoveAction_a0n(behaviourBuilder));
    plstSteps.add(new StayAction_b0n(behaviourBuilder));
    plstSteps.add(new StayAction_c0n(behaviourBuilder));
    behaviourBuilder.setSteps(plstSteps);

    Signal sendSignalTemp = new Signal();

  }

}
