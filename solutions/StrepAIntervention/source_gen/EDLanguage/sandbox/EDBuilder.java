package EDLanguage.sandbox;

/*Generated by MPS */

import repast.simphony.dataLoader.ContextBuilder;
import repast.simphony.context.Context;
import simcore.basicStructures.ToolBox;
import repast.simphony.parameter.Parameters;
import repast.simphony.engine.environment.RunEnvironment;
import simcore.utilities.ModelParameterStore;
import repast.simphony.context.space.continuous.ContinuousSpaceFactory;
import repast.simphony.context.space.continuous.ContinuousSpaceFactoryFinder;
import repast.simphony.space.continuous.ContinuousSpace;
import simcore.utilities.StaffAdder;
import repast.simphony.space.continuous.StrictBorders;
import repast.simphony.context.space.grid.GridFactory;
import repast.simphony.context.space.grid.GridFactoryFinder;
import repast.simphony.space.grid.Grid;
import repast.simphony.space.grid.GridBuilderParameters;
import repast.simphony.space.grid.SimpleGridAdder;
import simcore.basicStructures.Board;
import repast.simphony.valueLayer.GridValueLayer;
import simcore.basicStructures.Area;
import java.awt.Color;
import simcore.basicStructures.Room;
import repast.simphony.space.continuous.NdPoint;
import repast.simphony.context.space.graph.NetworkBuilder;
import repast.simphony.engine.schedule.ISchedule;
import repast.simphony.engine.schedule.ScheduleParameters;
import java.util.HashMap;
import simcore.utilities.PatientArrivalStore;
import java.util.Map;
import simcore.basicStructures.Wall;
import simcore.agents.Agent;
import java.util.ArrayList;

public class EDBuilder implements ContextBuilder<Object> {

  public Context context;

  public Context build(Context<Object> context) {
    this.context = context;

    // Reset log contents
    new ToolBox(this).GetLog().clearOldContents();
    ToolBox.grids.clear();

    context.setId("EDProject");
    int mapWidth = 90;
    int mapHeight = 250;

    Parameters params = RunEnvironment.getInstance().getParameters();

    Boolean pBool = params.getBoolean("UsePathFinding");
    ModelParameterStore.UsePathFinding = false;

    RunEnvironment.getInstance().endAt(604800 / params.getInteger("SecondsPerTick"));

    CreatePatientArrivalMap();

    ContinuousSpaceFactory spaceFactory = ContinuousSpaceFactoryFinder.createContinuousSpaceFactory(null);
    ContinuousSpace<Object> space = spaceFactory.createContinuousSpace("space", context, new StaffAdder<Object>(), new StrictBorders(), mapWidth, mapHeight);

    GridFactory gridFactory = GridFactoryFinder.createGridFactory(null);
    Grid<Object> grid = gridFactory.createGrid("grid", context, new GridBuilderParameters<Object>(new repast.simphony.space.grid.StrictBorders(), new SimpleGridAdder<Object>(), true, mapWidth, mapHeight));

    Grid<Object> StrepABreadcrumbgrid = gridFactory.createGrid("StrepABreadcrumb", context, new GridBuilderParameters<Object>(new repast.simphony.space.grid.StrictBorders(), new SimpleGridAdder<Object>(), true, mapWidth, mapHeight));
    Grid<Object> FluBreadcrumbgrid = gridFactory.createGrid("FluBreadcrumb", context, new GridBuilderParameters<Object>(new repast.simphony.space.grid.StrictBorders(), new SimpleGridAdder<Object>(), true, mapWidth, mapHeight));
    ToolBox.grids.add(StrepABreadcrumbgrid);
    ToolBox.grids.add(FluBreadcrumbgrid);


    context.add(new patientGenerator_0(space, grid, context));
    context.add(new patientGenerator_1(space, grid, context));
    context.add(new Board());

    // add Agents
    for (int i = 0; i < 3; i++) {
      context.add(new MajorsDoctor(space, grid, context));
    }
    for (int i = 0; i < 3; i++) {
      context.add(new MajorsNurse(space, grid, context));
    }
    for (int i = 0; i < 5; i++) {
      context.add(new TriageNurse(space, grid, context));
    }
    for (int i = 0; i < 2; i++) {
      context.add(new MinorsNurse(space, grid, context));
    }
    for (int i = 0; i < 2; i++) {
      context.add(new SeniorDoc(space, grid, context));
    }
    for (int i = 0; i < 2; i++) {
      context.add(new MinorsDoctor(space, grid, context));
    }
    for (int i = 0; i < 1; i++) {
      context.add(new GASNurse(space, grid, context));
    }


    GridValueLayer vl = new GridValueLayer("cellbox", true, new repast.simphony.space.grid.StrictBorders(), mapWidth, mapHeight);
    context.addValueLayer(vl);

    // add Locations here

    Area EmergencyDepartment_0 = new Area(context, space, grid, 1, 1, 40, 200, Color.WHITE);
    Room Entrance_a = new Room("Entrance", context, space, grid, 5, 199, 3, 1, 1, 10000, MainEntrance.getInstance(), Color.GRAY, EmergencyDepartment_0);
    Room TriageWaitingRoom_b = new Room("TriageWaitingRoom", context, space, grid, 10, 195, 11, 5, 1, 10000, WaitingRoom.getInstance(), Color.GRAY, EmergencyDepartment_0);
    Room Triage_c = new Room("Triage", context, space, grid, 10, 190, 5, 5, 1, 20, TriageDesk.getInstance(), Color.BLUE, EmergencyDepartment_0);
    Room GASRoomOne_d = new Room("GASRoomOne", context, space, grid, 15, 190, 5, 5, 1, 5, GASRoom.getInstance(), Color.YELLOW, EmergencyDepartment_0);
    Room MinorsOne_e = new Room("MinorsOne", context, space, grid, 20, 183, 5, 5, 1, 5, MinorsBay.getInstance(), Color.RED, EmergencyDepartment_0);
    Room MinorsFive_f = new Room("MinorsFive", context, space, grid, 20, 178, 5, 5, 1, 5, MinorsBay.getInstance(), Color.RED, EmergencyDepartment_0);
    Room MinorsTwo_g = new Room("MinorsTwo", context, space, grid, 20, 168, 5, 5, 1, 5, MinorsBay.getInstance(), Color.RED, EmergencyDepartment_0);
    Room MinorsThree_h = new Room("MinorsThree", context, space, grid, 20, 173, 5, 5, 1, 5, MinorsBay.getInstance(), Color.RED, EmergencyDepartment_0);
    Room MinorsFour_i = new Room("MinorsFour", context, space, grid, 20, 163, 5, 5, 1, 5, MinorsBay.getInstance(), Color.RED, EmergencyDepartment_0);
    Room MajorsABOne_j = new Room("MajorsABOne", context, space, grid, 1, 190, 5, 5, 1, 5, MajorsBay.getInstance(), Color.GREEN, EmergencyDepartment_0);
    Room MajorsABTwo_k = new Room("MajorsABTwo", context, space, grid, 1, 185, 5, 5, 1, 5, MajorsBay.getInstance(), Color.GREEN, EmergencyDepartment_0);
    Room MajorsABThree_l = new Room("MajorsABThree", context, space, grid, 1, 180, 5, 5, 1, 5, MajorsBay.getInstance(), Color.GREEN, EmergencyDepartment_0);
    Room MajorsABFour_m = new Room("MajorsABFour", context, space, grid, 1, 175, 5, 5, 1, 5, MajorsBay.getInstance(), Color.GREEN, EmergencyDepartment_0);
    Room MajorsABFive_n = new Room("MajorsABFive", context, space, grid, 1, 170, 5, 5, 1, 5, MajorsBay.getInstance(), Color.GREEN, EmergencyDepartment_0);
    Room MajorsABSix_o = new Room("MajorsABSix", context, space, grid, 1, 165, 5, 5, 1, 5, MajorsBay.getInstance(), Color.GREEN, EmergencyDepartment_0);
    Room MajorsABSeven_p = new Room("MajorsABSeven", context, space, grid, 1, 160, 5, 5, 1, 5, MajorsBay.getInstance(), Color.GREEN, EmergencyDepartment_0);
    Room GreenBay_q = new Room("GreenBay", context, space, grid, 30, 180, 10, 10, 1, 100000, GreenBay.getInstance(), Color.GREEN, EmergencyDepartment_0);
    Room SideRoom_r = new Room("SideRoom", context, space, grid, 30, 169, 10, 10, 1, 10000000, SideRoom.getInstance(), Color.GRAY, EmergencyDepartment_0);

    try {
      TriageWaitingRoom_b.addOccupiable(new Seat(context, space, grid, 11, 196, TriageWaitingRoom_b));
      TriageWaitingRoom_b.addOccupiable(new Seat(context, space, grid, 11, 197, TriageWaitingRoom_b));
      TriageWaitingRoom_b.addOccupiable(new Seat(context, space, grid, 11, 198, TriageWaitingRoom_b));
      TriageWaitingRoom_b.addOccupiable(new Seat(context, space, grid, 11, 199, TriageWaitingRoom_b));
      TriageWaitingRoom_b.addOccupiable(new Seat(context, space, grid, 14, 196, TriageWaitingRoom_b));
      TriageWaitingRoom_b.addOccupiable(new Seat(context, space, grid, 14, 197, TriageWaitingRoom_b));
      TriageWaitingRoom_b.addOccupiable(new Seat(context, space, grid, 14, 198, TriageWaitingRoom_b));
      TriageWaitingRoom_b.addOccupiable(new Seat(context, space, grid, 14, 199, TriageWaitingRoom_b));
      TriageWaitingRoom_b.addOccupiable(new Seat(context, space, grid, 17, 196, TriageWaitingRoom_b));
      TriageWaitingRoom_b.addOccupiable(new Seat(context, space, grid, 17, 197, TriageWaitingRoom_b));
      TriageWaitingRoom_b.addOccupiable(new Seat(context, space, grid, 17, 198, TriageWaitingRoom_b));
      TriageWaitingRoom_b.addOccupiable(new Seat(context, space, grid, 17, 199, TriageWaitingRoom_b));
      TriageWaitingRoom_b.addOccupiable(new Seat(context, space, grid, 20, 196, TriageWaitingRoom_b));
      TriageWaitingRoom_b.addOccupiable(new Seat(context, space, grid, 20, 197, TriageWaitingRoom_b));
      TriageWaitingRoom_b.addOccupiable(new Seat(context, space, grid, 20, 198, TriageWaitingRoom_b));
      TriageWaitingRoom_b.addOccupiable(new Seat(context, space, grid, 20, 199, TriageWaitingRoom_b));
      GASRoomOne_d.addOccupiable(new Bed(context, space, grid, 17, 192, GASRoomOne_d));
      MinorsOne_e.addOccupiable(new Bed(context, space, grid, 21, 184, MinorsOne_e));
      MinorsFive_f.addOccupiable(new Bed(context, space, grid, 21, 179, MinorsFive_f));
      MinorsTwo_g.addOccupiable(new Bed(context, space, grid, 21, 169, MinorsTwo_g));
      MinorsThree_h.addOccupiable(new Bed(context, space, grid, 21, 174, MinorsThree_h));
      MinorsFour_i.addOccupiable(new Bed(context, space, grid, 21, 164, MinorsFour_i));
      MajorsABOne_j.addOccupiable(new Bed(context, space, grid, 2, 191, MajorsABOne_j));
      MajorsABTwo_k.addOccupiable(new Bed(context, space, grid, 2, 186, MajorsABTwo_k));
      MajorsABThree_l.addOccupiable(new Bed(context, space, grid, 2, 181, MajorsABThree_l));
      MajorsABFour_m.addOccupiable(new Bed(context, space, grid, 2, 176, MajorsABFour_m));
      MajorsABFive_n.addOccupiable(new Bed(context, space, grid, 2, 171, MajorsABFive_n));
      MajorsABSix_o.addOccupiable(new Bed(context, space, grid, 2, 166, MajorsABSix_o));
      MajorsABSeven_p.addOccupiable(new Bed(context, space, grid, 2, 161, MajorsABSeven_p));

    } catch (NumberFormatException e) {
    }


    for (Object obj : context) {
      NdPoint pt = space.getLocation(obj);
      grid.moveTo(obj, (int) pt.getX(), (int) pt.getY());
    }

    new NetworkBuilder("CurrentPatientAllocations", context, true).buildNetwork();
    new NetworkBuilder("HistoricalPatientAllocations", context, true).buildNetwork();

    ISchedule schedule = RunEnvironment.getInstance().getCurrentSchedule();
    ScheduleParameters stop = ScheduleParameters.createRepeating((86400 / params.getInteger("SecondsPerTick")), (86400 / params.getInteger("SecondsPerTick")), ScheduleParameters.FIRST_PRIORITY);
    schedule.schedule(stop, this, "printActivityHistories");

    ScheduleParameters midPoint = ScheduleParameters.createRepeating((86400 / params.getInteger("SecondsPerTick")), (86400 / params.getInteger("SecondsPerTick")), ScheduleParameters.LAST_PRIORITY);
    schedule.schedule(midPoint, this, "emptyDeSpawnedAgents");


    return context;
  }

  public void CreatePatientArrivalMap() {
    HashMap ArrivalPerHour = new HashMap();
    ArrivalPerHour.putIfAbsent(1, 2);
    ArrivalPerHour.putIfAbsent(2, 2);
    ArrivalPerHour.putIfAbsent(3, 2);
    ArrivalPerHour.putIfAbsent(4, 3);
    ArrivalPerHour.putIfAbsent(5, 2);
    ArrivalPerHour.putIfAbsent(6, 2);
    ArrivalPerHour.putIfAbsent(7, 6);
    ArrivalPerHour.putIfAbsent(8, 6);
    ArrivalPerHour.putIfAbsent(9, 6);
    ArrivalPerHour.putIfAbsent(10, 6);
    ArrivalPerHour.putIfAbsent(11, 6);
    ArrivalPerHour.putIfAbsent(12, 6);
    ArrivalPerHour.putIfAbsent(13, 9);
    ArrivalPerHour.putIfAbsent(14, 9);
    ArrivalPerHour.putIfAbsent(15, 9);
    ArrivalPerHour.putIfAbsent(16, 9);
    ArrivalPerHour.putIfAbsent(17, 9);
    ArrivalPerHour.putIfAbsent(18, 9);
    ArrivalPerHour.putIfAbsent(19, 4);
    ArrivalPerHour.putIfAbsent(20, 5);
    ArrivalPerHour.putIfAbsent(21, 4);
    ArrivalPerHour.putIfAbsent(22, 5);
    ArrivalPerHour.putIfAbsent(23, 4);
    ArrivalPerHour.putIfAbsent(24, 5);
    ArrivalPerHour.putIfAbsent(1, 0);
    ArrivalPerHour.putIfAbsent(2, 0);
    ArrivalPerHour.putIfAbsent(3, 0);
    ArrivalPerHour.putIfAbsent(4, 0);
    ArrivalPerHour.putIfAbsent(5, 0);
    ArrivalPerHour.putIfAbsent(6, 0);
    ArrivalPerHour.putIfAbsent(7, 3);
    ArrivalPerHour.putIfAbsent(8, 3);
    ArrivalPerHour.putIfAbsent(9, 3);
    ArrivalPerHour.putIfAbsent(10, 3);
    ArrivalPerHour.putIfAbsent(11, 3);
    ArrivalPerHour.putIfAbsent(12, 3);
    ArrivalPerHour.putIfAbsent(13, 4);
    ArrivalPerHour.putIfAbsent(14, 4);
    ArrivalPerHour.putIfAbsent(15, 5);
    ArrivalPerHour.putIfAbsent(16, 4);
    ArrivalPerHour.putIfAbsent(17, 5);
    ArrivalPerHour.putIfAbsent(18, 4);
    ArrivalPerHour.putIfAbsent(19, 0);
    ArrivalPerHour.putIfAbsent(20, 0);
    ArrivalPerHour.putIfAbsent(21, 0);
    ArrivalPerHour.putIfAbsent(22, 0);
    ArrivalPerHour.putIfAbsent(23, 0);
    ArrivalPerHour.putIfAbsent(24, 0);
    PatientArrivalStore.Initialise((Map<Integer, Integer>) ArrivalPerHour);
  }

  private void createWallBetween(int x1, int y1, int x2, int y2, Context<Object> context, ContinuousSpace<Object> space, Grid<Object> grid) {
    if (x1 == x2) {
      for (int i = y1; i < y2; i++) {
        Wall pWall = new Wall("", context, space, grid, x1, i);
      }
    } else {
      float ratio = (y2 - y1) / (x2 - x1);
      int width = x2 - x1;
      for (int i = 0; i < width; i++) {
        float x = x1 + i;
        float y = y1 + (ratio * i);
        Wall pWall = new Wall("", context, space, grid, ((int) x), ((int) y));
      }

    }
  }

  public void printActivityHistories() {
    for (Object object : context.getObjects(Agent.class)) {
      Agent a = (Agent) object;
      a.printActivityHistory();
    }
  }

  public void emptyDeSpawnedAgents() {
    ArrayList<Object> listAgents = new ArrayList();
    for (Object object : context.getObjects(Agent.class)) {
      listAgents.add(object);
    }
    for (Object agent : listAgents) {
      if (((Agent) agent).deSpawnTime != null) {
        context.remove(agent);
      }
    }
  }


}
