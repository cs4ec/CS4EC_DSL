import scmodel;

String editorActionFilename(String package, String base, LanguageTypes lang, String counter) :
    package.trim().replaceAll("\\.", "/") + "/" + base + counter + (lang == LanguageTypes::java ? ".java" : ".groovy");

String filename(scmodel::StateMachine sm) : 
    sm.package.trim().replaceAll("\\.", "/") + "/" + sm.className.trim() + ".java"; 
    
String actionFilename(String package, String actionType, LanguageTypes lang) :
    package.trim().replaceAll("\\.", "/") + "/" + actionType.trim() + (lang == LanguageTypes::java ? ".java" : ".groovy");
    
String generatorClassName(scmodel::StateMachine sm) :
    sm.className.trim() + "Generator"; 
    
String getCounter() : JAVA
    repast.simphony.statecharts.generator.GeneratorUtil.getCounter();
    
String getPackageFromType(String agentType) : JAVA
    repast.simphony.statecharts.generator.GeneratorUtil.getPackageFromType(java.lang.String);
    
String getSimpleClassName(String agentType) : JAVA
    repast.simphony.statecharts.generator.GeneratorUtil.getSimpleClassName(java.lang.String);

String generatorType(scmodel::StateMachine sm) : 
    sm.package + "." + generatorClassName(sm);

String generatorFile(scmodel::StateMachine sm) : 
    sm.package.trim().replaceAll("\\.", "/") + "/" + generatorClassName(sm) + ".java";
    
List[AbstractState] getStatesWithActions(List[AbstractState] states) :
    states.reject(e | (e.onEnter == null || e.onEnter.trim().length == 0) && 
        (e.onExit == null || e.onExit.trim().length == 0));

String getCSMethodName(String uuid) : JAVA
    repast.simphony.statecharts.generator.GeneratorUtil.getCSMethodName(java.lang.String);

List[CompositeState] compositeStates(List states) : JAVA 
    repast.simphony.statecharts.generator.GeneratorUtil.filterForComposites(java.util.List);
    
List[State] simpleStates(List states) : JAVA 
    repast.simphony.statecharts.generator.GeneratorUtil.filterForStates(java.util.List);
    
Void init(String sm_uuid) : JAVA
    repast.simphony.statecharts.generator.GeneratorUtil.init(java.lang.String);
    
String getSVar(String uuid) : JAVA
    repast.simphony.statecharts.generator.GeneratorUtil.getSVar(java.lang.String);

String getVar(AbstractState state) :
    State.isInstance(state) ? getSVar(state.uuid) : getCSVar(state.uuid);
    
String getCSVar(String uuid) : JAVA
    repast.simphony.statecharts.generator.GeneratorUtil.getCSVar(java.lang.String);
    
String getCSBVar(String uuid) : JAVA
    repast.simphony.statecharts.generator.GeneratorUtil.getCSBVar(java.lang.String);

String getSBVar(String uuid) : JAVA
    repast.simphony.statecharts.generator.GeneratorUtil.getSBVar(java.lang.String);
    
String getOnEnterActionType(String uuid) : JAVA
    repast.simphony.statecharts.generator.GeneratorUtil.getOnEnterTypeName(java.lang.String);
    
String getOnExitActionType(String uuid) : JAVA
    repast.simphony.statecharts.generator.GeneratorUtil.getOnExitTypeName(java.lang.String);
    
String getGuardType(String uuid) : JAVA
    repast.simphony.statecharts.generator.GeneratorUtil.getGuardType(java.lang.String);
    
String getOnTransType(String uuid) : JAVA
    repast.simphony.statecharts.generator.GeneratorUtil.getOnTransType(java.lang.String);
    
String getTDFType(String uuid) : JAVA
    repast.simphony.statecharts.generator.GeneratorUtil.getTDFType(java.lang.String);
    
String getCTCType(String uuid) : JAVA
    repast.simphony.statecharts.generator.GeneratorUtil.getCTCType(java.lang.String);
    
String getMCType(String uuid) : JAVA
    repast.simphony.statecharts.generator.GeneratorUtil.getMCType(java.lang.String);
    
String getMEType(String uuid) : JAVA
    repast.simphony.statecharts.generator.GeneratorUtil.getMEType(java.lang.String);
    
String expandCodeBody(String body, Boolean addReturn) : JAVA
    repast.simphony.statecharts.generator.GeneratorUtil.expandBody(java.lang.String, java.lang.Boolean);
    
AbstractState findInitialState(List states) : JAVA
    repast.simphony.statecharts.generator.GeneratorUtil.findInitialState(java.util.List);
    
StateMachine findStateMachine(Object obj) : JAVA
    repast.simphony.statecharts.generator.GeneratorUtil.findStateMachine(java.lang.Object);
    
AbstractState findFirstState(List states) : JAVA
    repast.simphony.statecharts.generator.GeneratorUtil.findFirstState(java.util.List);
    
String getBranchVar(String uuid) : JAVA 
    repast.simphony.statecharts.generator.GeneratorUtil.getBranchVar(java.lang.String);

String getTransitionMethodName(String uuid) : JAVA
    repast.simphony.statecharts.generator.GeneratorUtil.getTransitionMethodName(java.lang.String);
    
Boolean isInvalid(Transition transition) :
    (PseudoState.isInstance(transition.from) && (((PseudoState)transition.from).type == PseudoStateTypes::initial 
    || ((PseudoState)transition.from).type == PseudoStateTypes::entry));

Boolean isBranch(AbstractState state) :
    PseudoState.isInstance(state) && ((PseudoState)state).type == PseudoStateTypes::choice; 
    
String nullToEmpty(String val) :
    val == null ? "" : val;
    
String getMessageCheckerClass(String type) : JAVA
    repast.simphony.statecharts.generator.GeneratorUtil.getClassNameFor(java.lang.String);
    
String getCTCCode(Transition transition) :
     transition.triggerType == TriggerTypes::condition ? nullToEmpty(transition.triggerConditionCode) : "";
     
String getCTCCodeImports(Transition transition) :
     transition.triggerType == TriggerTypes::condition ? nullToEmpty(transition.triggerConditionCodeImports) : "";
    
String getMCCode(Transition transition) :
    (transition.triggerType == TriggerTypes::message ?
    (transition.messageCheckerType == MessageCheckerTypes::conditional ? nullToEmpty(transition.messageCheckerCode) : "") : "");
    
String getMCCodeImports(Transition transition) :
    (transition.triggerType == TriggerTypes::message ?
    (transition.messageCheckerType == MessageCheckerTypes::conditional ? nullToEmpty(transition.messageCheckerCodeImports) : "") : "");
    
String getMECode(Transition transition) :
    (transition.triggerType == TriggerTypes::message ?
    (transition.messageCheckerType == MessageCheckerTypes::equals ? nullToEmpty(transition.messageCheckerCode) : "") : "");
    
String getMECodeImports(Transition transition) :
    (transition.triggerType == TriggerTypes::message ?
    (transition.messageCheckerType == MessageCheckerTypes::equals ? nullToEmpty(transition.messageCheckerCodeImports) : "") : "");
    
String getTDFCodeImports(Transition transition) :
    (transition.triggerType == TriggerTypes::timed ? nullToEmpty(transition.triggerTimedCodeImports) :
    (transition.triggerType == TriggerTypes::exponential ? nullToEmpty(transition.triggerExpRateCodeImports) : 
    (transition.triggerType == TriggerTypes::probability ? nullToEmpty(transition.triggerProbCodeImports) : "")));
    
String getTDFCode(Transition transition) :
    (transition.triggerType == TriggerTypes::timed ? nullToEmpty(transition.triggerTimedCode) :
    (transition.triggerType == TriggerTypes::exponential ? nullToEmpty(transition.triggerExpRateCode) : 
    (transition.triggerType == TriggerTypes::probability ? nullToEmpty(transition.triggerProbCode) : "")));

    
    