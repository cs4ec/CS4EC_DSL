/*@bgen(jjtree) Generated By:JJTree: Do not edit this line. .\query.jj */
/*@egen*/
options {                                        
  STATIC = false;
}

PARSER_BEGIN(QueryParser)

package repast.engine.watcher.query;

public class QueryParser/*@bgen(jjtree)*/implements QueryParserTreeConstants/*@egen*/ {/*@bgen(jjtree)*/
  protected JJTQueryParserState jjtree = new JJTQueryParserState();

/*@egen*/
  public static void main(String args[]) {
    System.out.println("Reading from standard input...");
    QueryParser t = new QueryParser(System.in);
    try {
      ASTStart n = t.Start();
      n.dump("");
      System.out.println("Thank you.");
    } catch (Exception e) {
      System.out.println("Oops.");
      System.out.println(e.getMessage());
      e.printStackTrace();
    }
  }
}

PARSER_END(QueryParser)


SKIP :
{
  " "
| "\t"
| "\n"
| "\r"
| <"//" (~["\n","\r"])* ("\n"|"\r"|"\r\n")>
| <"/*" (~["*"])* "*" (~["/"] (~["*"])* "*")* "/">
}

TOKEN : /* literals */
{
    < DECNUMBER:
      ["1"-"9"] (["0"-"9"])*
      | "0"
      >
|
    < FLOAT:
       (["0"-"9"])+ "." (["0"-"9"])* (<EXPONENT>)?
      | "." (["0"-"9"])+ (<EXPONENT>)?
      | (["0"-"9"])+ <EXPONENT>
      >
|   < #EXPONENT: ["e","E"] (["+","-"])? (["0"-"9"])+ >
|   < #DIGIT: ["0" - "9"] >
|   <NAME: "'" (["0"-"9", "A"-"Z", "a"-"z", " ", "-", ".", "!", "$", "*", "+", "_"])* "'">
}


TOKEN : /* keywords */
{
	<AND: "and"> |
	<OR: "or"> |
	<LINKED: "linked"> |
	<LINKED_FROM: "linked_from"> |
	<LINKED_TO: "linked_to"> |
	<COLOCATED: "colocated"> |
	<WITHIN: "within"> |
	<WITHIN_VN: "within_vn"> |
	<WITHIN_MOORE: "within_moore"> |
	<NOT: "not">
}

ASTStart Start()        : {/*@bgen(jjtree) Start */
  ASTStart jjtn000 = new ASTStart(JJTSTART);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) Start */
  try {
/*@egen*/
  BooleanExpression() ";"/*@bgen(jjtree)*/
  {
    jjtree.closeNodeScope(jjtn000, true);
    jjtc000 = false;
  }
/*@egen*/
  { return jjtn000; }/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/
}

void BooleanExpression() : {}
{
    QueryExpression()
    (
      <AND>/*@bgen(jjtree) #AndExpression( 2) */
            {
              ASTAndExpression jjtn001 = new ASTAndExpression(JJTANDEXPRESSION);
              boolean jjtc001 = true;
              jjtree.openNodeScope(jjtn001);
            }
            try {
/*@egen*/ QueryExpression()/*@bgen(jjtree)*/
            } catch (Throwable jjte001) {
              if (jjtc001) {
                jjtree.clearNodeScope(jjtn001);
                jjtc001 = false;
              } else {
                jjtree.popNode();
              }
              if (jjte001 instanceof RuntimeException) {
                throw (RuntimeException)jjte001;
              }
              if (jjte001 instanceof ParseException) {
                throw (ParseException)jjte001;
              }
              throw (Error)jjte001;
            } finally {
              if (jjtc001) {
                jjtree.closeNodeScope(jjtn001,  2);
              }
            }
/*@egen*/
    |
      <OR>/*@bgen(jjtree) #OrExpression( 2) */
           {
             ASTOrExpression jjtn002 = new ASTOrExpression(JJTOREXPRESSION);
             boolean jjtc002 = true;
             jjtree.openNodeScope(jjtn002);
           }
           try {
/*@egen*/ QueryExpression()/*@bgen(jjtree)*/
           } catch (Throwable jjte002) {
             if (jjtc002) {
               jjtree.clearNodeScope(jjtn002);
               jjtc002 = false;
             } else {
               jjtree.popNode();
             }
             if (jjte002 instanceof RuntimeException) {
               throw (RuntimeException)jjte002;
             }
             if (jjte002 instanceof ParseException) {
               throw (ParseException)jjte002;
             }
             throw (Error)jjte002;
           } finally {
             if (jjtc002) {
               jjtree.closeNodeScope(jjtn002,  2);
             }
           }
/*@egen*/
    )*
}

void QueryExpression() : {}
{
		("(" BooleanExpression() ")" | Command())
	|
		<NOT>/*@bgen(jjtree) #Not(true) */
                      {
                        ASTNot jjtn001 = new ASTNot(JJTNOT);
                        boolean jjtc001 = true;
                        jjtree.openNodeScope(jjtn001);
                      }
                      try {
/*@egen*/ QueryExpression()/*@bgen(jjtree)*/
                      } catch (Throwable jjte001) {
                        if (jjtc001) {
                          jjtree.clearNodeScope(jjtn001);
                          jjtc001 = false;
                        } else {
                          jjtree.popNode();
                        }
                        if (jjte001 instanceof RuntimeException) {
                          throw (RuntimeException)jjte001;
                        }
                        if (jjte001 instanceof ParseException) {
                          throw (ParseException)jjte001;
                        }
                        throw (Error)jjte001;
                      } finally {
                        if (jjtc001) {
                          jjtree.closeNodeScope(jjtn001, true);
                        }
                      }
/*@egen*/

}

void Command() : {}
{
		Linked()
	|/*@bgen(jjtree) Colocated */
                {
                  ASTColocated jjtn001 = new ASTColocated(JJTCOLOCATED);
                  boolean jjtc001 = true;
                  jjtree.openNodeScope(jjtn001);
                }
                try {
/*@egen*/
		<COLOCATED>/*@bgen(jjtree)*/
                } finally {
                  if (jjtc001) {
                    jjtree.closeNodeScope(jjtn001, true);
                  }
                }
/*@egen*/
	|
		Within()
}

void Within() : {} {
		LOOKAHEAD(3)
		<WITHIN> Number()/*@bgen(jjtree) #Within( 2) */
                                  {
                                    ASTWithin jjtn001 = new ASTWithin(JJTWITHIN);
                                    boolean jjtc001 = true;
                                    jjtree.openNodeScope(jjtn001);
                                  }
                                  try {
/*@egen*/ Name()/*@bgen(jjtree)*/
                                  } catch (Throwable jjte001) {
                                    if (jjtc001) {
                                      jjtree.clearNodeScope(jjtn001);
                                      jjtc001 = false;
                                    } else {
                                      jjtree.popNode();
                                    }
                                    if (jjte001 instanceof RuntimeException) {
                                      throw (RuntimeException)jjte001;
                                    }
                                    if (jjte001 instanceof ParseException) {
                                      throw (ParseException)jjte001;
                                    }
                                    throw (Error)jjte001;
                                  } finally {
                                    if (jjtc001) {
                                      jjtree.closeNodeScope(jjtn001,  2);
                                    }
                                  }
/*@egen*/
	|
		<WITHIN>/*@bgen(jjtree) Within */
                         {
                           ASTWithin jjtn002 = new ASTWithin(JJTWITHIN);
                           boolean jjtc002 = true;
                           jjtree.openNodeScope(jjtn002);
                         }
                         try {
/*@egen*/ Number()/*@bgen(jjtree)*/
                         } catch (Throwable jjte002) {
                           if (jjtc002) {
                             jjtree.clearNodeScope(jjtn002);
                             jjtc002 = false;
                           } else {
                             jjtree.popNode();
                           }
                           if (jjte002 instanceof RuntimeException) {
                             throw (RuntimeException)jjte002;
                           }
                           if (jjte002 instanceof ParseException) {
                             throw (ParseException)jjte002;
                           }
                           throw (Error)jjte002;
                         } finally {
                           if (jjtc002) {
                             jjtree.closeNodeScope(jjtn002, true);
                           }
                         }
/*@egen*/
	|
		LOOKAHEAD(3)
		<WITHIN_VN> Number()/*@bgen(jjtree) #WithinVN( 2) */
                                     {
                                       ASTWithinVN jjtn003 = new ASTWithinVN(JJTWITHINVN);
                                       boolean jjtc003 = true;
                                       jjtree.openNodeScope(jjtn003);
                                     }
                                     try {
/*@egen*/ Name()/*@bgen(jjtree)*/
                                     } catch (Throwable jjte003) {
                                       if (jjtc003) {
                                         jjtree.clearNodeScope(jjtn003);
                                         jjtc003 = false;
                                       } else {
                                         jjtree.popNode();
                                       }
                                       if (jjte003 instanceof RuntimeException) {
                                         throw (RuntimeException)jjte003;
                                       }
                                       if (jjte003 instanceof ParseException) {
                                         throw (ParseException)jjte003;
                                       }
                                       throw (Error)jjte003;
                                     } finally {
                                       if (jjtc003) {
                                         jjtree.closeNodeScope(jjtn003,  2);
                                       }
                                     }
/*@egen*/
	|
		<WITHIN_VN>/*@bgen(jjtree) WithinVN */
                            {
                              ASTWithinVN jjtn004 = new ASTWithinVN(JJTWITHINVN);
                              boolean jjtc004 = true;
                              jjtree.openNodeScope(jjtn004);
                            }
                            try {
/*@egen*/ Number()/*@bgen(jjtree)*/
                            } catch (Throwable jjte004) {
                              if (jjtc004) {
                                jjtree.clearNodeScope(jjtn004);
                                jjtc004 = false;
                              } else {
                                jjtree.popNode();
                              }
                              if (jjte004 instanceof RuntimeException) {
                                throw (RuntimeException)jjte004;
                              }
                              if (jjte004 instanceof ParseException) {
                                throw (ParseException)jjte004;
                              }
                              throw (Error)jjte004;
                            } finally {
                              if (jjtc004) {
                                jjtree.closeNodeScope(jjtn004, true);
                              }
                            }
/*@egen*/
	|
		LOOKAHEAD(3)
		<WITHIN_MOORE> Number()/*@bgen(jjtree) #WithinMoore( 2) */
                                        {
                                          ASTWithinMoore jjtn005 = new ASTWithinMoore(JJTWITHINMOORE);
                                          boolean jjtc005 = true;
                                          jjtree.openNodeScope(jjtn005);
                                        }
                                        try {
/*@egen*/ Name()/*@bgen(jjtree)*/
                                        } catch (Throwable jjte005) {
                                          if (jjtc005) {
                                            jjtree.clearNodeScope(jjtn005);
                                            jjtc005 = false;
                                          } else {
                                            jjtree.popNode();
                                          }
                                          if (jjte005 instanceof RuntimeException) {
                                            throw (RuntimeException)jjte005;
                                          }
                                          if (jjte005 instanceof ParseException) {
                                            throw (ParseException)jjte005;
                                          }
                                          throw (Error)jjte005;
                                        } finally {
                                          if (jjtc005) {
                                            jjtree.closeNodeScope(jjtn005,  2);
                                          }
                                        }
/*@egen*/
	|
		<WITHIN_MOORE>/*@bgen(jjtree) WithinMoore */
                               {
                                 ASTWithinMoore jjtn006 = new ASTWithinMoore(JJTWITHINMOORE);
                                 boolean jjtc006 = true;
                                 jjtree.openNodeScope(jjtn006);
                               }
                               try {
/*@egen*/ Number()/*@bgen(jjtree)*/
                               } catch (Throwable jjte006) {
                                 if (jjtc006) {
                                   jjtree.clearNodeScope(jjtn006);
                                   jjtc006 = false;
                                 } else {
                                   jjtree.popNode();
                                 }
                                 if (jjte006 instanceof RuntimeException) {
                                   throw (RuntimeException)jjte006;
                                 }
                                 if (jjte006 instanceof ParseException) {
                                   throw (ParseException)jjte006;
                                 }
                                 throw (Error)jjte006;
                               } finally {
                                 if (jjtc006) {
                                   jjtree.closeNodeScope(jjtn006, true);
                                 }
                               }
/*@egen*/
}

void Linked() : {} {

		<LINKED>/*@bgen(jjtree) Linked */
                         {
                           ASTLinked jjtn001 = new ASTLinked(JJTLINKED);
                           boolean jjtc001 = true;
                           jjtree.openNodeScope(jjtn001);
                         }
                         try {
/*@egen*/ (Name())?/*@bgen(jjtree)*/
                         } catch (Throwable jjte001) {
                           if (jjtc001) {
                             jjtree.clearNodeScope(jjtn001);
                             jjtc001 = false;
                           } else {
                             jjtree.popNode();
                           }
                           if (jjte001 instanceof RuntimeException) {
                             throw (RuntimeException)jjte001;
                           }
                           if (jjte001 instanceof ParseException) {
                             throw (ParseException)jjte001;
                           }
                           throw (Error)jjte001;
                         } finally {
                           if (jjtc001) {
                             jjtree.closeNodeScope(jjtn001, true);
                           }
                         }
/*@egen*/
	|
		<LINKED_TO>/*@bgen(jjtree) LinkedTo */
                            {
                              ASTLinkedTo jjtn002 = new ASTLinkedTo(JJTLINKEDTO);
                              boolean jjtc002 = true;
                              jjtree.openNodeScope(jjtn002);
                            }
                            try {
/*@egen*/ (Name())?/*@bgen(jjtree)*/
                            } catch (Throwable jjte002) {
                              if (jjtc002) {
                                jjtree.clearNodeScope(jjtn002);
                                jjtc002 = false;
                              } else {
                                jjtree.popNode();
                              }
                              if (jjte002 instanceof RuntimeException) {
                                throw (RuntimeException)jjte002;
                              }
                              if (jjte002 instanceof ParseException) {
                                throw (ParseException)jjte002;
                              }
                              throw (Error)jjte002;
                            } finally {
                              if (jjtc002) {
                                jjtree.closeNodeScope(jjtn002, true);
                              }
                            }
/*@egen*/
	|
		<LINKED_FROM>/*@bgen(jjtree) LinkedFrom */
                              {
                                ASTLinkedFrom jjtn003 = new ASTLinkedFrom(JJTLINKEDFROM);
                                boolean jjtc003 = true;
                                jjtree.openNodeScope(jjtn003);
                              }
                              try {
/*@egen*/ (Name())?/*@bgen(jjtree)*/
                              } catch (Throwable jjte003) {
                                if (jjtc003) {
                                  jjtree.clearNodeScope(jjtn003);
                                  jjtc003 = false;
                                } else {
                                  jjtree.popNode();
                                }
                                if (jjte003 instanceof RuntimeException) {
                                  throw (RuntimeException)jjte003;
                                }
                                if (jjte003 instanceof ParseException) {
                                  throw (ParseException)jjte003;
                                }
                                throw (Error)jjte003;
                              } finally {
                                if (jjtc003) {
                                  jjtree.closeNodeScope(jjtn003, true);
                                }
                              }
/*@egen*/
}

void Number()         :
{/*@bgen(jjtree) Number */
        ASTNumber jjtn000 = new ASTNumber(JJTNUMBER);
        boolean jjtc000 = true;
        jjtree.openNodeScope(jjtn000);
/*@egen*/
	Token t;
}
{/*@bgen(jjtree) Number */
        try {
/*@egen*/
	(t=<DECNUMBER>/*@bgen(jjtree)*/
        {
          jjtree.closeNodeScope(jjtn000, true);
          jjtc000 = false;
        }
/*@egen*/
	{
		jjtn000.setNumber(t.image);
	}
	)
	|
	(t=<FLOAT>/*@bgen(jjtree)*/
        {
          jjtree.closeNodeScope(jjtn000, true);
          jjtc000 = false;
        }
/*@egen*/
	{
		jjtn000.setNumber(t.image);
	}
	)/*@bgen(jjtree)*/
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
        }
/*@egen*/

}


void Name()       :
{/*@bgen(jjtree) Name */
        ASTName jjtn000 = new ASTName(JJTNAME);
        boolean jjtc000 = true;
        jjtree.openNodeScope(jjtn000);
/*@egen*/
	Token t;
}
{/*@bgen(jjtree) Name */
        try {
/*@egen*/
	t=<NAME>/*@bgen(jjtree)*/
        {
          jjtree.closeNodeScope(jjtn000, true);
          jjtc000 = false;
        }
/*@egen*/
	{
		jjtn000.setName(t.image.substring(1, t.image.length() - 1));
	}/*@bgen(jjtree)*/
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
        }
/*@egen*/
}

/*
void Identifier() :
{
  Token t;
}
{
  t=<IDENTIFIER>
  {
    jjtThis.setName(t.image);
  }
}
*/


