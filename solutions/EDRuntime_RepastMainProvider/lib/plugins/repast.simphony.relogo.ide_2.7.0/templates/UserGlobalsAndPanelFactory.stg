group ugpf;

ugpf(packageName, globals, components) ::= <<
package <packageName>.relogo

import repast.simphony.relogo.factories.AbstractReLogoGlobalsAndPanelFactory

public class UserGlobalsAndPanelFactory extends AbstractReLogoGlobalsAndPanelFactory{
	public void addGlobalsAndPanelComponents(){
		
		/**
		 * Place custom panels and globals below, for example:
		 * 
	        addGlobal("globalVariable1")	// Globally accessible variable ( variable name)
	        // Slider with label ( variable name, slider label, minimum value, increment, maximum value, initial value )
	        addSliderWL("sliderVariable", "Slider Variable", 0, 1, 10, 5)
	        // Slider without label ( variable name, minimum value, increment, maximum value, initial value )
	        addSlider("sliderVariable2", 0.2, 0.1, 0.8, 0.5)
	        // Chooser with label  ( variable name, chooser label, list of choices , zero-based index of initial value )
	        addChooserWL("chooserVariable", "Chooser Variable", ["yes","no","maybe"], 2)
	        // Chooser without label  ( variable name, list of choices , zero-based index of initial value )
	        addChooser("chooserVariable2", [1, 66, "seven"], 0)
	        // State change button (method name in observer)
	        addStateChangeButton("change")
	        // State change button with label (method name in observer, label)
	        addStateChangeButtonWL("changeSomething","Change Something")
	        
		 */

		<globals>
		<components>
	}
}
>>

tickCounter() ::= <<
addReLogoTickCountDisplay()
>>

button(observerName,methodName) ::= <<
addButton('<observerName>','<methodName>')
>>

toggleButton(observerName,methodName) ::= <<
addToggleButton('<observerName>','<methodName>')
>>

chooser(variableName,list,index) ::= <<
addChooser('<variableName>',[<list; separator=",">]<if(index)>,<index><endif>)
>>


input(variableName, value) ::= <<
addInput('<variableName>'<if(value)>, <value><endif>)
>>

switch(variableName,selected) ::= <<
addSwitch('<variableName>'<if(selected)>, <selected><endif>)
>>

slider(variableName,minVal,increment,maxVal,val,units) ::= <<
addSlider('<variableName>',<minVal>,<increment>,<maxVal>,<val><if(index)>,<index><endif>)
>>

monitor(observerName,reporterName,interval) ::= <<
addMonitor('<observerName>','<reporterName>',<interval>)
>>

/*
sliderUnits(variableName,minVal,increment,maxVal,val,units) ::= <<
addSlider(<varName>,<minVal>,<increment>,<maxVal>,<val>,<units>)
>>
*/

/*
chooserWithInit(variableName,list,index) ::= <<
addChooser('<variableName>',<list>,<index>)
>>
*/
