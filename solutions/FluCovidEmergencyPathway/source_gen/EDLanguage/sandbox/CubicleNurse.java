package EDLanguage.sandbox;

/*Generated by MPS */

import simcore.agents.Actor;
import simcore.action.Behaviour;
import repast.simphony.space.continuous.ContinuousSpace;
import repast.simphony.space.grid.Grid;
import repast.simphony.context.Context;
import simcore.Signals.Signal;
import java.util.List;
import java.util.function.Predicate;
import repast.simphony.space.graph.Network;
import simcore.action.BehaviourStep;
import simcore.basicStructures.RoomType;
import simcore.basicStructures.Room;
import simcore.Signals.Orders.MoveToOrder;
import simcore.basicStructures.Board;
import simcore.action.PassiveBehaviourStep;
import simcore.action.InstantBehaviourStep;
import java.util.ArrayList;

public class CubicleNurse extends Actor {

  public Behaviour behaviourBuilder;

  public CubicleNurse(ContinuousSpace<Object> space, Grid<Object> grid, Context<Object> context) {
    super(space, grid, context);
    mintMyMaxPatients = 1;
  }

  public CubicleNurse(ContinuousSpace<Object> space, Grid<Object> grid, String pstrStartLocation) {
    super(space, grid, pstrStartLocation);
  }

  protected Signal selectSignal(List<Signal> plstSignals) {
    if (!(plstSignals.isEmpty())) {
      if (plstSignals.stream().filter(new Predicate<Signal>() {
        public boolean test(Signal s) {
          return ((Network) context.getProjection("CurrentPatientAllocations")).getEdge(CubicleNurse.this, s.GetData("patient")) != null;
        }
      }).findFirst().orElse(null) != null) {
        return plstSignals.stream().filter(new Predicate<Signal>() {
          public boolean test(Signal s) {
            return ((Network) context.getProjection("CurrentPatientAllocations")).getEdge(CubicleNurse.this, s.GetData("patient")) != null;
          }
        }).findFirst().orElse(null);
      }
      if (plstSignals.stream().filter(new Predicate<Signal>() {
        public boolean test(Signal s) {
          return ((Network) context.getProjection("CurrentPatientAllocations")).getEdges(s.GetData("patient")) != null;
        }
      }).findFirst().orElse(null) != null) {
        return plstSignals.stream().filter(new Predicate<Signal>() {
          public boolean test(Signal s) {
            return ((Network) context.getProjection("CurrentPatientAllocations")).getEdges(s.GetData("patient")) != null;
          }
        }).findFirst().orElse(null);
      }
    }
    return null;
  }



  public Behaviour BuildActionFromSignal(Signal s) {
    switch (s.getName()) {
      case "":
        break;
      case "RespiratorysymptomspresentTrigger_b":
        behaviourBuilder = new Behaviour("RespiratorysymptomspresentTrigger_b");
        this.InitRespiratorysymptomspresent_b(s);
        break;
      case "RespiratorysymptomsabsentTrigger_c":
        behaviourBuilder = new Behaviour("RespiratorysymptomsabsentTrigger_c");
        this.InitRespiratorysymptomsabsent_c(s);
        break;
      case "COVIDandFluLFDTrigger_d":
        behaviourBuilder = new Behaviour("COVIDandFluLFDTrigger_d");
        this.InitCOVIDandFluLFD_d(s);
        break;
      case "COVIDLFDTrigger_e":
        behaviourBuilder = new Behaviour("COVIDLFDTrigger_e");
        this.InitCOVIDLFD_e(s);
        break;
      case "DoConfirmatoryPCRTrigger_f":
        behaviourBuilder = new Behaviour("DoConfirmatoryPCRTrigger_f");
        this.InitDoConfirmatoryPCR_f(s);
        break;
      case "SignificantCOVIDcontactTrigger_g":
        behaviourBuilder = new Behaviour("SignificantCOVIDcontactTrigger_g");
        this.InitSignificantCOVIDcontact_g(s);
        break;
      case "SignificantCOVIDContactTrigger_h":
        behaviourBuilder = new Behaviour("SignificantCOVIDContactTrigger_h");
        this.InitSignificantCOVIDContact_h(s);
        break;
      case "COVIDRiskCheckTrigger_i":
        behaviourBuilder = new Behaviour("COVIDRiskCheckTrigger_i");
        this.InitCOVIDRiskCheck_i(s);
        break;
      case "ConfirmwithPCRTrigger_j":
        behaviourBuilder = new Behaviour("ConfirmwithPCRTrigger_j");
        this.InitConfirmwithPCR_j(s);
        break;
      default:
        System.out.println("Set mission: " + s.getName() + " failed!");
        return behaviourBuilder;
    }
    return behaviourBuilder;
  }



  public class MoveAction_a0a_1 extends BehaviourStep {
    /*package*/ Behaviour behaviour;
    /*package*/ Object target;
    /*package*/ Object concreteTarget;
    public MoveAction_a0a_1(Behaviour behaviour) {
      target = RespiratoryCubicle.getInstance();
      this.behaviour = behaviour;
    }

    public void execute() {
      if (concreteTarget == null) {
        if (target instanceof RoomType) {
          concreteTarget = SelectLocation(((RoomType) target));
        } else {
          concreteTarget = target;
        }
      }

      if (target instanceof RoomType) {
        if (EvaluateRoomChoice(((Room) concreteTarget)) == 0) {
          concreteTarget = SelectLocation(((RoomType) target));
        }
      }

      MoveTowards(concreteTarget);
    }

    public boolean finishCondition() {
      return ImAt(concreteTarget);
    }
  }
  public class OrderAction_b0a_1 extends BehaviourStep {
    /*package*/ Behaviour behaviour;
    public OrderAction_b0a_1(Behaviour behaviour) {
      this.behaviour = behaviour;
    }

    public void execute() {
      Actor a = (Actor) behaviour.getSignalTrigger().GetData("patient");

      a.TakeOrder(new MoveToOrder().WithDestination(CubicleNurse.this));
    }
  }
  public class StayAction_c0a_2 extends BehaviourStep {
    /*package*/ Behaviour behaviour;
    /*package*/ int timeExecuted = 0;
    public StayAction_c0a_2(Behaviour behaviour) {
      this.behaviour = behaviour;
    }

    public void execute() {
      // Do nothing 
      timeExecuted++;
    }

    public boolean finishCondition() {
      return timeExecuted == 3;
    }
  }
  public class SendSignalAction_d0a extends BehaviourStep {
    /*package*/ Behaviour behaviour;

    public SendSignalAction_d0a(Behaviour behaviour) {
      this.behaviour = behaviour;
    }

    public void execute() {
      Board b = ReadBoard();
      Signal sendSignalTemp = new Signal();
      sendSignalTemp = new COVIDandFluLFDTrigger_dSignal();
      sendSignalTemp.AddData("patient", behaviour.getSignalTrigger().GetData("patient"));

      b.PushMission(sendSignalTemp);
    }
  }
  public class StayAction_e0a extends BehaviourStep {
    /*package*/ Behaviour behaviour;
    /*package*/ int timeExecuted = 0;
    public StayAction_e0a(Behaviour behaviour) {
      this.behaviour = behaviour;
    }

    public void execute() {
      // Do nothing 
      timeExecuted++;
    }

    public boolean finishCondition() {
      return timeExecuted == 1;
    }
  }
  public class MoveAction_a0a_5 extends BehaviourStep {
    /*package*/ Behaviour behaviour;
    /*package*/ Object target;
    /*package*/ Object concreteTarget;
    public MoveAction_a0a_5(Behaviour behaviour) {
      target = RespiratoryCubicle.getInstance();
      this.behaviour = behaviour;
    }

    public void execute() {
      if (concreteTarget == null) {
        if (target instanceof RoomType) {
          concreteTarget = SelectLocation(((RoomType) target));
        } else {
          concreteTarget = target;
        }
      }

      if (target instanceof RoomType) {
        if (EvaluateRoomChoice(((Room) concreteTarget)) == 0) {
          concreteTarget = SelectLocation(((RoomType) target));
        }
      }

      MoveTowards(concreteTarget);
    }

    public boolean finishCondition() {
      return ImAt(concreteTarget);
    }
  }
  public class OrderAction_b0a_5 extends BehaviourStep {
    /*package*/ Behaviour behaviour;
    public OrderAction_b0a_5(Behaviour behaviour) {
      this.behaviour = behaviour;
    }

    public void execute() {
      Actor a = (Actor) behaviour.getSignalTrigger().GetData("patient");

      a.TakeOrder(new MoveToOrder().WithDestination(CubicleNurse.this));
    }
  }
  public class StayAction_c0a_7 extends BehaviourStep {
    /*package*/ Behaviour behaviour;
    /*package*/ int timeExecuted = 0;
    public StayAction_c0a_7(Behaviour behaviour) {
      this.behaviour = behaviour;
    }

    public void execute() {
      // Do nothing 
      timeExecuted++;
    }

    public boolean finishCondition() {
      return timeExecuted == 3;
    }
  }
  public class SendSignalAction_d0a_1 extends BehaviourStep {
    /*package*/ Behaviour behaviour;

    public SendSignalAction_d0a_1(Behaviour behaviour) {
      this.behaviour = behaviour;
    }

    public void execute() {
      Board b = ReadBoard();
      Signal sendSignalTemp = new Signal();
      sendSignalTemp = new COVIDandFluLFDTrigger_dSignal();
      sendSignalTemp.AddData("patient", behaviour.getSignalTrigger().GetData("patient"));

      b.PushMission(sendSignalTemp);
    }
  }
  public class StayAction_e0a_1 extends BehaviourStep {
    /*package*/ Behaviour behaviour;
    /*package*/ int timeExecuted = 0;
    public StayAction_e0a_1(Behaviour behaviour) {
      this.behaviour = behaviour;
    }

    public void execute() {
      // Do nothing 
      timeExecuted++;
    }

    public boolean finishCondition() {
      return timeExecuted == 1;
    }
  }
  public class MoveAction_a0b_0 extends BehaviourStep {
    /*package*/ Behaviour behaviour;
    /*package*/ Object target;
    /*package*/ Object concreteTarget;
    public MoveAction_a0b_0(Behaviour behaviour) {
      target = NonRespiratoryArea.getInstance();
      this.behaviour = behaviour;
    }

    public void execute() {
      if (concreteTarget == null) {
        if (target instanceof RoomType) {
          concreteTarget = SelectLocation(((RoomType) target));
        } else {
          concreteTarget = target;
        }
      }

      if (target instanceof RoomType) {
        if (EvaluateRoomChoice(((Room) concreteTarget)) == 0) {
          concreteTarget = SelectLocation(((RoomType) target));
        }
      }

      MoveTowards(concreteTarget);
    }

    public boolean finishCondition() {
      return ImAt(concreteTarget);
    }
  }
  public class OrderAction_b0b_1 extends BehaviourStep {
    /*package*/ Behaviour behaviour;
    public OrderAction_b0b_1(Behaviour behaviour) {
      this.behaviour = behaviour;
    }

    public void execute() {
      Actor a = (Actor) behaviour.getSignalTrigger().GetData("patient");

      a.TakeOrder(new MoveToOrder().WithDestination(CubicleNurse.this));
    }
  }
  public class StayAction_c0b_0 extends BehaviourStep {
    /*package*/ Behaviour behaviour;
    /*package*/ int timeExecuted = 0;
    public StayAction_c0b_0(Behaviour behaviour) {
      this.behaviour = behaviour;
    }

    public void execute() {
      // Do nothing 
      timeExecuted++;
    }

    public boolean finishCondition() {
      return timeExecuted == 5;
    }
  }
  public class SendSignalAction_d0b extends BehaviourStep {
    /*package*/ Behaviour behaviour;

    public SendSignalAction_d0b(Behaviour behaviour) {
      this.behaviour = behaviour;
    }

    public void execute() {
      Board b = ReadBoard();
      Signal sendSignalTemp = new Signal();
      sendSignalTemp = new COVIDLFDTrigger_eSignal();
      sendSignalTemp.AddData("patient", behaviour.getSignalTrigger().GetData("patient"));

      b.PushMission(sendSignalTemp);
    }
  }
  public class StayAction_e0b extends BehaviourStep {
    /*package*/ Behaviour behaviour;
    /*package*/ int timeExecuted = 0;
    public StayAction_e0b(Behaviour behaviour) {
      this.behaviour = behaviour;
    }

    public void execute() {
      // Do nothing 
      timeExecuted++;
    }

    public boolean finishCondition() {
      return timeExecuted == 1;
    }
  }
  public class MoveAction_a0b_3 extends BehaviourStep {
    /*package*/ Behaviour behaviour;
    /*package*/ Object target;
    /*package*/ Object concreteTarget;
    public MoveAction_a0b_3(Behaviour behaviour) {
      target = NonRespiratoryArea.getInstance();
      this.behaviour = behaviour;
    }

    public void execute() {
      if (concreteTarget == null) {
        if (target instanceof RoomType) {
          concreteTarget = SelectLocation(((RoomType) target));
        } else {
          concreteTarget = target;
        }
      }

      if (target instanceof RoomType) {
        if (EvaluateRoomChoice(((Room) concreteTarget)) == 0) {
          concreteTarget = SelectLocation(((RoomType) target));
        }
      }

      MoveTowards(concreteTarget);
    }

    public boolean finishCondition() {
      return ImAt(concreteTarget);
    }
  }
  public class OrderAction_b0b_3 extends BehaviourStep {
    /*package*/ Behaviour behaviour;
    public OrderAction_b0b_3(Behaviour behaviour) {
      this.behaviour = behaviour;
    }

    public void execute() {
      Actor a = (Actor) behaviour.getSignalTrigger().GetData("patient");

      a.TakeOrder(new MoveToOrder().WithDestination(CubicleNurse.this));
    }
  }
  public class StayAction_c0b_3 extends BehaviourStep {
    /*package*/ Behaviour behaviour;
    /*package*/ int timeExecuted = 0;
    public StayAction_c0b_3(Behaviour behaviour) {
      this.behaviour = behaviour;
    }

    public void execute() {
      // Do nothing 
      timeExecuted++;
    }

    public boolean finishCondition() {
      return timeExecuted == 5;
    }
  }
  public class SendSignalAction_d0b_1 extends BehaviourStep {
    /*package*/ Behaviour behaviour;

    public SendSignalAction_d0b_1(Behaviour behaviour) {
      this.behaviour = behaviour;
    }

    public void execute() {
      Board b = ReadBoard();
      Signal sendSignalTemp = new Signal();
      sendSignalTemp = new COVIDLFDTrigger_eSignal();
      sendSignalTemp.AddData("patient", behaviour.getSignalTrigger().GetData("patient"));

      b.PushMission(sendSignalTemp);
    }
  }
  public class StayAction_e0b_1 extends BehaviourStep {
    /*package*/ Behaviour behaviour;
    /*package*/ int timeExecuted = 0;
    public StayAction_e0b_1(Behaviour behaviour) {
      this.behaviour = behaviour;
    }

    public void execute() {
      // Do nothing 
      timeExecuted++;
    }

    public boolean finishCondition() {
      return timeExecuted == 1;
    }
  }
  public class MoveAction_a0c extends BehaviourStep {
    /*package*/ Behaviour behaviour;
    /*package*/ Object target;
    /*package*/ Object concreteTarget;
    public MoveAction_a0c(Behaviour behaviour) {
      target = RespiratoryCubicle.getInstance();
      this.behaviour = behaviour;
    }

    public void execute() {
      if (concreteTarget == null) {
        if (target instanceof RoomType) {
          concreteTarget = SelectLocation(((RoomType) target));
        } else {
          concreteTarget = target;
        }
      }

      if (target instanceof RoomType) {
        if (EvaluateRoomChoice(((Room) concreteTarget)) == 0) {
          concreteTarget = SelectLocation(((RoomType) target));
        }
      }

      MoveTowards(concreteTarget);
    }

    public boolean finishCondition() {
      return ImAt(concreteTarget);
    }
  }
  public class OrderAction_b0c extends BehaviourStep {
    /*package*/ Behaviour behaviour;
    public OrderAction_b0c(Behaviour behaviour) {
      this.behaviour = behaviour;
    }

    public void execute() {
      Actor a = (Actor) behaviour.getSignalTrigger().GetData("patient");

      a.TakeOrder(new MoveToOrder().WithDestination(CubicleNurse.this));
    }
  }
  public class StayAction_c0c extends BehaviourStep {
    /*package*/ Behaviour behaviour;
    /*package*/ int timeExecuted = 0;
    public StayAction_c0c(Behaviour behaviour) {
      this.behaviour = behaviour;
    }

    public void execute() {
      // Do nothing 
      timeExecuted++;
    }

    public boolean finishCondition() {
      return timeExecuted == 5;
    }
  }
  public class StayAction_d0c extends PassiveBehaviourStep {
    /*package*/ Behaviour behaviour;
    /*package*/ int testingTime = LFD.getInstance().getProcessingTime();
    /*package*/ int timeExecuted = 0;
    public StayAction_d0c(Behaviour behaviour) {
      this.behaviour = behaviour;
    }

    public void execute() {
      // Do nothing 
      timeExecuted++;
    }

    public boolean finishCondition() {
      return timeExecuted == testingTime;
    }
  }
  public class Choice_e0c extends InstantBehaviourStep {
    /*package*/ Behaviour behaviour;
    public Choice_e0c(Behaviour behaviour) {
      this.behaviour = behaviour;
    }

    public void execute() {
      if ((((patient) behaviour.getSignalTrigger().GetData("patient")).COVIDInfectionStatus == "Symptomatic") || (((patient) behaviour.getSignalTrigger().GetData("patient")).COVIDInfectionStatus == "Asymptomatic")) {
        ArrayList<BehaviourStep> plstSteps = new ArrayList();
        plstSteps.add(new Choice_a0e0c(behaviour));
        behaviour.injectSteps(plstSteps);
      } else {
        ArrayList<BehaviourStep> plstSteps = new ArrayList();
        plstSteps.add(new Choice_a0e0c_3(behaviour));
        behaviour.injectSteps(plstSteps);
      }
    }
  }
  public class Choice_f0c extends InstantBehaviourStep {
    /*package*/ Behaviour behaviour;
    public Choice_f0c(Behaviour behaviour) {
      this.behaviour = behaviour;
    }

    public void execute() {
      if ((((patient) behaviour.getSignalTrigger().GetData("patient")).FluAInfectionStatus == "Symptomatic") || (((patient) behaviour.getSignalTrigger().GetData("patient")).FluAInfectionStatus == "Asymptomatic")) {
        ArrayList<BehaviourStep> plstSteps = new ArrayList();
        plstSteps.add(new Choice_a0f0c(behaviour));
        behaviour.injectSteps(plstSteps);
      } else {
        ArrayList<BehaviourStep> plstSteps = new ArrayList();
        plstSteps.add(new Choice_a0f0c_3(behaviour));
        behaviour.injectSteps(plstSteps);
      }
    }
  }
  public class Choice_g0c extends InstantBehaviourStep {
    /*package*/ Behaviour behaviour;
    public Choice_g0c(Behaviour behaviour) {
      this.behaviour = behaviour;
    }

    public void execute() {
      if ((((patient) behaviour.getSignalTrigger().GetData("patient")).FluBInfectionStatus == "Symptomatic") || (((patient) behaviour.getSignalTrigger().GetData("patient")).FluBInfectionStatus == "Asymptomatic")) {
        ArrayList<BehaviourStep> plstSteps = new ArrayList();
        plstSteps.add(new Choice_a0g0c(behaviour));
        behaviour.injectSteps(plstSteps);
      } else {
        ArrayList<BehaviourStep> plstSteps = new ArrayList();
        plstSteps.add(new Choice_a0g0c_3(behaviour));
        behaviour.injectSteps(plstSteps);
      }
    }
  }
  public class Choice_h0c extends InstantBehaviourStep {
    /*package*/ Behaviour behaviour;
    public Choice_h0c(Behaviour behaviour) {
      this.behaviour = behaviour;
    }

    public void execute() {
      if (((patient) behaviour.getSignalTrigger().GetData("patient")).LFDCOVIDResult == "Positive" && (((patient) behaviour.getSignalTrigger().GetData("patient")).LFDFluAResult == "Negative" && ((patient) behaviour.getSignalTrigger().GetData("patient")).LFDFluBResult == "Negative")) {
        ArrayList<BehaviourStep> plstSteps = new ArrayList();
        plstSteps.add(new SendSignalAction_a0h0c(behaviour));
        behaviour.injectSteps(plstSteps);
      } else {
        ArrayList<BehaviourStep> plstSteps = new ArrayList();
        behaviour.injectSteps(plstSteps);
      }
    }
  }
  public class Choice_i0c extends InstantBehaviourStep {
    /*package*/ Behaviour behaviour;
    public Choice_i0c(Behaviour behaviour) {
      this.behaviour = behaviour;
    }

    public void execute() {
      if (((patient) behaviour.getSignalTrigger().GetData("patient")).LFDCOVIDResult == "Positive" && (((patient) behaviour.getSignalTrigger().GetData("patient")).LFDFluAResult == "Positive" || ((patient) behaviour.getSignalTrigger().GetData("patient")).LFDFluBResult == "Positive")) {
        ArrayList<BehaviourStep> plstSteps = new ArrayList();
        plstSteps.add(new SendSignalAction_a0i0c(behaviour));
        behaviour.injectSteps(plstSteps);
      } else {
        ArrayList<BehaviourStep> plstSteps = new ArrayList();
        behaviour.injectSteps(plstSteps);
      }
    }
  }
  public class Choice_j0c extends InstantBehaviourStep {
    /*package*/ Behaviour behaviour;
    public Choice_j0c(Behaviour behaviour) {
      this.behaviour = behaviour;
    }

    public void execute() {
      if (((patient) behaviour.getSignalTrigger().GetData("patient")).LFDCOVIDResult == "Negative" && (((patient) behaviour.getSignalTrigger().GetData("patient")).LFDFluAResult == "Positive" || ((patient) behaviour.getSignalTrigger().GetData("patient")).LFDFluBResult == "Positive")) {
        ArrayList<BehaviourStep> plstSteps = new ArrayList();
        plstSteps.add(new SendSignalAction_a0j0c(behaviour));
        behaviour.injectSteps(plstSteps);
      } else {
        ArrayList<BehaviourStep> plstSteps = new ArrayList();
        behaviour.injectSteps(plstSteps);
      }
    }
  }
  public class Choice_k0c extends InstantBehaviourStep {
    /*package*/ Behaviour behaviour;
    public Choice_k0c(Behaviour behaviour) {
      this.behaviour = behaviour;
    }

    public void execute() {
      if (((patient) behaviour.getSignalTrigger().GetData("patient")).LFDCOVIDResult == "Negative" && (((patient) behaviour.getSignalTrigger().GetData("patient")).LFDFluAResult == "Negative" && ((patient) behaviour.getSignalTrigger().GetData("patient")).LFDFluBResult == "Negative")) {
        ArrayList<BehaviourStep> plstSteps = new ArrayList();
        plstSteps.add(new SendSignalAction_a0k0c(behaviour));
        behaviour.injectSteps(plstSteps);
      } else {
        ArrayList<BehaviourStep> plstSteps = new ArrayList();
        behaviour.injectSteps(plstSteps);
      }
    }
  }
  public class StayAction_l0c extends BehaviourStep {
    /*package*/ Behaviour behaviour;
    /*package*/ int timeExecuted = 0;
    public StayAction_l0c(Behaviour behaviour) {
      this.behaviour = behaviour;
    }

    public void execute() {
      // Do nothing 
      timeExecuted++;
    }

    public boolean finishCondition() {
      return timeExecuted == 1;
    }
  }
  public class MoveAction_a0c_5 extends BehaviourStep {
    /*package*/ Behaviour behaviour;
    /*package*/ Object target;
    /*package*/ Object concreteTarget;
    public MoveAction_a0c_5(Behaviour behaviour) {
      target = RespiratoryCubicle.getInstance();
      this.behaviour = behaviour;
    }

    public void execute() {
      if (concreteTarget == null) {
        if (target instanceof RoomType) {
          concreteTarget = SelectLocation(((RoomType) target));
        } else {
          concreteTarget = target;
        }
      }

      if (target instanceof RoomType) {
        if (EvaluateRoomChoice(((Room) concreteTarget)) == 0) {
          concreteTarget = SelectLocation(((RoomType) target));
        }
      }

      MoveTowards(concreteTarget);
    }

    public boolean finishCondition() {
      return ImAt(concreteTarget);
    }
  }
  public class OrderAction_b0c_1 extends BehaviourStep {
    /*package*/ Behaviour behaviour;
    public OrderAction_b0c_1(Behaviour behaviour) {
      this.behaviour = behaviour;
    }

    public void execute() {
      Actor a = (Actor) behaviour.getSignalTrigger().GetData("patient");

      a.TakeOrder(new MoveToOrder().WithDestination(CubicleNurse.this));
    }
  }
  public class StayAction_c0c_5 extends BehaviourStep {
    /*package*/ Behaviour behaviour;
    /*package*/ int timeExecuted = 0;
    public StayAction_c0c_5(Behaviour behaviour) {
      this.behaviour = behaviour;
    }

    public void execute() {
      // Do nothing 
      timeExecuted++;
    }

    public boolean finishCondition() {
      return timeExecuted == 5;
    }
  }
  public class StayAction_d0c_1 extends PassiveBehaviourStep {
    /*package*/ Behaviour behaviour;
    /*package*/ int testingTime = LFD.getInstance().getProcessingTime();
    /*package*/ int timeExecuted = 0;
    public StayAction_d0c_1(Behaviour behaviour) {
      this.behaviour = behaviour;
    }

    public void execute() {
      // Do nothing 
      timeExecuted++;
    }

    public boolean finishCondition() {
      return timeExecuted == testingTime;
    }
  }
  public class Choice_e0c_1 extends InstantBehaviourStep {
    /*package*/ Behaviour behaviour;
    public Choice_e0c_1(Behaviour behaviour) {
      this.behaviour = behaviour;
    }

    public void execute() {
      if ((((patient) behaviour.getSignalTrigger().GetData("patient")).COVIDInfectionStatus == "Symptomatic") || (((patient) behaviour.getSignalTrigger().GetData("patient")).COVIDInfectionStatus == "Asymptomatic")) {
        ArrayList<BehaviourStep> plstSteps = new ArrayList();
        plstSteps.add(new Choice_a0e0c(behaviour));
        behaviour.injectSteps(plstSteps);
      } else {
        ArrayList<BehaviourStep> plstSteps = new ArrayList();
        plstSteps.add(new Choice_a0e0c_3(behaviour));
        behaviour.injectSteps(plstSteps);
      }
    }
  }
  public class Choice_a0e0c extends InstantBehaviourStep {
    /*package*/ Behaviour behaviour;
    public Choice_a0e0c(Behaviour behaviour) {
      this.behaviour = behaviour;
    }

    public void execute() {
      if (Dice(70)) {
        ArrayList<BehaviourStep> plstSteps = new ArrayList();
        plstSteps.add(new Consequence_a0a0e0c(behaviour));
        behaviour.injectSteps(plstSteps);
      } else {
        ArrayList<BehaviourStep> plstSteps = new ArrayList();
        plstSteps.add(new Consequence_a0a0e0c_1(behaviour));
        behaviour.injectSteps(plstSteps);
      }
    }
  }
  public class Choice_a0e0c_1 extends InstantBehaviourStep {
    /*package*/ Behaviour behaviour;
    public Choice_a0e0c_1(Behaviour behaviour) {
      this.behaviour = behaviour;
    }

    public void execute() {
      if (Dice(70)) {
        ArrayList<BehaviourStep> plstSteps = new ArrayList();
        plstSteps.add(new Consequence_a0a0e0c(behaviour));
        behaviour.injectSteps(plstSteps);
      } else {
        ArrayList<BehaviourStep> plstSteps = new ArrayList();
        plstSteps.add(new Consequence_a0a0e0c_1(behaviour));
        behaviour.injectSteps(plstSteps);
      }
    }
  }
  public class Consequence_a0a0e0c extends InstantBehaviourStep {
    /*package*/ Behaviour behaviour;
    public Consequence_a0a0e0c(Behaviour behaviour) {
      this.behaviour = behaviour;
    }

    public void execute() {
      ((patient) behaviour.getSignalTrigger().GetData("patient")).LFDCOVIDResult = "Positive";

    }
  }
  public class Consequence_a0a0e0c_0 extends InstantBehaviourStep {
    /*package*/ Behaviour behaviour;
    public Consequence_a0a0e0c_0(Behaviour behaviour) {
      this.behaviour = behaviour;
    }

    public void execute() {
      ((patient) behaviour.getSignalTrigger().GetData("patient")).LFDCOVIDResult = "Positive";

    }
  }
  public class Consequence_a0a0e0c_1 extends InstantBehaviourStep {
    /*package*/ Behaviour behaviour;
    public Consequence_a0a0e0c_1(Behaviour behaviour) {
      this.behaviour = behaviour;
    }

    public void execute() {
      ((patient) behaviour.getSignalTrigger().GetData("patient")).LFDCOVIDResult = "Negative";

    }
  }
  public class Consequence_a0a0e0c_2 extends InstantBehaviourStep {
    /*package*/ Behaviour behaviour;
    public Consequence_a0a0e0c_2(Behaviour behaviour) {
      this.behaviour = behaviour;
    }

    public void execute() {
      ((patient) behaviour.getSignalTrigger().GetData("patient")).LFDCOVIDResult = "Negative";

    }
  }
  public class Choice_a0e0c_3 extends InstantBehaviourStep {
    /*package*/ Behaviour behaviour;
    public Choice_a0e0c_3(Behaviour behaviour) {
      this.behaviour = behaviour;
    }

    public void execute() {
      if (Dice(99)) {
        ArrayList<BehaviourStep> plstSteps = new ArrayList();
        plstSteps.add(new Consequence_a0a0e0c_3(behaviour));
        behaviour.injectSteps(plstSteps);
      } else {
        ArrayList<BehaviourStep> plstSteps = new ArrayList();
        plstSteps.add(new Consequence_a0a0e0c_5(behaviour));
        behaviour.injectSteps(plstSteps);
      }
    }
  }
  public class Choice_a0e0c_5 extends InstantBehaviourStep {
    /*package*/ Behaviour behaviour;
    public Choice_a0e0c_5(Behaviour behaviour) {
      this.behaviour = behaviour;
    }

    public void execute() {
      if (Dice(99)) {
        ArrayList<BehaviourStep> plstSteps = new ArrayList();
        plstSteps.add(new Consequence_a0a0e0c_3(behaviour));
        behaviour.injectSteps(plstSteps);
      } else {
        ArrayList<BehaviourStep> plstSteps = new ArrayList();
        plstSteps.add(new Consequence_a0a0e0c_5(behaviour));
        behaviour.injectSteps(plstSteps);
      }
    }
  }
  public class Consequence_a0a0e0c_3 extends InstantBehaviourStep {
    /*package*/ Behaviour behaviour;
    public Consequence_a0a0e0c_3(Behaviour behaviour) {
      this.behaviour = behaviour;
    }

    public void execute() {
      ((patient) behaviour.getSignalTrigger().GetData("patient")).LFDCOVIDResult = "Negative";

    }
  }
  public class Consequence_a0a0e0c_4 extends InstantBehaviourStep {
    /*package*/ Behaviour behaviour;
    public Consequence_a0a0e0c_4(Behaviour behaviour) {
      this.behaviour = behaviour;
    }

    public void execute() {
      ((patient) behaviour.getSignalTrigger().GetData("patient")).LFDCOVIDResult = "Negative";

    }
  }
  public class Consequence_a0a0e0c_5 extends InstantBehaviourStep {
    /*package*/ Behaviour behaviour;
    public Consequence_a0a0e0c_5(Behaviour behaviour) {
      this.behaviour = behaviour;
    }

    public void execute() {
      ((patient) behaviour.getSignalTrigger().GetData("patient")).LFDCOVIDResult = "Positive";

    }
  }
  public class Consequence_a0a0e0c_6 extends InstantBehaviourStep {
    /*package*/ Behaviour behaviour;
    public Consequence_a0a0e0c_6(Behaviour behaviour) {
      this.behaviour = behaviour;
    }

    public void execute() {
      ((patient) behaviour.getSignalTrigger().GetData("patient")).LFDCOVIDResult = "Positive";

    }
  }
  public class Choice_f0c_1 extends InstantBehaviourStep {
    /*package*/ Behaviour behaviour;
    public Choice_f0c_1(Behaviour behaviour) {
      this.behaviour = behaviour;
    }

    public void execute() {
      if ((((patient) behaviour.getSignalTrigger().GetData("patient")).FluAInfectionStatus == "Symptomatic") || (((patient) behaviour.getSignalTrigger().GetData("patient")).FluAInfectionStatus == "Asymptomatic")) {
        ArrayList<BehaviourStep> plstSteps = new ArrayList();
        plstSteps.add(new Choice_a0f0c(behaviour));
        behaviour.injectSteps(plstSteps);
      } else {
        ArrayList<BehaviourStep> plstSteps = new ArrayList();
        plstSteps.add(new Choice_a0f0c_3(behaviour));
        behaviour.injectSteps(plstSteps);
      }
    }
  }
  public class Choice_a0f0c extends InstantBehaviourStep {
    /*package*/ Behaviour behaviour;
    public Choice_a0f0c(Behaviour behaviour) {
      this.behaviour = behaviour;
    }

    public void execute() {
      if (Dice(88)) {
        ArrayList<BehaviourStep> plstSteps = new ArrayList();
        plstSteps.add(new Consequence_a0a0f0c(behaviour));
        behaviour.injectSteps(plstSteps);
      } else {
        ArrayList<BehaviourStep> plstSteps = new ArrayList();
        plstSteps.add(new Consequence_a0a0f0c_1(behaviour));
        behaviour.injectSteps(plstSteps);
      }
    }
  }
  public class Choice_a0f0c_1 extends InstantBehaviourStep {
    /*package*/ Behaviour behaviour;
    public Choice_a0f0c_1(Behaviour behaviour) {
      this.behaviour = behaviour;
    }

    public void execute() {
      if (Dice(88)) {
        ArrayList<BehaviourStep> plstSteps = new ArrayList();
        plstSteps.add(new Consequence_a0a0f0c(behaviour));
        behaviour.injectSteps(plstSteps);
      } else {
        ArrayList<BehaviourStep> plstSteps = new ArrayList();
        plstSteps.add(new Consequence_a0a0f0c_1(behaviour));
        behaviour.injectSteps(plstSteps);
      }
    }
  }
  public class Consequence_a0a0f0c extends InstantBehaviourStep {
    /*package*/ Behaviour behaviour;
    public Consequence_a0a0f0c(Behaviour behaviour) {
      this.behaviour = behaviour;
    }

    public void execute() {
      ((patient) behaviour.getSignalTrigger().GetData("patient")).LFDFluAResult = "Positive";

    }
  }
  public class Consequence_a0a0f0c_0 extends InstantBehaviourStep {
    /*package*/ Behaviour behaviour;
    public Consequence_a0a0f0c_0(Behaviour behaviour) {
      this.behaviour = behaviour;
    }

    public void execute() {
      ((patient) behaviour.getSignalTrigger().GetData("patient")).LFDFluAResult = "Positive";

    }
  }
  public class Consequence_a0a0f0c_1 extends InstantBehaviourStep {
    /*package*/ Behaviour behaviour;
    public Consequence_a0a0f0c_1(Behaviour behaviour) {
      this.behaviour = behaviour;
    }

    public void execute() {
      ((patient) behaviour.getSignalTrigger().GetData("patient")).LFDFluAResult = "Negative";

    }
  }
  public class Consequence_a0a0f0c_2 extends InstantBehaviourStep {
    /*package*/ Behaviour behaviour;
    public Consequence_a0a0f0c_2(Behaviour behaviour) {
      this.behaviour = behaviour;
    }

    public void execute() {
      ((patient) behaviour.getSignalTrigger().GetData("patient")).LFDFluAResult = "Negative";

    }
  }
  public class Choice_a0f0c_3 extends InstantBehaviourStep {
    /*package*/ Behaviour behaviour;
    public Choice_a0f0c_3(Behaviour behaviour) {
      this.behaviour = behaviour;
    }

    public void execute() {
      if (Dice(95)) {
        ArrayList<BehaviourStep> plstSteps = new ArrayList();
        plstSteps.add(new Consequence_a0a0f0c_3(behaviour));
        behaviour.injectSteps(plstSteps);
      } else {
        ArrayList<BehaviourStep> plstSteps = new ArrayList();
        plstSteps.add(new Consequence_a0a0f0c_5(behaviour));
        behaviour.injectSteps(plstSteps);
      }
    }
  }
  public class Choice_a0f0c_5 extends InstantBehaviourStep {
    /*package*/ Behaviour behaviour;
    public Choice_a0f0c_5(Behaviour behaviour) {
      this.behaviour = behaviour;
    }

    public void execute() {
      if (Dice(95)) {
        ArrayList<BehaviourStep> plstSteps = new ArrayList();
        plstSteps.add(new Consequence_a0a0f0c_3(behaviour));
        behaviour.injectSteps(plstSteps);
      } else {
        ArrayList<BehaviourStep> plstSteps = new ArrayList();
        plstSteps.add(new Consequence_a0a0f0c_5(behaviour));
        behaviour.injectSteps(plstSteps);
      }
    }
  }
  public class Consequence_a0a0f0c_3 extends InstantBehaviourStep {
    /*package*/ Behaviour behaviour;
    public Consequence_a0a0f0c_3(Behaviour behaviour) {
      this.behaviour = behaviour;
    }

    public void execute() {
      ((patient) behaviour.getSignalTrigger().GetData("patient")).LFDFluAResult = "Negative";

    }
  }
  public class Consequence_a0a0f0c_4 extends InstantBehaviourStep {
    /*package*/ Behaviour behaviour;
    public Consequence_a0a0f0c_4(Behaviour behaviour) {
      this.behaviour = behaviour;
    }

    public void execute() {
      ((patient) behaviour.getSignalTrigger().GetData("patient")).LFDFluAResult = "Negative";

    }
  }
  public class Consequence_a0a0f0c_5 extends InstantBehaviourStep {
    /*package*/ Behaviour behaviour;
    public Consequence_a0a0f0c_5(Behaviour behaviour) {
      this.behaviour = behaviour;
    }

    public void execute() {
      ((patient) behaviour.getSignalTrigger().GetData("patient")).LFDFluAResult = "Positive";

    }
  }
  public class Consequence_a0a0f0c_6 extends InstantBehaviourStep {
    /*package*/ Behaviour behaviour;
    public Consequence_a0a0f0c_6(Behaviour behaviour) {
      this.behaviour = behaviour;
    }

    public void execute() {
      ((patient) behaviour.getSignalTrigger().GetData("patient")).LFDFluAResult = "Positive";

    }
  }
  public class Choice_g0c_1 extends InstantBehaviourStep {
    /*package*/ Behaviour behaviour;
    public Choice_g0c_1(Behaviour behaviour) {
      this.behaviour = behaviour;
    }

    public void execute() {
      if ((((patient) behaviour.getSignalTrigger().GetData("patient")).FluBInfectionStatus == "Symptomatic") || (((patient) behaviour.getSignalTrigger().GetData("patient")).FluBInfectionStatus == "Asymptomatic")) {
        ArrayList<BehaviourStep> plstSteps = new ArrayList();
        plstSteps.add(new Choice_a0g0c(behaviour));
        behaviour.injectSteps(plstSteps);
      } else {
        ArrayList<BehaviourStep> plstSteps = new ArrayList();
        plstSteps.add(new Choice_a0g0c_3(behaviour));
        behaviour.injectSteps(plstSteps);
      }
    }
  }
  public class Choice_a0g0c extends InstantBehaviourStep {
    /*package*/ Behaviour behaviour;
    public Choice_a0g0c(Behaviour behaviour) {
      this.behaviour = behaviour;
    }

    public void execute() {
      if (Dice(93)) {
        ArrayList<BehaviourStep> plstSteps = new ArrayList();
        plstSteps.add(new Consequence_a0a0g0c(behaviour));
        behaviour.injectSteps(plstSteps);
      } else {
        ArrayList<BehaviourStep> plstSteps = new ArrayList();
        plstSteps.add(new Consequence_a0a0g0c_1(behaviour));
        behaviour.injectSteps(plstSteps);
      }
    }
  }
  public class Choice_a0g0c_1 extends InstantBehaviourStep {
    /*package*/ Behaviour behaviour;
    public Choice_a0g0c_1(Behaviour behaviour) {
      this.behaviour = behaviour;
    }

    public void execute() {
      if (Dice(93)) {
        ArrayList<BehaviourStep> plstSteps = new ArrayList();
        plstSteps.add(new Consequence_a0a0g0c(behaviour));
        behaviour.injectSteps(plstSteps);
      } else {
        ArrayList<BehaviourStep> plstSteps = new ArrayList();
        plstSteps.add(new Consequence_a0a0g0c_1(behaviour));
        behaviour.injectSteps(plstSteps);
      }
    }
  }
  public class Consequence_a0a0g0c extends InstantBehaviourStep {
    /*package*/ Behaviour behaviour;
    public Consequence_a0a0g0c(Behaviour behaviour) {
      this.behaviour = behaviour;
    }

    public void execute() {
      ((patient) behaviour.getSignalTrigger().GetData("patient")).LFDFluBResult = "Positive";

    }
  }
  public class Consequence_a0a0g0c_0 extends InstantBehaviourStep {
    /*package*/ Behaviour behaviour;
    public Consequence_a0a0g0c_0(Behaviour behaviour) {
      this.behaviour = behaviour;
    }

    public void execute() {
      ((patient) behaviour.getSignalTrigger().GetData("patient")).LFDFluBResult = "Positive";

    }
  }
  public class Consequence_a0a0g0c_1 extends InstantBehaviourStep {
    /*package*/ Behaviour behaviour;
    public Consequence_a0a0g0c_1(Behaviour behaviour) {
      this.behaviour = behaviour;
    }

    public void execute() {
      ((patient) behaviour.getSignalTrigger().GetData("patient")).LFDFluBResult = "Negative";

    }
  }
  public class Consequence_a0a0g0c_2 extends InstantBehaviourStep {
    /*package*/ Behaviour behaviour;
    public Consequence_a0a0g0c_2(Behaviour behaviour) {
      this.behaviour = behaviour;
    }

    public void execute() {
      ((patient) behaviour.getSignalTrigger().GetData("patient")).LFDFluBResult = "Negative";

    }
  }
  public class Choice_a0g0c_3 extends InstantBehaviourStep {
    /*package*/ Behaviour behaviour;
    public Choice_a0g0c_3(Behaviour behaviour) {
      this.behaviour = behaviour;
    }

    public void execute() {
      if (Dice(98)) {
        ArrayList<BehaviourStep> plstSteps = new ArrayList();
        plstSteps.add(new Consequence_a0a0g0c_3(behaviour));
        behaviour.injectSteps(plstSteps);
      } else {
        ArrayList<BehaviourStep> plstSteps = new ArrayList();
        plstSteps.add(new Consequence_a0a0g0c_5(behaviour));
        behaviour.injectSteps(plstSteps);
      }
    }
  }
  public class Choice_a0g0c_5 extends InstantBehaviourStep {
    /*package*/ Behaviour behaviour;
    public Choice_a0g0c_5(Behaviour behaviour) {
      this.behaviour = behaviour;
    }

    public void execute() {
      if (Dice(98)) {
        ArrayList<BehaviourStep> plstSteps = new ArrayList();
        plstSteps.add(new Consequence_a0a0g0c_3(behaviour));
        behaviour.injectSteps(plstSteps);
      } else {
        ArrayList<BehaviourStep> plstSteps = new ArrayList();
        plstSteps.add(new Consequence_a0a0g0c_5(behaviour));
        behaviour.injectSteps(plstSteps);
      }
    }
  }
  public class Consequence_a0a0g0c_3 extends InstantBehaviourStep {
    /*package*/ Behaviour behaviour;
    public Consequence_a0a0g0c_3(Behaviour behaviour) {
      this.behaviour = behaviour;
    }

    public void execute() {
      ((patient) behaviour.getSignalTrigger().GetData("patient")).LFDFluBResult = "Negative";

    }
  }
  public class Consequence_a0a0g0c_4 extends InstantBehaviourStep {
    /*package*/ Behaviour behaviour;
    public Consequence_a0a0g0c_4(Behaviour behaviour) {
      this.behaviour = behaviour;
    }

    public void execute() {
      ((patient) behaviour.getSignalTrigger().GetData("patient")).LFDFluBResult = "Negative";

    }
  }
  public class Consequence_a0a0g0c_5 extends InstantBehaviourStep {
    /*package*/ Behaviour behaviour;
    public Consequence_a0a0g0c_5(Behaviour behaviour) {
      this.behaviour = behaviour;
    }

    public void execute() {
      ((patient) behaviour.getSignalTrigger().GetData("patient")).LFDFluBResult = "Positive";

    }
  }
  public class Consequence_a0a0g0c_6 extends InstantBehaviourStep {
    /*package*/ Behaviour behaviour;
    public Consequence_a0a0g0c_6(Behaviour behaviour) {
      this.behaviour = behaviour;
    }

    public void execute() {
      ((patient) behaviour.getSignalTrigger().GetData("patient")).LFDFluBResult = "Positive";

    }
  }
  public class Choice_h0c_1 extends InstantBehaviourStep {
    /*package*/ Behaviour behaviour;
    public Choice_h0c_1(Behaviour behaviour) {
      this.behaviour = behaviour;
    }

    public void execute() {
      if (((patient) behaviour.getSignalTrigger().GetData("patient")).LFDCOVIDResult == "Positive" && (((patient) behaviour.getSignalTrigger().GetData("patient")).LFDFluAResult == "Negative" && ((patient) behaviour.getSignalTrigger().GetData("patient")).LFDFluBResult == "Negative")) {
        ArrayList<BehaviourStep> plstSteps = new ArrayList();
        plstSteps.add(new SendSignalAction_a0h0c(behaviour));
        behaviour.injectSteps(plstSteps);
      } else {
        ArrayList<BehaviourStep> plstSteps = new ArrayList();
        behaviour.injectSteps(plstSteps);
      }
    }
  }
  public class SendSignalAction_a0h0c extends BehaviourStep {
    /*package*/ Behaviour behaviour;

    public SendSignalAction_a0h0c(Behaviour behaviour) {
      this.behaviour = behaviour;
    }

    public void execute() {
      Board b = ReadBoard();
      Signal sendSignalTemp = new Signal();
      sendSignalTemp = new TakeabedTrigger_aSignal();
      sendSignalTemp.AddData("patient", behaviour.getSignalTrigger().GetData("patient"));

      b.PushMission(sendSignalTemp);
    }
  }
  public class SendSignalAction_a0h0c_1 extends BehaviourStep {
    /*package*/ Behaviour behaviour;

    public SendSignalAction_a0h0c_1(Behaviour behaviour) {
      this.behaviour = behaviour;
    }

    public void execute() {
      Board b = ReadBoard();
      Signal sendSignalTemp = new Signal();
      sendSignalTemp = new TakeabedTrigger_aSignal();
      sendSignalTemp.AddData("patient", behaviour.getSignalTrigger().GetData("patient"));

      b.PushMission(sendSignalTemp);
    }
  }
  public class Choice_i0c_1 extends InstantBehaviourStep {
    /*package*/ Behaviour behaviour;
    public Choice_i0c_1(Behaviour behaviour) {
      this.behaviour = behaviour;
    }

    public void execute() {
      if (((patient) behaviour.getSignalTrigger().GetData("patient")).LFDCOVIDResult == "Positive" && (((patient) behaviour.getSignalTrigger().GetData("patient")).LFDFluAResult == "Positive" || ((patient) behaviour.getSignalTrigger().GetData("patient")).LFDFluBResult == "Positive")) {
        ArrayList<BehaviourStep> plstSteps = new ArrayList();
        plstSteps.add(new SendSignalAction_a0i0c(behaviour));
        behaviour.injectSteps(plstSteps);
      } else {
        ArrayList<BehaviourStep> plstSteps = new ArrayList();
        behaviour.injectSteps(plstSteps);
      }
    }
  }
  public class SendSignalAction_a0i0c extends BehaviourStep {
    /*package*/ Behaviour behaviour;

    public SendSignalAction_a0i0c(Behaviour behaviour) {
      this.behaviour = behaviour;
    }

    public void execute() {
      Board b = ReadBoard();
      Signal sendSignalTemp = new Signal();
      sendSignalTemp = new TakeabedTrigger_a_2Signal();
      sendSignalTemp.AddData("patient", behaviour.getSignalTrigger().GetData("patient"));

      b.PushMission(sendSignalTemp);
    }
  }
  public class SendSignalAction_a0i0c_1 extends BehaviourStep {
    /*package*/ Behaviour behaviour;

    public SendSignalAction_a0i0c_1(Behaviour behaviour) {
      this.behaviour = behaviour;
    }

    public void execute() {
      Board b = ReadBoard();
      Signal sendSignalTemp = new Signal();
      sendSignalTemp = new TakeabedTrigger_a_2Signal();
      sendSignalTemp.AddData("patient", behaviour.getSignalTrigger().GetData("patient"));

      b.PushMission(sendSignalTemp);
    }
  }
  public class Choice_j0c_1 extends InstantBehaviourStep {
    /*package*/ Behaviour behaviour;
    public Choice_j0c_1(Behaviour behaviour) {
      this.behaviour = behaviour;
    }

    public void execute() {
      if (((patient) behaviour.getSignalTrigger().GetData("patient")).LFDCOVIDResult == "Negative" && (((patient) behaviour.getSignalTrigger().GetData("patient")).LFDFluAResult == "Positive" || ((patient) behaviour.getSignalTrigger().GetData("patient")).LFDFluBResult == "Positive")) {
        ArrayList<BehaviourStep> plstSteps = new ArrayList();
        plstSteps.add(new SendSignalAction_a0j0c(behaviour));
        behaviour.injectSteps(plstSteps);
      } else {
        ArrayList<BehaviourStep> plstSteps = new ArrayList();
        behaviour.injectSteps(plstSteps);
      }
    }
  }
  public class SendSignalAction_a0j0c extends BehaviourStep {
    /*package*/ Behaviour behaviour;

    public SendSignalAction_a0j0c(Behaviour behaviour) {
      this.behaviour = behaviour;
    }

    public void execute() {
      Board b = ReadBoard();
      Signal sendSignalTemp = new Signal();
      sendSignalTemp = new SignificantCOVIDcontactTrigger_gSignal();
      sendSignalTemp.AddData("patient", behaviour.getSignalTrigger().GetData("patient"));

      b.PushMission(sendSignalTemp);
    }
  }
  public class SendSignalAction_a0j0c_1 extends BehaviourStep {
    /*package*/ Behaviour behaviour;

    public SendSignalAction_a0j0c_1(Behaviour behaviour) {
      this.behaviour = behaviour;
    }

    public void execute() {
      Board b = ReadBoard();
      Signal sendSignalTemp = new Signal();
      sendSignalTemp = new SignificantCOVIDcontactTrigger_gSignal();
      sendSignalTemp.AddData("patient", behaviour.getSignalTrigger().GetData("patient"));

      b.PushMission(sendSignalTemp);
    }
  }
  public class Choice_k0c_1 extends InstantBehaviourStep {
    /*package*/ Behaviour behaviour;
    public Choice_k0c_1(Behaviour behaviour) {
      this.behaviour = behaviour;
    }

    public void execute() {
      if (((patient) behaviour.getSignalTrigger().GetData("patient")).LFDCOVIDResult == "Negative" && (((patient) behaviour.getSignalTrigger().GetData("patient")).LFDFluAResult == "Negative" && ((patient) behaviour.getSignalTrigger().GetData("patient")).LFDFluBResult == "Negative")) {
        ArrayList<BehaviourStep> plstSteps = new ArrayList();
        plstSteps.add(new SendSignalAction_a0k0c(behaviour));
        behaviour.injectSteps(plstSteps);
      } else {
        ArrayList<BehaviourStep> plstSteps = new ArrayList();
        behaviour.injectSteps(plstSteps);
      }
    }
  }
  public class SendSignalAction_a0k0c extends BehaviourStep {
    /*package*/ Behaviour behaviour;

    public SendSignalAction_a0k0c(Behaviour behaviour) {
      this.behaviour = behaviour;
    }

    public void execute() {
      Board b = ReadBoard();
      Signal sendSignalTemp = new Signal();
      sendSignalTemp = new ConfirmwithPCRTrigger_jSignal();
      sendSignalTemp.AddData("patient", behaviour.getSignalTrigger().GetData("patient"));

      b.PushMission(sendSignalTemp);
    }
  }
  public class SendSignalAction_a0k0c_1 extends BehaviourStep {
    /*package*/ Behaviour behaviour;

    public SendSignalAction_a0k0c_1(Behaviour behaviour) {
      this.behaviour = behaviour;
    }

    public void execute() {
      Board b = ReadBoard();
      Signal sendSignalTemp = new Signal();
      sendSignalTemp = new ConfirmwithPCRTrigger_jSignal();
      sendSignalTemp.AddData("patient", behaviour.getSignalTrigger().GetData("patient"));

      b.PushMission(sendSignalTemp);
    }
  }
  public class StayAction_l0c_1 extends BehaviourStep {
    /*package*/ Behaviour behaviour;
    /*package*/ int timeExecuted = 0;
    public StayAction_l0c_1(Behaviour behaviour) {
      this.behaviour = behaviour;
    }

    public void execute() {
      // Do nothing 
      timeExecuted++;
    }

    public boolean finishCondition() {
      return timeExecuted == 1;
    }
  }
  public class MoveAction_a0d_7 extends BehaviourStep {
    /*package*/ Behaviour behaviour;
    /*package*/ Object target;
    /*package*/ Object concreteTarget;
    public MoveAction_a0d_7(Behaviour behaviour) {
      target = NonRespiratoryCubicle.getInstance();
      this.behaviour = behaviour;
    }

    public void execute() {
      if (concreteTarget == null) {
        if (target instanceof RoomType) {
          concreteTarget = SelectLocation(((RoomType) target));
        } else {
          concreteTarget = target;
        }
      }

      if (target instanceof RoomType) {
        if (EvaluateRoomChoice(((Room) concreteTarget)) == 0) {
          concreteTarget = SelectLocation(((RoomType) target));
        }
      }

      MoveTowards(concreteTarget);
    }

    public boolean finishCondition() {
      return ImAt(concreteTarget);
    }
  }
  public class OrderAction_b0d extends BehaviourStep {
    /*package*/ Behaviour behaviour;
    public OrderAction_b0d(Behaviour behaviour) {
      this.behaviour = behaviour;
    }

    public void execute() {
      Actor a = (Actor) behaviour.getSignalTrigger().GetData("patient");

      a.TakeOrder(new MoveToOrder().WithDestination(CubicleNurse.this));
    }
  }
  public class StayAction_c0d_3 extends BehaviourStep {
    /*package*/ Behaviour behaviour;
    /*package*/ int timeExecuted = 0;
    public StayAction_c0d_3(Behaviour behaviour) {
      this.behaviour = behaviour;
    }

    public void execute() {
      // Do nothing 
      timeExecuted++;
    }

    public boolean finishCondition() {
      return timeExecuted == 5;
    }
  }
  public class StayAction_d0d_3 extends PassiveBehaviourStep {
    /*package*/ Behaviour behaviour;
    /*package*/ int testingTime = LFD.getInstance().getProcessingTime();
    /*package*/ int timeExecuted = 0;
    public StayAction_d0d_3(Behaviour behaviour) {
      this.behaviour = behaviour;
    }

    public void execute() {
      // Do nothing 
      timeExecuted++;
    }

    public boolean finishCondition() {
      return timeExecuted == testingTime;
    }
  }
  public class Choice_e0d extends InstantBehaviourStep {
    /*package*/ Behaviour behaviour;
    public Choice_e0d(Behaviour behaviour) {
      this.behaviour = behaviour;
    }

    public void execute() {
      if ((((patient) behaviour.getSignalTrigger().GetData("patient")).COVIDInfectionStatus == "Symptomatic") || (((patient) behaviour.getSignalTrigger().GetData("patient")).COVIDInfectionStatus == "Asymptomatic")) {
        ArrayList<BehaviourStep> plstSteps = new ArrayList();
        plstSteps.add(new Choice_a0e0d(behaviour));
        behaviour.injectSteps(plstSteps);
      } else {
        ArrayList<BehaviourStep> plstSteps = new ArrayList();
        plstSteps.add(new Choice_a0e0d_3(behaviour));
        behaviour.injectSteps(plstSteps);
      }
    }
  }
  public class Choice_f0d extends InstantBehaviourStep {
    /*package*/ Behaviour behaviour;
    public Choice_f0d(Behaviour behaviour) {
      this.behaviour = behaviour;
    }

    public void execute() {
      if ((((patient) behaviour.getSignalTrigger().GetData("patient")).FluAInfectionStatus == "Symptomatic") || (((patient) behaviour.getSignalTrigger().GetData("patient")).FluAInfectionStatus == "Asymptomatic")) {
        ArrayList<BehaviourStep> plstSteps = new ArrayList();
        plstSteps.add(new Choice_a0f0d(behaviour));
        behaviour.injectSteps(plstSteps);
      } else {
        ArrayList<BehaviourStep> plstSteps = new ArrayList();
        plstSteps.add(new Choice_a0f0d_3(behaviour));
        behaviour.injectSteps(plstSteps);
      }
    }
  }
  public class Choice_g0d extends InstantBehaviourStep {
    /*package*/ Behaviour behaviour;
    public Choice_g0d(Behaviour behaviour) {
      this.behaviour = behaviour;
    }

    public void execute() {
      if ((((patient) behaviour.getSignalTrigger().GetData("patient")).FluBInfectionStatus == "Symptomatic") || (((patient) behaviour.getSignalTrigger().GetData("patient")).FluBInfectionStatus == "Asymptomatic")) {
        ArrayList<BehaviourStep> plstSteps = new ArrayList();
        plstSteps.add(new Choice_a0g0d(behaviour));
        behaviour.injectSteps(plstSteps);
      } else {
        ArrayList<BehaviourStep> plstSteps = new ArrayList();
        plstSteps.add(new Choice_a0g0d_3(behaviour));
        behaviour.injectSteps(plstSteps);
      }
    }
  }
  public class Choice_h0d extends InstantBehaviourStep {
    /*package*/ Behaviour behaviour;
    public Choice_h0d(Behaviour behaviour) {
      this.behaviour = behaviour;
    }

    public void execute() {
      if (((patient) behaviour.getSignalTrigger().GetData("patient")).LFDCOVIDResult == "Positive") {
        ArrayList<BehaviourStep> plstSteps = new ArrayList();
        plstSteps.add(new SendSignalAction_a0h0d(behaviour));
        behaviour.injectSteps(plstSteps);
      } else {
        ArrayList<BehaviourStep> plstSteps = new ArrayList();
        behaviour.injectSteps(plstSteps);
      }
    }
  }
  public class Choice_i0d extends InstantBehaviourStep {
    /*package*/ Behaviour behaviour;
    public Choice_i0d(Behaviour behaviour) {
      this.behaviour = behaviour;
    }

    public void execute() {
      if (((patient) behaviour.getSignalTrigger().GetData("patient")).LFDCOVIDResult == "Negative") {
        ArrayList<BehaviourStep> plstSteps = new ArrayList();
        plstSteps.add(new SendSignalAction_a0i0d(behaviour));
        behaviour.injectSteps(plstSteps);
      } else {
        ArrayList<BehaviourStep> plstSteps = new ArrayList();
        behaviour.injectSteps(plstSteps);
      }
    }
  }
  public class StayAction_j0d extends BehaviourStep {
    /*package*/ Behaviour behaviour;
    /*package*/ int timeExecuted = 0;
    public StayAction_j0d(Behaviour behaviour) {
      this.behaviour = behaviour;
    }

    public void execute() {
      // Do nothing 
      timeExecuted++;
    }

    public boolean finishCondition() {
      return timeExecuted == 1;
    }
  }
  public class MoveAction_a0d_9 extends BehaviourStep {
    /*package*/ Behaviour behaviour;
    /*package*/ Object target;
    /*package*/ Object concreteTarget;
    public MoveAction_a0d_9(Behaviour behaviour) {
      target = NonRespiratoryCubicle.getInstance();
      this.behaviour = behaviour;
    }

    public void execute() {
      if (concreteTarget == null) {
        if (target instanceof RoomType) {
          concreteTarget = SelectLocation(((RoomType) target));
        } else {
          concreteTarget = target;
        }
      }

      if (target instanceof RoomType) {
        if (EvaluateRoomChoice(((Room) concreteTarget)) == 0) {
          concreteTarget = SelectLocation(((RoomType) target));
        }
      }

      MoveTowards(concreteTarget);
    }

    public boolean finishCondition() {
      return ImAt(concreteTarget);
    }
  }
  public class OrderAction_b0d_1 extends BehaviourStep {
    /*package*/ Behaviour behaviour;
    public OrderAction_b0d_1(Behaviour behaviour) {
      this.behaviour = behaviour;
    }

    public void execute() {
      Actor a = (Actor) behaviour.getSignalTrigger().GetData("patient");

      a.TakeOrder(new MoveToOrder().WithDestination(CubicleNurse.this));
    }
  }
  public class StayAction_c0d_5 extends BehaviourStep {
    /*package*/ Behaviour behaviour;
    /*package*/ int timeExecuted = 0;
    public StayAction_c0d_5(Behaviour behaviour) {
      this.behaviour = behaviour;
    }

    public void execute() {
      // Do nothing 
      timeExecuted++;
    }

    public boolean finishCondition() {
      return timeExecuted == 5;
    }
  }
  public class StayAction_d0d_5 extends PassiveBehaviourStep {
    /*package*/ Behaviour behaviour;
    /*package*/ int testingTime = LFD.getInstance().getProcessingTime();
    /*package*/ int timeExecuted = 0;
    public StayAction_d0d_5(Behaviour behaviour) {
      this.behaviour = behaviour;
    }

    public void execute() {
      // Do nothing 
      timeExecuted++;
    }

    public boolean finishCondition() {
      return timeExecuted == testingTime;
    }
  }
  public class Choice_e0d_1 extends InstantBehaviourStep {
    /*package*/ Behaviour behaviour;
    public Choice_e0d_1(Behaviour behaviour) {
      this.behaviour = behaviour;
    }

    public void execute() {
      if ((((patient) behaviour.getSignalTrigger().GetData("patient")).COVIDInfectionStatus == "Symptomatic") || (((patient) behaviour.getSignalTrigger().GetData("patient")).COVIDInfectionStatus == "Asymptomatic")) {
        ArrayList<BehaviourStep> plstSteps = new ArrayList();
        plstSteps.add(new Choice_a0e0d(behaviour));
        behaviour.injectSteps(plstSteps);
      } else {
        ArrayList<BehaviourStep> plstSteps = new ArrayList();
        plstSteps.add(new Choice_a0e0d_3(behaviour));
        behaviour.injectSteps(plstSteps);
      }
    }
  }
  public class Choice_a0e0d extends InstantBehaviourStep {
    /*package*/ Behaviour behaviour;
    public Choice_a0e0d(Behaviour behaviour) {
      this.behaviour = behaviour;
    }

    public void execute() {
      if (Dice(70)) {
        ArrayList<BehaviourStep> plstSteps = new ArrayList();
        plstSteps.add(new Consequence_a0a0e0d(behaviour));
        behaviour.injectSteps(plstSteps);
      } else {
        ArrayList<BehaviourStep> plstSteps = new ArrayList();
        plstSteps.add(new Consequence_a0a0e0d_1(behaviour));
        behaviour.injectSteps(plstSteps);
      }
    }
  }
  public class Choice_a0e0d_1 extends InstantBehaviourStep {
    /*package*/ Behaviour behaviour;
    public Choice_a0e0d_1(Behaviour behaviour) {
      this.behaviour = behaviour;
    }

    public void execute() {
      if (Dice(70)) {
        ArrayList<BehaviourStep> plstSteps = new ArrayList();
        plstSteps.add(new Consequence_a0a0e0d(behaviour));
        behaviour.injectSteps(plstSteps);
      } else {
        ArrayList<BehaviourStep> plstSteps = new ArrayList();
        plstSteps.add(new Consequence_a0a0e0d_1(behaviour));
        behaviour.injectSteps(plstSteps);
      }
    }
  }
  public class Consequence_a0a0e0d extends InstantBehaviourStep {
    /*package*/ Behaviour behaviour;
    public Consequence_a0a0e0d(Behaviour behaviour) {
      this.behaviour = behaviour;
    }

    public void execute() {
      ((patient) behaviour.getSignalTrigger().GetData("patient")).LFDCOVIDResult = "Positive";

    }
  }
  public class Consequence_a0a0e0d_0 extends InstantBehaviourStep {
    /*package*/ Behaviour behaviour;
    public Consequence_a0a0e0d_0(Behaviour behaviour) {
      this.behaviour = behaviour;
    }

    public void execute() {
      ((patient) behaviour.getSignalTrigger().GetData("patient")).LFDCOVIDResult = "Positive";

    }
  }
  public class Consequence_a0a0e0d_1 extends InstantBehaviourStep {
    /*package*/ Behaviour behaviour;
    public Consequence_a0a0e0d_1(Behaviour behaviour) {
      this.behaviour = behaviour;
    }

    public void execute() {
      ((patient) behaviour.getSignalTrigger().GetData("patient")).LFDCOVIDResult = "Negative";

    }
  }
  public class Consequence_a0a0e0d_2 extends InstantBehaviourStep {
    /*package*/ Behaviour behaviour;
    public Consequence_a0a0e0d_2(Behaviour behaviour) {
      this.behaviour = behaviour;
    }

    public void execute() {
      ((patient) behaviour.getSignalTrigger().GetData("patient")).LFDCOVIDResult = "Negative";

    }
  }
  public class Choice_a0e0d_3 extends InstantBehaviourStep {
    /*package*/ Behaviour behaviour;
    public Choice_a0e0d_3(Behaviour behaviour) {
      this.behaviour = behaviour;
    }

    public void execute() {
      if (Dice(99)) {
        ArrayList<BehaviourStep> plstSteps = new ArrayList();
        plstSteps.add(new Consequence_a0a0e0d_3(behaviour));
        behaviour.injectSteps(plstSteps);
      } else {
        ArrayList<BehaviourStep> plstSteps = new ArrayList();
        plstSteps.add(new Consequence_a0a0e0d_5(behaviour));
        behaviour.injectSteps(plstSteps);
      }
    }
  }
  public class Choice_a0e0d_5 extends InstantBehaviourStep {
    /*package*/ Behaviour behaviour;
    public Choice_a0e0d_5(Behaviour behaviour) {
      this.behaviour = behaviour;
    }

    public void execute() {
      if (Dice(99)) {
        ArrayList<BehaviourStep> plstSteps = new ArrayList();
        plstSteps.add(new Consequence_a0a0e0d_3(behaviour));
        behaviour.injectSteps(plstSteps);
      } else {
        ArrayList<BehaviourStep> plstSteps = new ArrayList();
        plstSteps.add(new Consequence_a0a0e0d_5(behaviour));
        behaviour.injectSteps(plstSteps);
      }
    }
  }
  public class Consequence_a0a0e0d_3 extends InstantBehaviourStep {
    /*package*/ Behaviour behaviour;
    public Consequence_a0a0e0d_3(Behaviour behaviour) {
      this.behaviour = behaviour;
    }

    public void execute() {
      ((patient) behaviour.getSignalTrigger().GetData("patient")).LFDCOVIDResult = "Negative";

    }
  }
  public class Consequence_a0a0e0d_4 extends InstantBehaviourStep {
    /*package*/ Behaviour behaviour;
    public Consequence_a0a0e0d_4(Behaviour behaviour) {
      this.behaviour = behaviour;
    }

    public void execute() {
      ((patient) behaviour.getSignalTrigger().GetData("patient")).LFDCOVIDResult = "Negative";

    }
  }
  public class Consequence_a0a0e0d_5 extends InstantBehaviourStep {
    /*package*/ Behaviour behaviour;
    public Consequence_a0a0e0d_5(Behaviour behaviour) {
      this.behaviour = behaviour;
    }

    public void execute() {
      ((patient) behaviour.getSignalTrigger().GetData("patient")).LFDCOVIDResult = "Positive";

    }
  }
  public class Consequence_a0a0e0d_6 extends InstantBehaviourStep {
    /*package*/ Behaviour behaviour;
    public Consequence_a0a0e0d_6(Behaviour behaviour) {
      this.behaviour = behaviour;
    }

    public void execute() {
      ((patient) behaviour.getSignalTrigger().GetData("patient")).LFDCOVIDResult = "Positive";

    }
  }
  public class Choice_f0d_1 extends InstantBehaviourStep {
    /*package*/ Behaviour behaviour;
    public Choice_f0d_1(Behaviour behaviour) {
      this.behaviour = behaviour;
    }

    public void execute() {
      if ((((patient) behaviour.getSignalTrigger().GetData("patient")).FluAInfectionStatus == "Symptomatic") || (((patient) behaviour.getSignalTrigger().GetData("patient")).FluAInfectionStatus == "Asymptomatic")) {
        ArrayList<BehaviourStep> plstSteps = new ArrayList();
        plstSteps.add(new Choice_a0f0d(behaviour));
        behaviour.injectSteps(plstSteps);
      } else {
        ArrayList<BehaviourStep> plstSteps = new ArrayList();
        plstSteps.add(new Choice_a0f0d_3(behaviour));
        behaviour.injectSteps(plstSteps);
      }
    }
  }
  public class Choice_a0f0d extends InstantBehaviourStep {
    /*package*/ Behaviour behaviour;
    public Choice_a0f0d(Behaviour behaviour) {
      this.behaviour = behaviour;
    }

    public void execute() {
      if (Dice(88)) {
        ArrayList<BehaviourStep> plstSteps = new ArrayList();
        plstSteps.add(new Consequence_a0a0f0d(behaviour));
        behaviour.injectSteps(plstSteps);
      } else {
        ArrayList<BehaviourStep> plstSteps = new ArrayList();
        plstSteps.add(new Consequence_a0a0f0d_1(behaviour));
        behaviour.injectSteps(plstSteps);
      }
    }
  }
  public class Choice_a0f0d_1 extends InstantBehaviourStep {
    /*package*/ Behaviour behaviour;
    public Choice_a0f0d_1(Behaviour behaviour) {
      this.behaviour = behaviour;
    }

    public void execute() {
      if (Dice(88)) {
        ArrayList<BehaviourStep> plstSteps = new ArrayList();
        plstSteps.add(new Consequence_a0a0f0d(behaviour));
        behaviour.injectSteps(plstSteps);
      } else {
        ArrayList<BehaviourStep> plstSteps = new ArrayList();
        plstSteps.add(new Consequence_a0a0f0d_1(behaviour));
        behaviour.injectSteps(plstSteps);
      }
    }
  }
  public class Consequence_a0a0f0d extends InstantBehaviourStep {
    /*package*/ Behaviour behaviour;
    public Consequence_a0a0f0d(Behaviour behaviour) {
      this.behaviour = behaviour;
    }

    public void execute() {
      ((patient) behaviour.getSignalTrigger().GetData("patient")).LFDFluAResult = "Positive";

    }
  }
  public class Consequence_a0a0f0d_0 extends InstantBehaviourStep {
    /*package*/ Behaviour behaviour;
    public Consequence_a0a0f0d_0(Behaviour behaviour) {
      this.behaviour = behaviour;
    }

    public void execute() {
      ((patient) behaviour.getSignalTrigger().GetData("patient")).LFDFluAResult = "Positive";

    }
  }
  public class Consequence_a0a0f0d_1 extends InstantBehaviourStep {
    /*package*/ Behaviour behaviour;
    public Consequence_a0a0f0d_1(Behaviour behaviour) {
      this.behaviour = behaviour;
    }

    public void execute() {
      ((patient) behaviour.getSignalTrigger().GetData("patient")).LFDFluAResult = "Negative";

    }
  }
  public class Consequence_a0a0f0d_2 extends InstantBehaviourStep {
    /*package*/ Behaviour behaviour;
    public Consequence_a0a0f0d_2(Behaviour behaviour) {
      this.behaviour = behaviour;
    }

    public void execute() {
      ((patient) behaviour.getSignalTrigger().GetData("patient")).LFDFluAResult = "Negative";

    }
  }
  public class Choice_a0f0d_3 extends InstantBehaviourStep {
    /*package*/ Behaviour behaviour;
    public Choice_a0f0d_3(Behaviour behaviour) {
      this.behaviour = behaviour;
    }

    public void execute() {
      if (Dice(95)) {
        ArrayList<BehaviourStep> plstSteps = new ArrayList();
        plstSteps.add(new Consequence_a0a0f0d_3(behaviour));
        behaviour.injectSteps(plstSteps);
      } else {
        ArrayList<BehaviourStep> plstSteps = new ArrayList();
        plstSteps.add(new Consequence_a0a0f0d_5(behaviour));
        behaviour.injectSteps(plstSteps);
      }
    }
  }
  public class Choice_a0f0d_5 extends InstantBehaviourStep {
    /*package*/ Behaviour behaviour;
    public Choice_a0f0d_5(Behaviour behaviour) {
      this.behaviour = behaviour;
    }

    public void execute() {
      if (Dice(95)) {
        ArrayList<BehaviourStep> plstSteps = new ArrayList();
        plstSteps.add(new Consequence_a0a0f0d_3(behaviour));
        behaviour.injectSteps(plstSteps);
      } else {
        ArrayList<BehaviourStep> plstSteps = new ArrayList();
        plstSteps.add(new Consequence_a0a0f0d_5(behaviour));
        behaviour.injectSteps(plstSteps);
      }
    }
  }
  public class Consequence_a0a0f0d_3 extends InstantBehaviourStep {
    /*package*/ Behaviour behaviour;
    public Consequence_a0a0f0d_3(Behaviour behaviour) {
      this.behaviour = behaviour;
    }

    public void execute() {
      ((patient) behaviour.getSignalTrigger().GetData("patient")).LFDFluAResult = "Negative";

    }
  }
  public class Consequence_a0a0f0d_4 extends InstantBehaviourStep {
    /*package*/ Behaviour behaviour;
    public Consequence_a0a0f0d_4(Behaviour behaviour) {
      this.behaviour = behaviour;
    }

    public void execute() {
      ((patient) behaviour.getSignalTrigger().GetData("patient")).LFDFluAResult = "Negative";

    }
  }
  public class Consequence_a0a0f0d_5 extends InstantBehaviourStep {
    /*package*/ Behaviour behaviour;
    public Consequence_a0a0f0d_5(Behaviour behaviour) {
      this.behaviour = behaviour;
    }

    public void execute() {
      ((patient) behaviour.getSignalTrigger().GetData("patient")).LFDFluAResult = "Positive";

    }
  }
  public class Consequence_a0a0f0d_6 extends InstantBehaviourStep {
    /*package*/ Behaviour behaviour;
    public Consequence_a0a0f0d_6(Behaviour behaviour) {
      this.behaviour = behaviour;
    }

    public void execute() {
      ((patient) behaviour.getSignalTrigger().GetData("patient")).LFDFluAResult = "Positive";

    }
  }
  public class Choice_g0d_1 extends InstantBehaviourStep {
    /*package*/ Behaviour behaviour;
    public Choice_g0d_1(Behaviour behaviour) {
      this.behaviour = behaviour;
    }

    public void execute() {
      if ((((patient) behaviour.getSignalTrigger().GetData("patient")).FluBInfectionStatus == "Symptomatic") || (((patient) behaviour.getSignalTrigger().GetData("patient")).FluBInfectionStatus == "Asymptomatic")) {
        ArrayList<BehaviourStep> plstSteps = new ArrayList();
        plstSteps.add(new Choice_a0g0d(behaviour));
        behaviour.injectSteps(plstSteps);
      } else {
        ArrayList<BehaviourStep> plstSteps = new ArrayList();
        plstSteps.add(new Choice_a0g0d_3(behaviour));
        behaviour.injectSteps(plstSteps);
      }
    }
  }
  public class Choice_a0g0d extends InstantBehaviourStep {
    /*package*/ Behaviour behaviour;
    public Choice_a0g0d(Behaviour behaviour) {
      this.behaviour = behaviour;
    }

    public void execute() {
      if (Dice(93)) {
        ArrayList<BehaviourStep> plstSteps = new ArrayList();
        plstSteps.add(new Consequence_a0a0g0d(behaviour));
        behaviour.injectSteps(plstSteps);
      } else {
        ArrayList<BehaviourStep> plstSteps = new ArrayList();
        plstSteps.add(new Consequence_a0a0g0d_1(behaviour));
        behaviour.injectSteps(plstSteps);
      }
    }
  }
  public class Choice_a0g0d_1 extends InstantBehaviourStep {
    /*package*/ Behaviour behaviour;
    public Choice_a0g0d_1(Behaviour behaviour) {
      this.behaviour = behaviour;
    }

    public void execute() {
      if (Dice(93)) {
        ArrayList<BehaviourStep> plstSteps = new ArrayList();
        plstSteps.add(new Consequence_a0a0g0d(behaviour));
        behaviour.injectSteps(plstSteps);
      } else {
        ArrayList<BehaviourStep> plstSteps = new ArrayList();
        plstSteps.add(new Consequence_a0a0g0d_1(behaviour));
        behaviour.injectSteps(plstSteps);
      }
    }
  }
  public class Consequence_a0a0g0d extends InstantBehaviourStep {
    /*package*/ Behaviour behaviour;
    public Consequence_a0a0g0d(Behaviour behaviour) {
      this.behaviour = behaviour;
    }

    public void execute() {
      ((patient) behaviour.getSignalTrigger().GetData("patient")).LFDFluBResult = "Positive";

    }
  }
  public class Consequence_a0a0g0d_0 extends InstantBehaviourStep {
    /*package*/ Behaviour behaviour;
    public Consequence_a0a0g0d_0(Behaviour behaviour) {
      this.behaviour = behaviour;
    }

    public void execute() {
      ((patient) behaviour.getSignalTrigger().GetData("patient")).LFDFluBResult = "Positive";

    }
  }
  public class Consequence_a0a0g0d_1 extends InstantBehaviourStep {
    /*package*/ Behaviour behaviour;
    public Consequence_a0a0g0d_1(Behaviour behaviour) {
      this.behaviour = behaviour;
    }

    public void execute() {
      ((patient) behaviour.getSignalTrigger().GetData("patient")).LFDFluBResult = "Negative";

    }
  }
  public class Consequence_a0a0g0d_2 extends InstantBehaviourStep {
    /*package*/ Behaviour behaviour;
    public Consequence_a0a0g0d_2(Behaviour behaviour) {
      this.behaviour = behaviour;
    }

    public void execute() {
      ((patient) behaviour.getSignalTrigger().GetData("patient")).LFDFluBResult = "Negative";

    }
  }
  public class Choice_a0g0d_3 extends InstantBehaviourStep {
    /*package*/ Behaviour behaviour;
    public Choice_a0g0d_3(Behaviour behaviour) {
      this.behaviour = behaviour;
    }

    public void execute() {
      if (Dice(98)) {
        ArrayList<BehaviourStep> plstSteps = new ArrayList();
        plstSteps.add(new Consequence_a0a0g0d_3(behaviour));
        behaviour.injectSteps(plstSteps);
      } else {
        ArrayList<BehaviourStep> plstSteps = new ArrayList();
        plstSteps.add(new Consequence_a0a0g0d_5(behaviour));
        behaviour.injectSteps(plstSteps);
      }
    }
  }
  public class Choice_a0g0d_5 extends InstantBehaviourStep {
    /*package*/ Behaviour behaviour;
    public Choice_a0g0d_5(Behaviour behaviour) {
      this.behaviour = behaviour;
    }

    public void execute() {
      if (Dice(98)) {
        ArrayList<BehaviourStep> plstSteps = new ArrayList();
        plstSteps.add(new Consequence_a0a0g0d_3(behaviour));
        behaviour.injectSteps(plstSteps);
      } else {
        ArrayList<BehaviourStep> plstSteps = new ArrayList();
        plstSteps.add(new Consequence_a0a0g0d_5(behaviour));
        behaviour.injectSteps(plstSteps);
      }
    }
  }
  public class Consequence_a0a0g0d_3 extends InstantBehaviourStep {
    /*package*/ Behaviour behaviour;
    public Consequence_a0a0g0d_3(Behaviour behaviour) {
      this.behaviour = behaviour;
    }

    public void execute() {
      ((patient) behaviour.getSignalTrigger().GetData("patient")).LFDFluBResult = "Negative";

    }
  }
  public class Consequence_a0a0g0d_4 extends InstantBehaviourStep {
    /*package*/ Behaviour behaviour;
    public Consequence_a0a0g0d_4(Behaviour behaviour) {
      this.behaviour = behaviour;
    }

    public void execute() {
      ((patient) behaviour.getSignalTrigger().GetData("patient")).LFDFluBResult = "Negative";

    }
  }
  public class Consequence_a0a0g0d_5 extends InstantBehaviourStep {
    /*package*/ Behaviour behaviour;
    public Consequence_a0a0g0d_5(Behaviour behaviour) {
      this.behaviour = behaviour;
    }

    public void execute() {
      ((patient) behaviour.getSignalTrigger().GetData("patient")).LFDFluBResult = "Positive";

    }
  }
  public class Consequence_a0a0g0d_6 extends InstantBehaviourStep {
    /*package*/ Behaviour behaviour;
    public Consequence_a0a0g0d_6(Behaviour behaviour) {
      this.behaviour = behaviour;
    }

    public void execute() {
      ((patient) behaviour.getSignalTrigger().GetData("patient")).LFDFluBResult = "Positive";

    }
  }
  public class Choice_h0d_1 extends InstantBehaviourStep {
    /*package*/ Behaviour behaviour;
    public Choice_h0d_1(Behaviour behaviour) {
      this.behaviour = behaviour;
    }

    public void execute() {
      if (((patient) behaviour.getSignalTrigger().GetData("patient")).LFDCOVIDResult == "Positive") {
        ArrayList<BehaviourStep> plstSteps = new ArrayList();
        plstSteps.add(new SendSignalAction_a0h0d(behaviour));
        behaviour.injectSteps(plstSteps);
      } else {
        ArrayList<BehaviourStep> plstSteps = new ArrayList();
        behaviour.injectSteps(plstSteps);
      }
    }
  }
  public class SendSignalAction_a0h0d extends BehaviourStep {
    /*package*/ Behaviour behaviour;

    public SendSignalAction_a0h0d(Behaviour behaviour) {
      this.behaviour = behaviour;
    }

    public void execute() {
      Board b = ReadBoard();
      Signal sendSignalTemp = new Signal();
      sendSignalTemp = new DoConfirmatoryPCRTrigger_fSignal();
      sendSignalTemp.AddData("patient", behaviour.getSignalTrigger().GetData("patient"));

      b.PushMission(sendSignalTemp);
    }
  }
  public class SendSignalAction_a0h0d_1 extends BehaviourStep {
    /*package*/ Behaviour behaviour;

    public SendSignalAction_a0h0d_1(Behaviour behaviour) {
      this.behaviour = behaviour;
    }

    public void execute() {
      Board b = ReadBoard();
      Signal sendSignalTemp = new Signal();
      sendSignalTemp = new DoConfirmatoryPCRTrigger_fSignal();
      sendSignalTemp.AddData("patient", behaviour.getSignalTrigger().GetData("patient"));

      b.PushMission(sendSignalTemp);
    }
  }
  public class Choice_i0d_1 extends InstantBehaviourStep {
    /*package*/ Behaviour behaviour;
    public Choice_i0d_1(Behaviour behaviour) {
      this.behaviour = behaviour;
    }

    public void execute() {
      if (((patient) behaviour.getSignalTrigger().GetData("patient")).LFDCOVIDResult == "Negative") {
        ArrayList<BehaviourStep> plstSteps = new ArrayList();
        plstSteps.add(new SendSignalAction_a0i0d(behaviour));
        behaviour.injectSteps(plstSteps);
      } else {
        ArrayList<BehaviourStep> plstSteps = new ArrayList();
        behaviour.injectSteps(plstSteps);
      }
    }
  }
  public class SendSignalAction_a0i0d extends BehaviourStep {
    /*package*/ Behaviour behaviour;

    public SendSignalAction_a0i0d(Behaviour behaviour) {
      this.behaviour = behaviour;
    }

    public void execute() {
      Board b = ReadBoard();
      Signal sendSignalTemp = new Signal();
      sendSignalTemp = new COVIDRiskCheckTrigger_iSignal();
      sendSignalTemp.AddData("patient", behaviour.getSignalTrigger().GetData("patient"));

      b.PushMission(sendSignalTemp);
    }
  }
  public class SendSignalAction_a0i0d_1 extends BehaviourStep {
    /*package*/ Behaviour behaviour;

    public SendSignalAction_a0i0d_1(Behaviour behaviour) {
      this.behaviour = behaviour;
    }

    public void execute() {
      Board b = ReadBoard();
      Signal sendSignalTemp = new Signal();
      sendSignalTemp = new COVIDRiskCheckTrigger_iSignal();
      sendSignalTemp.AddData("patient", behaviour.getSignalTrigger().GetData("patient"));

      b.PushMission(sendSignalTemp);
    }
  }
  public class StayAction_j0d_1 extends BehaviourStep {
    /*package*/ Behaviour behaviour;
    /*package*/ int timeExecuted = 0;
    public StayAction_j0d_1(Behaviour behaviour) {
      this.behaviour = behaviour;
    }

    public void execute() {
      // Do nothing 
      timeExecuted++;
    }

    public boolean finishCondition() {
      return timeExecuted == 1;
    }
  }
  public class MoveAction_a0e_7 extends BehaviourStep {
    /*package*/ Behaviour behaviour;
    /*package*/ Object target;
    /*package*/ Object concreteTarget;
    public MoveAction_a0e_7(Behaviour behaviour) {
      target = NonRespiratoryCubicle.getInstance();
      this.behaviour = behaviour;
    }

    public void execute() {
      if (concreteTarget == null) {
        if (target instanceof RoomType) {
          concreteTarget = SelectLocation(((RoomType) target));
        } else {
          concreteTarget = target;
        }
      }

      if (target instanceof RoomType) {
        if (EvaluateRoomChoice(((Room) concreteTarget)) == 0) {
          concreteTarget = SelectLocation(((RoomType) target));
        }
      }

      MoveTowards(concreteTarget);
    }

    public boolean finishCondition() {
      return ImAt(concreteTarget);
    }
  }
  public class OrderAction_b0e_3 extends BehaviourStep {
    /*package*/ Behaviour behaviour;
    public OrderAction_b0e_3(Behaviour behaviour) {
      this.behaviour = behaviour;
    }

    public void execute() {
      Actor a = (Actor) behaviour.getSignalTrigger().GetData("patient");

      a.TakeOrder(new MoveToOrder().WithDestination(CubicleNurse.this));
    }
  }
  public class StayAction_c0e_7 extends BehaviourStep {
    /*package*/ Behaviour behaviour;
    /*package*/ int timeExecuted = 0;
    public StayAction_c0e_7(Behaviour behaviour) {
      this.behaviour = behaviour;
    }

    public void execute() {
      // Do nothing 
      timeExecuted++;
    }

    public boolean finishCondition() {
      return timeExecuted == 5;
    }
  }
  public class StayAction_d0e extends PassiveBehaviourStep {
    /*package*/ Behaviour behaviour;
    /*package*/ int testingTime = LabPCR.getInstance().getProcessingTime();
    /*package*/ int timeExecuted = 0;
    public StayAction_d0e(Behaviour behaviour) {
      this.behaviour = behaviour;
    }

    public void execute() {
      // Do nothing 
      timeExecuted++;
    }

    public boolean finishCondition() {
      return timeExecuted == testingTime;
    }
  }
  public class Choice_e0e_3 extends InstantBehaviourStep {
    /*package*/ Behaviour behaviour;
    public Choice_e0e_3(Behaviour behaviour) {
      this.behaviour = behaviour;
    }

    public void execute() {
      if ((((patient) behaviour.getSignalTrigger().GetData("patient")).COVIDInfectionStatus == "Symptomatic") || (((patient) behaviour.getSignalTrigger().GetData("patient")).COVIDInfectionStatus == "Asymptomatic")) {
        ArrayList<BehaviourStep> plstSteps = new ArrayList();
        plstSteps.add(new Choice_a0e0e_7(behaviour));
        behaviour.injectSteps(plstSteps);
      } else {
        ArrayList<BehaviourStep> plstSteps = new ArrayList();
        plstSteps.add(new Choice_a0e0e_11(behaviour));
        behaviour.injectSteps(plstSteps);
      }
    }
  }
  public class Choice_f0e_3 extends InstantBehaviourStep {
    /*package*/ Behaviour behaviour;
    public Choice_f0e_3(Behaviour behaviour) {
      this.behaviour = behaviour;
    }

    public void execute() {
      if ((((patient) behaviour.getSignalTrigger().GetData("patient")).FluAInfectionStatus == "Symptomatic") || (((patient) behaviour.getSignalTrigger().GetData("patient")).FluAInfectionStatus == "Asymptomatic")) {
        ArrayList<BehaviourStep> plstSteps = new ArrayList();
        plstSteps.add(new Choice_a0f0e_7(behaviour));
        behaviour.injectSteps(plstSteps);
      } else {
        ArrayList<BehaviourStep> plstSteps = new ArrayList();
        plstSteps.add(new Choice_a0f0e_11(behaviour));
        behaviour.injectSteps(plstSteps);
      }
    }
  }
  public class Choice_g0e extends InstantBehaviourStep {
    /*package*/ Behaviour behaviour;
    public Choice_g0e(Behaviour behaviour) {
      this.behaviour = behaviour;
    }

    public void execute() {
      if ((((patient) behaviour.getSignalTrigger().GetData("patient")).FluBInfectionStatus == "Symptomatic") || (((patient) behaviour.getSignalTrigger().GetData("patient")).FluBInfectionStatus == "Asymptomatic")) {
        ArrayList<BehaviourStep> plstSteps = new ArrayList();
        plstSteps.add(new Choice_a0g0e(behaviour));
        behaviour.injectSteps(plstSteps);
      } else {
        ArrayList<BehaviourStep> plstSteps = new ArrayList();
        plstSteps.add(new Choice_a0g0e_3(behaviour));
        behaviour.injectSteps(plstSteps);
      }
    }
  }
  public class SendSignalAction_h0e extends BehaviourStep {
    /*package*/ Behaviour behaviour;

    public SendSignalAction_h0e(Behaviour behaviour) {
      this.behaviour = behaviour;
    }

    public void execute() {
      Board b = ReadBoard();
      Signal sendSignalTemp = new Signal();
      sendSignalTemp = new TakeabedTrigger_aSignal();
      sendSignalTemp.AddData("patient", behaviour.getSignalTrigger().GetData("patient"));

      b.PushMission(sendSignalTemp);
    }
  }
  public class StayAction_i0e extends BehaviourStep {
    /*package*/ Behaviour behaviour;
    /*package*/ int timeExecuted = 0;
    public StayAction_i0e(Behaviour behaviour) {
      this.behaviour = behaviour;
    }

    public void execute() {
      // Do nothing 
      timeExecuted++;
    }

    public boolean finishCondition() {
      return timeExecuted == 1;
    }
  }
  public class MoveAction_a0e_9 extends BehaviourStep {
    /*package*/ Behaviour behaviour;
    /*package*/ Object target;
    /*package*/ Object concreteTarget;
    public MoveAction_a0e_9(Behaviour behaviour) {
      target = NonRespiratoryCubicle.getInstance();
      this.behaviour = behaviour;
    }

    public void execute() {
      if (concreteTarget == null) {
        if (target instanceof RoomType) {
          concreteTarget = SelectLocation(((RoomType) target));
        } else {
          concreteTarget = target;
        }
      }

      if (target instanceof RoomType) {
        if (EvaluateRoomChoice(((Room) concreteTarget)) == 0) {
          concreteTarget = SelectLocation(((RoomType) target));
        }
      }

      MoveTowards(concreteTarget);
    }

    public boolean finishCondition() {
      return ImAt(concreteTarget);
    }
  }
  public class OrderAction_b0e_5 extends BehaviourStep {
    /*package*/ Behaviour behaviour;
    public OrderAction_b0e_5(Behaviour behaviour) {
      this.behaviour = behaviour;
    }

    public void execute() {
      Actor a = (Actor) behaviour.getSignalTrigger().GetData("patient");

      a.TakeOrder(new MoveToOrder().WithDestination(CubicleNurse.this));
    }
  }
  public class StayAction_c0e_9 extends BehaviourStep {
    /*package*/ Behaviour behaviour;
    /*package*/ int timeExecuted = 0;
    public StayAction_c0e_9(Behaviour behaviour) {
      this.behaviour = behaviour;
    }

    public void execute() {
      // Do nothing 
      timeExecuted++;
    }

    public boolean finishCondition() {
      return timeExecuted == 5;
    }
  }
  public class StayAction_d0e_1 extends PassiveBehaviourStep {
    /*package*/ Behaviour behaviour;
    /*package*/ int testingTime = LabPCR.getInstance().getProcessingTime();
    /*package*/ int timeExecuted = 0;
    public StayAction_d0e_1(Behaviour behaviour) {
      this.behaviour = behaviour;
    }

    public void execute() {
      // Do nothing 
      timeExecuted++;
    }

    public boolean finishCondition() {
      return timeExecuted == testingTime;
    }
  }
  public class Choice_e0e_5 extends InstantBehaviourStep {
    /*package*/ Behaviour behaviour;
    public Choice_e0e_5(Behaviour behaviour) {
      this.behaviour = behaviour;
    }

    public void execute() {
      if ((((patient) behaviour.getSignalTrigger().GetData("patient")).COVIDInfectionStatus == "Symptomatic") || (((patient) behaviour.getSignalTrigger().GetData("patient")).COVIDInfectionStatus == "Asymptomatic")) {
        ArrayList<BehaviourStep> plstSteps = new ArrayList();
        plstSteps.add(new Choice_a0e0e_7(behaviour));
        behaviour.injectSteps(plstSteps);
      } else {
        ArrayList<BehaviourStep> plstSteps = new ArrayList();
        plstSteps.add(new Choice_a0e0e_11(behaviour));
        behaviour.injectSteps(plstSteps);
      }
    }
  }
  public class Choice_a0e0e_7 extends InstantBehaviourStep {
    /*package*/ Behaviour behaviour;
    public Choice_a0e0e_7(Behaviour behaviour) {
      this.behaviour = behaviour;
    }

    public void execute() {
      if (Dice(100)) {
        ArrayList<BehaviourStep> plstSteps = new ArrayList();
        plstSteps.add(new Consequence_a0a0e0e_7(behaviour));
        behaviour.injectSteps(plstSteps);
      } else {
        ArrayList<BehaviourStep> plstSteps = new ArrayList();
        plstSteps.add(new Consequence_a0a0e0e_9(behaviour));
        behaviour.injectSteps(plstSteps);
      }
    }
  }
  public class Choice_a0e0e_9 extends InstantBehaviourStep {
    /*package*/ Behaviour behaviour;
    public Choice_a0e0e_9(Behaviour behaviour) {
      this.behaviour = behaviour;
    }

    public void execute() {
      if (Dice(100)) {
        ArrayList<BehaviourStep> plstSteps = new ArrayList();
        plstSteps.add(new Consequence_a0a0e0e_7(behaviour));
        behaviour.injectSteps(plstSteps);
      } else {
        ArrayList<BehaviourStep> plstSteps = new ArrayList();
        plstSteps.add(new Consequence_a0a0e0e_9(behaviour));
        behaviour.injectSteps(plstSteps);
      }
    }
  }
  public class Consequence_a0a0e0e_7 extends InstantBehaviourStep {
    /*package*/ Behaviour behaviour;
    public Consequence_a0a0e0e_7(Behaviour behaviour) {
      this.behaviour = behaviour;
    }

    public void execute() {
      ((patient) behaviour.getSignalTrigger().GetData("patient")).LabPCRCOVIDResult = "Positive";

    }
  }
  public class Consequence_a0a0e0e_8 extends InstantBehaviourStep {
    /*package*/ Behaviour behaviour;
    public Consequence_a0a0e0e_8(Behaviour behaviour) {
      this.behaviour = behaviour;
    }

    public void execute() {
      ((patient) behaviour.getSignalTrigger().GetData("patient")).LabPCRCOVIDResult = "Positive";

    }
  }
  public class Consequence_a0a0e0e_9 extends InstantBehaviourStep {
    /*package*/ Behaviour behaviour;
    public Consequence_a0a0e0e_9(Behaviour behaviour) {
      this.behaviour = behaviour;
    }

    public void execute() {
      ((patient) behaviour.getSignalTrigger().GetData("patient")).LabPCRCOVIDResult = "Negative";

    }
  }
  public class Consequence_a0a0e0e_10 extends InstantBehaviourStep {
    /*package*/ Behaviour behaviour;
    public Consequence_a0a0e0e_10(Behaviour behaviour) {
      this.behaviour = behaviour;
    }

    public void execute() {
      ((patient) behaviour.getSignalTrigger().GetData("patient")).LabPCRCOVIDResult = "Negative";

    }
  }
  public class Choice_a0e0e_11 extends InstantBehaviourStep {
    /*package*/ Behaviour behaviour;
    public Choice_a0e0e_11(Behaviour behaviour) {
      this.behaviour = behaviour;
    }

    public void execute() {
      if (Dice(100)) {
        ArrayList<BehaviourStep> plstSteps = new ArrayList();
        plstSteps.add(new Consequence_a0a0e0e_11(behaviour));
        behaviour.injectSteps(plstSteps);
      } else {
        ArrayList<BehaviourStep> plstSteps = new ArrayList();
        plstSteps.add(new Consequence_a0a0e0e_13(behaviour));
        behaviour.injectSteps(plstSteps);
      }
    }
  }
  public class Choice_a0e0e_13 extends InstantBehaviourStep {
    /*package*/ Behaviour behaviour;
    public Choice_a0e0e_13(Behaviour behaviour) {
      this.behaviour = behaviour;
    }

    public void execute() {
      if (Dice(100)) {
        ArrayList<BehaviourStep> plstSteps = new ArrayList();
        plstSteps.add(new Consequence_a0a0e0e_11(behaviour));
        behaviour.injectSteps(plstSteps);
      } else {
        ArrayList<BehaviourStep> plstSteps = new ArrayList();
        plstSteps.add(new Consequence_a0a0e0e_13(behaviour));
        behaviour.injectSteps(plstSteps);
      }
    }
  }
  public class Consequence_a0a0e0e_11 extends InstantBehaviourStep {
    /*package*/ Behaviour behaviour;
    public Consequence_a0a0e0e_11(Behaviour behaviour) {
      this.behaviour = behaviour;
    }

    public void execute() {
      ((patient) behaviour.getSignalTrigger().GetData("patient")).LabPCRCOVIDResult = "Negative";

    }
  }
  public class Consequence_a0a0e0e_12 extends InstantBehaviourStep {
    /*package*/ Behaviour behaviour;
    public Consequence_a0a0e0e_12(Behaviour behaviour) {
      this.behaviour = behaviour;
    }

    public void execute() {
      ((patient) behaviour.getSignalTrigger().GetData("patient")).LabPCRCOVIDResult = "Negative";

    }
  }
  public class Consequence_a0a0e0e_13 extends InstantBehaviourStep {
    /*package*/ Behaviour behaviour;
    public Consequence_a0a0e0e_13(Behaviour behaviour) {
      this.behaviour = behaviour;
    }

    public void execute() {
      ((patient) behaviour.getSignalTrigger().GetData("patient")).LabPCRCOVIDResult = "Positive";

    }
  }
  public class Consequence_a0a0e0e_14 extends InstantBehaviourStep {
    /*package*/ Behaviour behaviour;
    public Consequence_a0a0e0e_14(Behaviour behaviour) {
      this.behaviour = behaviour;
    }

    public void execute() {
      ((patient) behaviour.getSignalTrigger().GetData("patient")).LabPCRCOVIDResult = "Positive";

    }
  }
  public class Choice_f0e_5 extends InstantBehaviourStep {
    /*package*/ Behaviour behaviour;
    public Choice_f0e_5(Behaviour behaviour) {
      this.behaviour = behaviour;
    }

    public void execute() {
      if ((((patient) behaviour.getSignalTrigger().GetData("patient")).FluAInfectionStatus == "Symptomatic") || (((patient) behaviour.getSignalTrigger().GetData("patient")).FluAInfectionStatus == "Asymptomatic")) {
        ArrayList<BehaviourStep> plstSteps = new ArrayList();
        plstSteps.add(new Choice_a0f0e_7(behaviour));
        behaviour.injectSteps(plstSteps);
      } else {
        ArrayList<BehaviourStep> plstSteps = new ArrayList();
        plstSteps.add(new Choice_a0f0e_11(behaviour));
        behaviour.injectSteps(plstSteps);
      }
    }
  }
  public class Choice_a0f0e_7 extends InstantBehaviourStep {
    /*package*/ Behaviour behaviour;
    public Choice_a0f0e_7(Behaviour behaviour) {
      this.behaviour = behaviour;
    }

    public void execute() {
      if (Dice(100)) {
        ArrayList<BehaviourStep> plstSteps = new ArrayList();
        plstSteps.add(new Consequence_a0a0f0e_7(behaviour));
        behaviour.injectSteps(plstSteps);
      } else {
        ArrayList<BehaviourStep> plstSteps = new ArrayList();
        plstSteps.add(new Consequence_a0a0f0e_9(behaviour));
        behaviour.injectSteps(plstSteps);
      }
    }
  }
  public class Choice_a0f0e_9 extends InstantBehaviourStep {
    /*package*/ Behaviour behaviour;
    public Choice_a0f0e_9(Behaviour behaviour) {
      this.behaviour = behaviour;
    }

    public void execute() {
      if (Dice(100)) {
        ArrayList<BehaviourStep> plstSteps = new ArrayList();
        plstSteps.add(new Consequence_a0a0f0e_7(behaviour));
        behaviour.injectSteps(plstSteps);
      } else {
        ArrayList<BehaviourStep> plstSteps = new ArrayList();
        plstSteps.add(new Consequence_a0a0f0e_9(behaviour));
        behaviour.injectSteps(plstSteps);
      }
    }
  }
  public class Consequence_a0a0f0e_7 extends InstantBehaviourStep {
    /*package*/ Behaviour behaviour;
    public Consequence_a0a0f0e_7(Behaviour behaviour) {
      this.behaviour = behaviour;
    }

    public void execute() {
      ((patient) behaviour.getSignalTrigger().GetData("patient")).LabPCRFluAResult = "Positive";

    }
  }
  public class Consequence_a0a0f0e_8 extends InstantBehaviourStep {
    /*package*/ Behaviour behaviour;
    public Consequence_a0a0f0e_8(Behaviour behaviour) {
      this.behaviour = behaviour;
    }

    public void execute() {
      ((patient) behaviour.getSignalTrigger().GetData("patient")).LabPCRFluAResult = "Positive";

    }
  }
  public class Consequence_a0a0f0e_9 extends InstantBehaviourStep {
    /*package*/ Behaviour behaviour;
    public Consequence_a0a0f0e_9(Behaviour behaviour) {
      this.behaviour = behaviour;
    }

    public void execute() {
      ((patient) behaviour.getSignalTrigger().GetData("patient")).LabPCRFluAResult = "Negative";

    }
  }
  public class Consequence_a0a0f0e_10 extends InstantBehaviourStep {
    /*package*/ Behaviour behaviour;
    public Consequence_a0a0f0e_10(Behaviour behaviour) {
      this.behaviour = behaviour;
    }

    public void execute() {
      ((patient) behaviour.getSignalTrigger().GetData("patient")).LabPCRFluAResult = "Negative";

    }
  }
  public class Choice_a0f0e_11 extends InstantBehaviourStep {
    /*package*/ Behaviour behaviour;
    public Choice_a0f0e_11(Behaviour behaviour) {
      this.behaviour = behaviour;
    }

    public void execute() {
      if (Dice(100)) {
        ArrayList<BehaviourStep> plstSteps = new ArrayList();
        plstSteps.add(new Consequence_a0a0f0e_11(behaviour));
        behaviour.injectSteps(plstSteps);
      } else {
        ArrayList<BehaviourStep> plstSteps = new ArrayList();
        plstSteps.add(new Consequence_a0a0f0e_13(behaviour));
        behaviour.injectSteps(plstSteps);
      }
    }
  }
  public class Choice_a0f0e_13 extends InstantBehaviourStep {
    /*package*/ Behaviour behaviour;
    public Choice_a0f0e_13(Behaviour behaviour) {
      this.behaviour = behaviour;
    }

    public void execute() {
      if (Dice(100)) {
        ArrayList<BehaviourStep> plstSteps = new ArrayList();
        plstSteps.add(new Consequence_a0a0f0e_11(behaviour));
        behaviour.injectSteps(plstSteps);
      } else {
        ArrayList<BehaviourStep> plstSteps = new ArrayList();
        plstSteps.add(new Consequence_a0a0f0e_13(behaviour));
        behaviour.injectSteps(plstSteps);
      }
    }
  }
  public class Consequence_a0a0f0e_11 extends InstantBehaviourStep {
    /*package*/ Behaviour behaviour;
    public Consequence_a0a0f0e_11(Behaviour behaviour) {
      this.behaviour = behaviour;
    }

    public void execute() {
      ((patient) behaviour.getSignalTrigger().GetData("patient")).LabPCRFluAResult = "Negative";

    }
  }
  public class Consequence_a0a0f0e_12 extends InstantBehaviourStep {
    /*package*/ Behaviour behaviour;
    public Consequence_a0a0f0e_12(Behaviour behaviour) {
      this.behaviour = behaviour;
    }

    public void execute() {
      ((patient) behaviour.getSignalTrigger().GetData("patient")).LabPCRFluAResult = "Negative";

    }
  }
  public class Consequence_a0a0f0e_13 extends InstantBehaviourStep {
    /*package*/ Behaviour behaviour;
    public Consequence_a0a0f0e_13(Behaviour behaviour) {
      this.behaviour = behaviour;
    }

    public void execute() {
      ((patient) behaviour.getSignalTrigger().GetData("patient")).LabPCRFluAResult = "Positive";

    }
  }
  public class Consequence_a0a0f0e_14 extends InstantBehaviourStep {
    /*package*/ Behaviour behaviour;
    public Consequence_a0a0f0e_14(Behaviour behaviour) {
      this.behaviour = behaviour;
    }

    public void execute() {
      ((patient) behaviour.getSignalTrigger().GetData("patient")).LabPCRFluAResult = "Positive";

    }
  }
  public class Choice_g0e_1 extends InstantBehaviourStep {
    /*package*/ Behaviour behaviour;
    public Choice_g0e_1(Behaviour behaviour) {
      this.behaviour = behaviour;
    }

    public void execute() {
      if ((((patient) behaviour.getSignalTrigger().GetData("patient")).FluBInfectionStatus == "Symptomatic") || (((patient) behaviour.getSignalTrigger().GetData("patient")).FluBInfectionStatus == "Asymptomatic")) {
        ArrayList<BehaviourStep> plstSteps = new ArrayList();
        plstSteps.add(new Choice_a0g0e(behaviour));
        behaviour.injectSteps(plstSteps);
      } else {
        ArrayList<BehaviourStep> plstSteps = new ArrayList();
        plstSteps.add(new Choice_a0g0e_3(behaviour));
        behaviour.injectSteps(plstSteps);
      }
    }
  }
  public class Choice_a0g0e extends InstantBehaviourStep {
    /*package*/ Behaviour behaviour;
    public Choice_a0g0e(Behaviour behaviour) {
      this.behaviour = behaviour;
    }

    public void execute() {
      if (Dice(100)) {
        ArrayList<BehaviourStep> plstSteps = new ArrayList();
        plstSteps.add(new Consequence_a0a0g0e(behaviour));
        behaviour.injectSteps(plstSteps);
      } else {
        ArrayList<BehaviourStep> plstSteps = new ArrayList();
        plstSteps.add(new Consequence_a0a0g0e_1(behaviour));
        behaviour.injectSteps(plstSteps);
      }
    }
  }
  public class Choice_a0g0e_1 extends InstantBehaviourStep {
    /*package*/ Behaviour behaviour;
    public Choice_a0g0e_1(Behaviour behaviour) {
      this.behaviour = behaviour;
    }

    public void execute() {
      if (Dice(100)) {
        ArrayList<BehaviourStep> plstSteps = new ArrayList();
        plstSteps.add(new Consequence_a0a0g0e(behaviour));
        behaviour.injectSteps(plstSteps);
      } else {
        ArrayList<BehaviourStep> plstSteps = new ArrayList();
        plstSteps.add(new Consequence_a0a0g0e_1(behaviour));
        behaviour.injectSteps(plstSteps);
      }
    }
  }
  public class Consequence_a0a0g0e extends InstantBehaviourStep {
    /*package*/ Behaviour behaviour;
    public Consequence_a0a0g0e(Behaviour behaviour) {
      this.behaviour = behaviour;
    }

    public void execute() {
      ((patient) behaviour.getSignalTrigger().GetData("patient")).LabPCRFluBResult = "Positive";

    }
  }
  public class Consequence_a0a0g0e_0 extends InstantBehaviourStep {
    /*package*/ Behaviour behaviour;
    public Consequence_a0a0g0e_0(Behaviour behaviour) {
      this.behaviour = behaviour;
    }

    public void execute() {
      ((patient) behaviour.getSignalTrigger().GetData("patient")).LabPCRFluBResult = "Positive";

    }
  }
  public class Consequence_a0a0g0e_1 extends InstantBehaviourStep {
    /*package*/ Behaviour behaviour;
    public Consequence_a0a0g0e_1(Behaviour behaviour) {
      this.behaviour = behaviour;
    }

    public void execute() {
      ((patient) behaviour.getSignalTrigger().GetData("patient")).LabPCRFluBResult = "Negative";

    }
  }
  public class Consequence_a0a0g0e_2 extends InstantBehaviourStep {
    /*package*/ Behaviour behaviour;
    public Consequence_a0a0g0e_2(Behaviour behaviour) {
      this.behaviour = behaviour;
    }

    public void execute() {
      ((patient) behaviour.getSignalTrigger().GetData("patient")).LabPCRFluBResult = "Negative";

    }
  }
  public class Choice_a0g0e_3 extends InstantBehaviourStep {
    /*package*/ Behaviour behaviour;
    public Choice_a0g0e_3(Behaviour behaviour) {
      this.behaviour = behaviour;
    }

    public void execute() {
      if (Dice(100)) {
        ArrayList<BehaviourStep> plstSteps = new ArrayList();
        plstSteps.add(new Consequence_a0a0g0e_3(behaviour));
        behaviour.injectSteps(plstSteps);
      } else {
        ArrayList<BehaviourStep> plstSteps = new ArrayList();
        plstSteps.add(new Consequence_a0a0g0e_5(behaviour));
        behaviour.injectSteps(plstSteps);
      }
    }
  }
  public class Choice_a0g0e_5 extends InstantBehaviourStep {
    /*package*/ Behaviour behaviour;
    public Choice_a0g0e_5(Behaviour behaviour) {
      this.behaviour = behaviour;
    }

    public void execute() {
      if (Dice(100)) {
        ArrayList<BehaviourStep> plstSteps = new ArrayList();
        plstSteps.add(new Consequence_a0a0g0e_3(behaviour));
        behaviour.injectSteps(plstSteps);
      } else {
        ArrayList<BehaviourStep> plstSteps = new ArrayList();
        plstSteps.add(new Consequence_a0a0g0e_5(behaviour));
        behaviour.injectSteps(plstSteps);
      }
    }
  }
  public class Consequence_a0a0g0e_3 extends InstantBehaviourStep {
    /*package*/ Behaviour behaviour;
    public Consequence_a0a0g0e_3(Behaviour behaviour) {
      this.behaviour = behaviour;
    }

    public void execute() {
      ((patient) behaviour.getSignalTrigger().GetData("patient")).LabPCRFluBResult = "Negative";

    }
  }
  public class Consequence_a0a0g0e_4 extends InstantBehaviourStep {
    /*package*/ Behaviour behaviour;
    public Consequence_a0a0g0e_4(Behaviour behaviour) {
      this.behaviour = behaviour;
    }

    public void execute() {
      ((patient) behaviour.getSignalTrigger().GetData("patient")).LabPCRFluBResult = "Negative";

    }
  }
  public class Consequence_a0a0g0e_5 extends InstantBehaviourStep {
    /*package*/ Behaviour behaviour;
    public Consequence_a0a0g0e_5(Behaviour behaviour) {
      this.behaviour = behaviour;
    }

    public void execute() {
      ((patient) behaviour.getSignalTrigger().GetData("patient")).LabPCRFluBResult = "Positive";

    }
  }
  public class Consequence_a0a0g0e_6 extends InstantBehaviourStep {
    /*package*/ Behaviour behaviour;
    public Consequence_a0a0g0e_6(Behaviour behaviour) {
      this.behaviour = behaviour;
    }

    public void execute() {
      ((patient) behaviour.getSignalTrigger().GetData("patient")).LabPCRFluBResult = "Positive";

    }
  }
  public class SendSignalAction_h0e_1 extends BehaviourStep {
    /*package*/ Behaviour behaviour;

    public SendSignalAction_h0e_1(Behaviour behaviour) {
      this.behaviour = behaviour;
    }

    public void execute() {
      Board b = ReadBoard();
      Signal sendSignalTemp = new Signal();
      sendSignalTemp = new TakeabedTrigger_aSignal();
      sendSignalTemp.AddData("patient", behaviour.getSignalTrigger().GetData("patient"));

      b.PushMission(sendSignalTemp);
    }
  }
  public class StayAction_i0e_1 extends BehaviourStep {
    /*package*/ Behaviour behaviour;
    /*package*/ int timeExecuted = 0;
    public StayAction_i0e_1(Behaviour behaviour) {
      this.behaviour = behaviour;
    }

    public void execute() {
      // Do nothing 
      timeExecuted++;
    }

    public boolean finishCondition() {
      return timeExecuted == 1;
    }
  }
  public class MoveAction_a0f_7 extends BehaviourStep {
    /*package*/ Behaviour behaviour;
    /*package*/ Object target;
    /*package*/ Object concreteTarget;
    public MoveAction_a0f_7(Behaviour behaviour) {
      target = RespiratoryCubicle.getInstance();
      this.behaviour = behaviour;
    }

    public void execute() {
      if (concreteTarget == null) {
        if (target instanceof RoomType) {
          concreteTarget = SelectLocation(((RoomType) target));
        } else {
          concreteTarget = target;
        }
      }

      if (target instanceof RoomType) {
        if (EvaluateRoomChoice(((Room) concreteTarget)) == 0) {
          concreteTarget = SelectLocation(((RoomType) target));
        }
      }

      MoveTowards(concreteTarget);
    }

    public boolean finishCondition() {
      return ImAt(concreteTarget);
    }
  }
  public class OrderAction_b0f extends BehaviourStep {
    /*package*/ Behaviour behaviour;
    public OrderAction_b0f(Behaviour behaviour) {
      this.behaviour = behaviour;
    }

    public void execute() {
      Actor a = (Actor) behaviour.getSignalTrigger().GetData("patient");

      a.TakeOrder(new MoveToOrder().WithDestination(CubicleNurse.this));
    }
  }
  public class StayAction_c0f_3 extends BehaviourStep {
    /*package*/ Behaviour behaviour;
    /*package*/ int timeExecuted = 0;
    public StayAction_c0f_3(Behaviour behaviour) {
      this.behaviour = behaviour;
    }

    public void execute() {
      // Do nothing 
      timeExecuted++;
    }

    public boolean finishCondition() {
      return timeExecuted == 1;
    }
  }
  public class Choice_d0f_5 extends InstantBehaviourStep {
    /*package*/ Behaviour behaviour;
    public Choice_d0f_5(Behaviour behaviour) {
      this.behaviour = behaviour;
    }

    public void execute() {
      if (((patient) behaviour.getSignalTrigger().GetData("patient")).COVIDVaccineStatus == "Unvaccinated" || ((patient) behaviour.getSignalTrigger().GetData("patient")).RecentCovidContact == "Yes") {
        ArrayList<BehaviourStep> plstSteps = new ArrayList();
        plstSteps.add(new SendSignalAction_a0d0f(behaviour));
        behaviour.injectSteps(plstSteps);
      } else {
        ArrayList<BehaviourStep> plstSteps = new ArrayList();
        behaviour.injectSteps(plstSteps);
      }
    }
  }
  public class Choice_e0f_3 extends InstantBehaviourStep {
    /*package*/ Behaviour behaviour;
    public Choice_e0f_3(Behaviour behaviour) {
      this.behaviour = behaviour;
    }

    public void execute() {
      if ((((patient) behaviour.getSignalTrigger().GetData("patient")).COVIDVaccineStatus == "partiallyvaccinated" || ((patient) behaviour.getSignalTrigger().GetData("patient")).COVIDVaccineStatus == "fullyvaccinated") && ((patient) behaviour.getSignalTrigger().GetData("patient")).RecentCovidContact == "No") {
        ArrayList<BehaviourStep> plstSteps = new ArrayList();
        plstSteps.add(new SendSignalAction_a0e0f(behaviour));
        behaviour.injectSteps(plstSteps);
      } else {
        ArrayList<BehaviourStep> plstSteps = new ArrayList();
        behaviour.injectSteps(plstSteps);
      }
    }
  }
  public class StayAction_f0f extends BehaviourStep {
    /*package*/ Behaviour behaviour;
    /*package*/ int timeExecuted = 0;
    public StayAction_f0f(Behaviour behaviour) {
      this.behaviour = behaviour;
    }

    public void execute() {
      // Do nothing 
      timeExecuted++;
    }

    public boolean finishCondition() {
      return timeExecuted == 1;
    }
  }
  public class MoveAction_a0f_9 extends BehaviourStep {
    /*package*/ Behaviour behaviour;
    /*package*/ Object target;
    /*package*/ Object concreteTarget;
    public MoveAction_a0f_9(Behaviour behaviour) {
      target = RespiratoryCubicle.getInstance();
      this.behaviour = behaviour;
    }

    public void execute() {
      if (concreteTarget == null) {
        if (target instanceof RoomType) {
          concreteTarget = SelectLocation(((RoomType) target));
        } else {
          concreteTarget = target;
        }
      }

      if (target instanceof RoomType) {
        if (EvaluateRoomChoice(((Room) concreteTarget)) == 0) {
          concreteTarget = SelectLocation(((RoomType) target));
        }
      }

      MoveTowards(concreteTarget);
    }

    public boolean finishCondition() {
      return ImAt(concreteTarget);
    }
  }
  public class OrderAction_b0f_1 extends BehaviourStep {
    /*package*/ Behaviour behaviour;
    public OrderAction_b0f_1(Behaviour behaviour) {
      this.behaviour = behaviour;
    }

    public void execute() {
      Actor a = (Actor) behaviour.getSignalTrigger().GetData("patient");

      a.TakeOrder(new MoveToOrder().WithDestination(CubicleNurse.this));
    }
  }
  public class StayAction_c0f_5 extends BehaviourStep {
    /*package*/ Behaviour behaviour;
    /*package*/ int timeExecuted = 0;
    public StayAction_c0f_5(Behaviour behaviour) {
      this.behaviour = behaviour;
    }

    public void execute() {
      // Do nothing 
      timeExecuted++;
    }

    public boolean finishCondition() {
      return timeExecuted == 1;
    }
  }
  public class Choice_d0f_7 extends InstantBehaviourStep {
    /*package*/ Behaviour behaviour;
    public Choice_d0f_7(Behaviour behaviour) {
      this.behaviour = behaviour;
    }

    public void execute() {
      if (((patient) behaviour.getSignalTrigger().GetData("patient")).COVIDVaccineStatus == "Unvaccinated" || ((patient) behaviour.getSignalTrigger().GetData("patient")).RecentCovidContact == "Yes") {
        ArrayList<BehaviourStep> plstSteps = new ArrayList();
        plstSteps.add(new SendSignalAction_a0d0f(behaviour));
        behaviour.injectSteps(plstSteps);
      } else {
        ArrayList<BehaviourStep> plstSteps = new ArrayList();
        behaviour.injectSteps(plstSteps);
      }
    }
  }
  public class SendSignalAction_a0d0f extends BehaviourStep {
    /*package*/ Behaviour behaviour;

    public SendSignalAction_a0d0f(Behaviour behaviour) {
      this.behaviour = behaviour;
    }

    public void execute() {
      Board b = ReadBoard();
      Signal sendSignalTemp = new Signal();
      sendSignalTemp = new TakeabedTrigger_a_2Signal();
      sendSignalTemp.AddData("patient", behaviour.getSignalTrigger().GetData("patient"));

      b.PushMission(sendSignalTemp);
    }
  }
  public class SendSignalAction_a0d0f_1 extends BehaviourStep {
    /*package*/ Behaviour behaviour;

    public SendSignalAction_a0d0f_1(Behaviour behaviour) {
      this.behaviour = behaviour;
    }

    public void execute() {
      Board b = ReadBoard();
      Signal sendSignalTemp = new Signal();
      sendSignalTemp = new TakeabedTrigger_a_2Signal();
      sendSignalTemp.AddData("patient", behaviour.getSignalTrigger().GetData("patient"));

      b.PushMission(sendSignalTemp);
    }
  }
  public class Choice_e0f_5 extends InstantBehaviourStep {
    /*package*/ Behaviour behaviour;
    public Choice_e0f_5(Behaviour behaviour) {
      this.behaviour = behaviour;
    }

    public void execute() {
      if ((((patient) behaviour.getSignalTrigger().GetData("patient")).COVIDVaccineStatus == "partiallyvaccinated" || ((patient) behaviour.getSignalTrigger().GetData("patient")).COVIDVaccineStatus == "fullyvaccinated") && ((patient) behaviour.getSignalTrigger().GetData("patient")).RecentCovidContact == "No") {
        ArrayList<BehaviourStep> plstSteps = new ArrayList();
        plstSteps.add(new SendSignalAction_a0e0f(behaviour));
        behaviour.injectSteps(plstSteps);
      } else {
        ArrayList<BehaviourStep> plstSteps = new ArrayList();
        behaviour.injectSteps(plstSteps);
      }
    }
  }
  public class SendSignalAction_a0e0f extends BehaviourStep {
    /*package*/ Behaviour behaviour;

    public SendSignalAction_a0e0f(Behaviour behaviour) {
      this.behaviour = behaviour;
    }

    public void execute() {
      Board b = ReadBoard();
      Signal sendSignalTemp = new Signal();
      sendSignalTemp = new TakeabedTrigger_a_1Signal();
      sendSignalTemp.AddData("patient", behaviour.getSignalTrigger().GetData("patient"));

      b.PushMission(sendSignalTemp);
    }
  }
  public class SendSignalAction_a0e0f_1 extends BehaviourStep {
    /*package*/ Behaviour behaviour;

    public SendSignalAction_a0e0f_1(Behaviour behaviour) {
      this.behaviour = behaviour;
    }

    public void execute() {
      Board b = ReadBoard();
      Signal sendSignalTemp = new Signal();
      sendSignalTemp = new TakeabedTrigger_a_1Signal();
      sendSignalTemp.AddData("patient", behaviour.getSignalTrigger().GetData("patient"));

      b.PushMission(sendSignalTemp);
    }
  }
  public class StayAction_f0f_1 extends BehaviourStep {
    /*package*/ Behaviour behaviour;
    /*package*/ int timeExecuted = 0;
    public StayAction_f0f_1(Behaviour behaviour) {
      this.behaviour = behaviour;
    }

    public void execute() {
      // Do nothing 
      timeExecuted++;
    }

    public boolean finishCondition() {
      return timeExecuted == 1;
    }
  }
  public class MoveAction_a0g_7 extends BehaviourStep {
    /*package*/ Behaviour behaviour;
    /*package*/ Object target;
    /*package*/ Object concreteTarget;
    public MoveAction_a0g_7(Behaviour behaviour) {
      target = RespiratoryCubicle.getInstance();
      this.behaviour = behaviour;
    }

    public void execute() {
      if (concreteTarget == null) {
        if (target instanceof RoomType) {
          concreteTarget = SelectLocation(((RoomType) target));
        } else {
          concreteTarget = target;
        }
      }

      if (target instanceof RoomType) {
        if (EvaluateRoomChoice(((Room) concreteTarget)) == 0) {
          concreteTarget = SelectLocation(((RoomType) target));
        }
      }

      MoveTowards(concreteTarget);
    }

    public boolean finishCondition() {
      return ImAt(concreteTarget);
    }
  }
  public class OrderAction_b0g_3 extends BehaviourStep {
    /*package*/ Behaviour behaviour;
    public OrderAction_b0g_3(Behaviour behaviour) {
      this.behaviour = behaviour;
    }

    public void execute() {
      Actor a = (Actor) behaviour.getSignalTrigger().GetData("patient");

      a.TakeOrder(new MoveToOrder().WithDestination(CubicleNurse.this));
    }
  }
  public class StayAction_c0g_3 extends BehaviourStep {
    /*package*/ Behaviour behaviour;
    /*package*/ int timeExecuted = 0;
    public StayAction_c0g_3(Behaviour behaviour) {
      this.behaviour = behaviour;
    }

    public void execute() {
      // Do nothing 
      timeExecuted++;
    }

    public boolean finishCondition() {
      return timeExecuted == 1;
    }
  }
  public class Choice_d0g_3 extends InstantBehaviourStep {
    /*package*/ Behaviour behaviour;
    public Choice_d0g_3(Behaviour behaviour) {
      this.behaviour = behaviour;
    }

    public void execute() {
      if (((patient) behaviour.getSignalTrigger().GetData("patient")).COVIDVaccineStatus == "Unvaccinated" || ((patient) behaviour.getSignalTrigger().GetData("patient")).Immunocompromised == "Yes" || ((patient) behaviour.getSignalTrigger().GetData("patient")).RecentCovidContact == "Yes") {
        ArrayList<BehaviourStep> plstSteps = new ArrayList();
        plstSteps.add(new SendSignalAction_a0d0g(behaviour));
        behaviour.injectSteps(plstSteps);
      } else {
        ArrayList<BehaviourStep> plstSteps = new ArrayList();
        behaviour.injectSteps(plstSteps);
      }
    }
  }
  public class Choice_e0g_3 extends InstantBehaviourStep {
    /*package*/ Behaviour behaviour;
    public Choice_e0g_3(Behaviour behaviour) {
      this.behaviour = behaviour;
    }

    public void execute() {
      if ((((patient) behaviour.getSignalTrigger().GetData("patient")).COVIDVaccineStatus == "partiallyvaccinated" || ((patient) behaviour.getSignalTrigger().GetData("patient")).COVIDVaccineStatus == "fullyvaccinated") && ((patient) behaviour.getSignalTrigger().GetData("patient")).Immunocompromised == "No" && ((patient) behaviour.getSignalTrigger().GetData("patient")).RecentCovidContact == "No") {
        ArrayList<BehaviourStep> plstSteps = new ArrayList();
        plstSteps.add(new SendSignalAction_a0e0g(behaviour));
        behaviour.injectSteps(plstSteps);
      } else {
        ArrayList<BehaviourStep> plstSteps = new ArrayList();
        behaviour.injectSteps(plstSteps);
      }
    }
  }
  public class StayAction_f0g extends BehaviourStep {
    /*package*/ Behaviour behaviour;
    /*package*/ int timeExecuted = 0;
    public StayAction_f0g(Behaviour behaviour) {
      this.behaviour = behaviour;
    }

    public void execute() {
      // Do nothing 
      timeExecuted++;
    }

    public boolean finishCondition() {
      return timeExecuted == 1;
    }
  }
  public class MoveAction_a0g_9 extends BehaviourStep {
    /*package*/ Behaviour behaviour;
    /*package*/ Object target;
    /*package*/ Object concreteTarget;
    public MoveAction_a0g_9(Behaviour behaviour) {
      target = RespiratoryCubicle.getInstance();
      this.behaviour = behaviour;
    }

    public void execute() {
      if (concreteTarget == null) {
        if (target instanceof RoomType) {
          concreteTarget = SelectLocation(((RoomType) target));
        } else {
          concreteTarget = target;
        }
      }

      if (target instanceof RoomType) {
        if (EvaluateRoomChoice(((Room) concreteTarget)) == 0) {
          concreteTarget = SelectLocation(((RoomType) target));
        }
      }

      MoveTowards(concreteTarget);
    }

    public boolean finishCondition() {
      return ImAt(concreteTarget);
    }
  }
  public class OrderAction_b0g_5 extends BehaviourStep {
    /*package*/ Behaviour behaviour;
    public OrderAction_b0g_5(Behaviour behaviour) {
      this.behaviour = behaviour;
    }

    public void execute() {
      Actor a = (Actor) behaviour.getSignalTrigger().GetData("patient");

      a.TakeOrder(new MoveToOrder().WithDestination(CubicleNurse.this));
    }
  }
  public class StayAction_c0g_5 extends BehaviourStep {
    /*package*/ Behaviour behaviour;
    /*package*/ int timeExecuted = 0;
    public StayAction_c0g_5(Behaviour behaviour) {
      this.behaviour = behaviour;
    }

    public void execute() {
      // Do nothing 
      timeExecuted++;
    }

    public boolean finishCondition() {
      return timeExecuted == 1;
    }
  }
  public class Choice_d0g_5 extends InstantBehaviourStep {
    /*package*/ Behaviour behaviour;
    public Choice_d0g_5(Behaviour behaviour) {
      this.behaviour = behaviour;
    }

    public void execute() {
      if (((patient) behaviour.getSignalTrigger().GetData("patient")).COVIDVaccineStatus == "Unvaccinated" || ((patient) behaviour.getSignalTrigger().GetData("patient")).Immunocompromised == "Yes" || ((patient) behaviour.getSignalTrigger().GetData("patient")).RecentCovidContact == "Yes") {
        ArrayList<BehaviourStep> plstSteps = new ArrayList();
        plstSteps.add(new SendSignalAction_a0d0g(behaviour));
        behaviour.injectSteps(plstSteps);
      } else {
        ArrayList<BehaviourStep> plstSteps = new ArrayList();
        behaviour.injectSteps(plstSteps);
      }
    }
  }
  public class SendSignalAction_a0d0g extends BehaviourStep {
    /*package*/ Behaviour behaviour;

    public SendSignalAction_a0d0g(Behaviour behaviour) {
      this.behaviour = behaviour;
    }

    public void execute() {
      Board b = ReadBoard();
      Signal sendSignalTemp = new Signal();
      sendSignalTemp = new TakeabedTrigger_a_2Signal();
      sendSignalTemp.AddData("patient", behaviour.getSignalTrigger().GetData("patient"));

      b.PushMission(sendSignalTemp);
    }
  }
  public class SendSignalAction_a0d0g_1 extends BehaviourStep {
    /*package*/ Behaviour behaviour;

    public SendSignalAction_a0d0g_1(Behaviour behaviour) {
      this.behaviour = behaviour;
    }

    public void execute() {
      Board b = ReadBoard();
      Signal sendSignalTemp = new Signal();
      sendSignalTemp = new TakeabedTrigger_a_2Signal();
      sendSignalTemp.AddData("patient", behaviour.getSignalTrigger().GetData("patient"));

      b.PushMission(sendSignalTemp);
    }
  }
  public class Choice_e0g_5 extends InstantBehaviourStep {
    /*package*/ Behaviour behaviour;
    public Choice_e0g_5(Behaviour behaviour) {
      this.behaviour = behaviour;
    }

    public void execute() {
      if ((((patient) behaviour.getSignalTrigger().GetData("patient")).COVIDVaccineStatus == "partiallyvaccinated" || ((patient) behaviour.getSignalTrigger().GetData("patient")).COVIDVaccineStatus == "fullyvaccinated") && ((patient) behaviour.getSignalTrigger().GetData("patient")).Immunocompromised == "No" && ((patient) behaviour.getSignalTrigger().GetData("patient")).RecentCovidContact == "No") {
        ArrayList<BehaviourStep> plstSteps = new ArrayList();
        plstSteps.add(new SendSignalAction_a0e0g(behaviour));
        behaviour.injectSteps(plstSteps);
      } else {
        ArrayList<BehaviourStep> plstSteps = new ArrayList();
        behaviour.injectSteps(plstSteps);
      }
    }
  }
  public class SendSignalAction_a0e0g extends BehaviourStep {
    /*package*/ Behaviour behaviour;

    public SendSignalAction_a0e0g(Behaviour behaviour) {
      this.behaviour = behaviour;
    }

    public void execute() {
      Board b = ReadBoard();
      Signal sendSignalTemp = new Signal();
      sendSignalTemp = new TakeabedTrigger_a_0Signal();
      sendSignalTemp.AddData("patient", behaviour.getSignalTrigger().GetData("patient"));

      b.PushMission(sendSignalTemp);
    }
  }
  public class SendSignalAction_a0e0g_1 extends BehaviourStep {
    /*package*/ Behaviour behaviour;

    public SendSignalAction_a0e0g_1(Behaviour behaviour) {
      this.behaviour = behaviour;
    }

    public void execute() {
      Board b = ReadBoard();
      Signal sendSignalTemp = new Signal();
      sendSignalTemp = new TakeabedTrigger_a_0Signal();
      sendSignalTemp.AddData("patient", behaviour.getSignalTrigger().GetData("patient"));

      b.PushMission(sendSignalTemp);
    }
  }
  public class StayAction_f0g_1 extends BehaviourStep {
    /*package*/ Behaviour behaviour;
    /*package*/ int timeExecuted = 0;
    public StayAction_f0g_1(Behaviour behaviour) {
      this.behaviour = behaviour;
    }

    public void execute() {
      // Do nothing 
      timeExecuted++;
    }

    public boolean finishCondition() {
      return timeExecuted == 1;
    }
  }
  public class MoveAction_a0h_3 extends BehaviourStep {
    /*package*/ Behaviour behaviour;
    /*package*/ Object target;
    /*package*/ Object concreteTarget;
    public MoveAction_a0h_3(Behaviour behaviour) {
      target = NonRespiratoryCubicle.getInstance();
      this.behaviour = behaviour;
    }

    public void execute() {
      if (concreteTarget == null) {
        if (target instanceof RoomType) {
          concreteTarget = SelectLocation(((RoomType) target));
        } else {
          concreteTarget = target;
        }
      }

      if (target instanceof RoomType) {
        if (EvaluateRoomChoice(((Room) concreteTarget)) == 0) {
          concreteTarget = SelectLocation(((RoomType) target));
        }
      }

      MoveTowards(concreteTarget);
    }

    public boolean finishCondition() {
      return ImAt(concreteTarget);
    }
  }
  public class OrderAction_b0h extends BehaviourStep {
    /*package*/ Behaviour behaviour;
    public OrderAction_b0h(Behaviour behaviour) {
      this.behaviour = behaviour;
    }

    public void execute() {
      Actor a = (Actor) behaviour.getSignalTrigger().GetData("patient");

      a.TakeOrder(new MoveToOrder().WithDestination(CubicleNurse.this));
    }
  }
  public class StayAction_c0h extends BehaviourStep {
    /*package*/ Behaviour behaviour;
    /*package*/ int timeExecuted = 0;
    public StayAction_c0h(Behaviour behaviour) {
      this.behaviour = behaviour;
    }

    public void execute() {
      // Do nothing 
      timeExecuted++;
    }

    public boolean finishCondition() {
      return timeExecuted == 1;
    }
  }
  public class Choice_d0h extends InstantBehaviourStep {
    /*package*/ Behaviour behaviour;
    public Choice_d0h(Behaviour behaviour) {
      this.behaviour = behaviour;
    }

    public void execute() {
      if (((patient) behaviour.getSignalTrigger().GetData("patient")).COVIDVaccineStatus == "Unvaccinated" || ((patient) behaviour.getSignalTrigger().GetData("patient")).Immunocompromised == "Yes" || ((patient) behaviour.getSignalTrigger().GetData("patient")).RecentCovidContact == "Yes") {
        ArrayList<BehaviourStep> plstSteps = new ArrayList();
        plstSteps.add(new SendSignalAction_a0d0h(behaviour));
        behaviour.injectSteps(plstSteps);
      } else {
        ArrayList<BehaviourStep> plstSteps = new ArrayList();
        behaviour.injectSteps(plstSteps);
      }
    }
  }
  public class Choice_e0h extends InstantBehaviourStep {
    /*package*/ Behaviour behaviour;
    public Choice_e0h(Behaviour behaviour) {
      this.behaviour = behaviour;
    }

    public void execute() {
      if ((((patient) behaviour.getSignalTrigger().GetData("patient")).COVIDVaccineStatus == "partiallyvaccinated" || ((patient) behaviour.getSignalTrigger().GetData("patient")).COVIDVaccineStatus == "fullyvaccinated") && ((patient) behaviour.getSignalTrigger().GetData("patient")).Immunocompromised == "No" && ((patient) behaviour.getSignalTrigger().GetData("patient")).RecentCovidContact == "No") {
        ArrayList<BehaviourStep> plstSteps = new ArrayList();
        plstSteps.add(new SendSignalAction_a0e0h(behaviour));
        behaviour.injectSteps(plstSteps);
      } else {
        ArrayList<BehaviourStep> plstSteps = new ArrayList();
        behaviour.injectSteps(plstSteps);
      }
    }
  }
  public class StayAction_f0h extends BehaviourStep {
    /*package*/ Behaviour behaviour;
    /*package*/ int timeExecuted = 0;
    public StayAction_f0h(Behaviour behaviour) {
      this.behaviour = behaviour;
    }

    public void execute() {
      // Do nothing 
      timeExecuted++;
    }

    public boolean finishCondition() {
      return timeExecuted == 1;
    }
  }
  public class MoveAction_a0h_5 extends BehaviourStep {
    /*package*/ Behaviour behaviour;
    /*package*/ Object target;
    /*package*/ Object concreteTarget;
    public MoveAction_a0h_5(Behaviour behaviour) {
      target = NonRespiratoryCubicle.getInstance();
      this.behaviour = behaviour;
    }

    public void execute() {
      if (concreteTarget == null) {
        if (target instanceof RoomType) {
          concreteTarget = SelectLocation(((RoomType) target));
        } else {
          concreteTarget = target;
        }
      }

      if (target instanceof RoomType) {
        if (EvaluateRoomChoice(((Room) concreteTarget)) == 0) {
          concreteTarget = SelectLocation(((RoomType) target));
        }
      }

      MoveTowards(concreteTarget);
    }

    public boolean finishCondition() {
      return ImAt(concreteTarget);
    }
  }
  public class OrderAction_b0h_1 extends BehaviourStep {
    /*package*/ Behaviour behaviour;
    public OrderAction_b0h_1(Behaviour behaviour) {
      this.behaviour = behaviour;
    }

    public void execute() {
      Actor a = (Actor) behaviour.getSignalTrigger().GetData("patient");

      a.TakeOrder(new MoveToOrder().WithDestination(CubicleNurse.this));
    }
  }
  public class StayAction_c0h_1 extends BehaviourStep {
    /*package*/ Behaviour behaviour;
    /*package*/ int timeExecuted = 0;
    public StayAction_c0h_1(Behaviour behaviour) {
      this.behaviour = behaviour;
    }

    public void execute() {
      // Do nothing 
      timeExecuted++;
    }

    public boolean finishCondition() {
      return timeExecuted == 1;
    }
  }
  public class Choice_d0h_1 extends InstantBehaviourStep {
    /*package*/ Behaviour behaviour;
    public Choice_d0h_1(Behaviour behaviour) {
      this.behaviour = behaviour;
    }

    public void execute() {
      if (((patient) behaviour.getSignalTrigger().GetData("patient")).COVIDVaccineStatus == "Unvaccinated" || ((patient) behaviour.getSignalTrigger().GetData("patient")).Immunocompromised == "Yes" || ((patient) behaviour.getSignalTrigger().GetData("patient")).RecentCovidContact == "Yes") {
        ArrayList<BehaviourStep> plstSteps = new ArrayList();
        plstSteps.add(new SendSignalAction_a0d0h(behaviour));
        behaviour.injectSteps(plstSteps);
      } else {
        ArrayList<BehaviourStep> plstSteps = new ArrayList();
        behaviour.injectSteps(plstSteps);
      }
    }
  }
  public class SendSignalAction_a0d0h extends BehaviourStep {
    /*package*/ Behaviour behaviour;

    public SendSignalAction_a0d0h(Behaviour behaviour) {
      this.behaviour = behaviour;
    }

    public void execute() {
      Board b = ReadBoard();
      Signal sendSignalTemp = new Signal();
      sendSignalTemp = new TakeabedTrigger_a_2Signal();
      sendSignalTemp.AddData("patient", behaviour.getSignalTrigger().GetData("patient"));

      b.PushMission(sendSignalTemp);
    }
  }
  public class SendSignalAction_a0d0h_1 extends BehaviourStep {
    /*package*/ Behaviour behaviour;

    public SendSignalAction_a0d0h_1(Behaviour behaviour) {
      this.behaviour = behaviour;
    }

    public void execute() {
      Board b = ReadBoard();
      Signal sendSignalTemp = new Signal();
      sendSignalTemp = new TakeabedTrigger_a_2Signal();
      sendSignalTemp.AddData("patient", behaviour.getSignalTrigger().GetData("patient"));

      b.PushMission(sendSignalTemp);
    }
  }
  public class Choice_e0h_1 extends InstantBehaviourStep {
    /*package*/ Behaviour behaviour;
    public Choice_e0h_1(Behaviour behaviour) {
      this.behaviour = behaviour;
    }

    public void execute() {
      if ((((patient) behaviour.getSignalTrigger().GetData("patient")).COVIDVaccineStatus == "partiallyvaccinated" || ((patient) behaviour.getSignalTrigger().GetData("patient")).COVIDVaccineStatus == "fullyvaccinated") && ((patient) behaviour.getSignalTrigger().GetData("patient")).Immunocompromised == "No" && ((patient) behaviour.getSignalTrigger().GetData("patient")).RecentCovidContact == "No") {
        ArrayList<BehaviourStep> plstSteps = new ArrayList();
        plstSteps.add(new SendSignalAction_a0e0h(behaviour));
        behaviour.injectSteps(plstSteps);
      } else {
        ArrayList<BehaviourStep> plstSteps = new ArrayList();
        behaviour.injectSteps(plstSteps);
      }
    }
  }
  public class SendSignalAction_a0e0h extends BehaviourStep {
    /*package*/ Behaviour behaviour;

    public SendSignalAction_a0e0h(Behaviour behaviour) {
      this.behaviour = behaviour;
    }

    public void execute() {
      Board b = ReadBoard();
      Signal sendSignalTemp = new Signal();
      sendSignalTemp = new TakeabedTrigger_a_0Signal();
      sendSignalTemp.AddData("patient", behaviour.getSignalTrigger().GetData("patient"));

      b.PushMission(sendSignalTemp);
    }
  }
  public class SendSignalAction_a0e0h_1 extends BehaviourStep {
    /*package*/ Behaviour behaviour;

    public SendSignalAction_a0e0h_1(Behaviour behaviour) {
      this.behaviour = behaviour;
    }

    public void execute() {
      Board b = ReadBoard();
      Signal sendSignalTemp = new Signal();
      sendSignalTemp = new TakeabedTrigger_a_0Signal();
      sendSignalTemp.AddData("patient", behaviour.getSignalTrigger().GetData("patient"));

      b.PushMission(sendSignalTemp);
    }
  }
  public class StayAction_f0h_1 extends BehaviourStep {
    /*package*/ Behaviour behaviour;
    /*package*/ int timeExecuted = 0;
    public StayAction_f0h_1(Behaviour behaviour) {
      this.behaviour = behaviour;
    }

    public void execute() {
      // Do nothing 
      timeExecuted++;
    }

    public boolean finishCondition() {
      return timeExecuted == 1;
    }
  }
  public class StayAction_a0i extends PassiveBehaviourStep {
    /*package*/ Behaviour behaviour;
    /*package*/ int testingTime = LabPCR.getInstance().getProcessingTime();
    /*package*/ int timeExecuted = 0;
    public StayAction_a0i(Behaviour behaviour) {
      this.behaviour = behaviour;
    }

    public void execute() {
      // Do nothing 
      timeExecuted++;
    }

    public boolean finishCondition() {
      return timeExecuted == testingTime;
    }
  }
  public class Choice_b0i extends InstantBehaviourStep {
    /*package*/ Behaviour behaviour;
    public Choice_b0i(Behaviour behaviour) {
      this.behaviour = behaviour;
    }

    public void execute() {
      if ((((patient) behaviour.getSignalTrigger().GetData("patient")).COVIDInfectionStatus == "Symptomatic") || (((patient) behaviour.getSignalTrigger().GetData("patient")).COVIDInfectionStatus == "Asymptomatic")) {
        ArrayList<BehaviourStep> plstSteps = new ArrayList();
        plstSteps.add(new Choice_a0b0i(behaviour));
        behaviour.injectSteps(plstSteps);
      } else {
        ArrayList<BehaviourStep> plstSteps = new ArrayList();
        plstSteps.add(new Choice_a0b0i_3(behaviour));
        behaviour.injectSteps(plstSteps);
      }
    }
  }
  public class Choice_c0i extends InstantBehaviourStep {
    /*package*/ Behaviour behaviour;
    public Choice_c0i(Behaviour behaviour) {
      this.behaviour = behaviour;
    }

    public void execute() {
      if ((((patient) behaviour.getSignalTrigger().GetData("patient")).FluAInfectionStatus == "Symptomatic") || (((patient) behaviour.getSignalTrigger().GetData("patient")).FluAInfectionStatus == "Asymptomatic")) {
        ArrayList<BehaviourStep> plstSteps = new ArrayList();
        plstSteps.add(new Choice_a0c0i(behaviour));
        behaviour.injectSteps(plstSteps);
      } else {
        ArrayList<BehaviourStep> plstSteps = new ArrayList();
        plstSteps.add(new Choice_a0c0i_3(behaviour));
        behaviour.injectSteps(plstSteps);
      }
    }
  }
  public class Choice_d0i extends InstantBehaviourStep {
    /*package*/ Behaviour behaviour;
    public Choice_d0i(Behaviour behaviour) {
      this.behaviour = behaviour;
    }

    public void execute() {
      if ((((patient) behaviour.getSignalTrigger().GetData("patient")).FluBInfectionStatus == "Symptomatic") || (((patient) behaviour.getSignalTrigger().GetData("patient")).FluBInfectionStatus == "Asymptomatic")) {
        ArrayList<BehaviourStep> plstSteps = new ArrayList();
        plstSteps.add(new Choice_a0d0i(behaviour));
        behaviour.injectSteps(plstSteps);
      } else {
        ArrayList<BehaviourStep> plstSteps = new ArrayList();
        plstSteps.add(new Choice_a0d0i_3(behaviour));
        behaviour.injectSteps(plstSteps);
      }
    }
  }
  public class Choice_e0i extends InstantBehaviourStep {
    /*package*/ Behaviour behaviour;
    public Choice_e0i(Behaviour behaviour) {
      this.behaviour = behaviour;
    }

    public void execute() {
      if (((patient) behaviour.getSignalTrigger().GetData("patient")).LabPCRCOVIDResult == "Negative") {
        ArrayList<BehaviourStep> plstSteps = new ArrayList();
        plstSteps.add(new SendSignalAction_a0e0i(behaviour));
        behaviour.injectSteps(plstSteps);
      } else {
        ArrayList<BehaviourStep> plstSteps = new ArrayList();
        behaviour.injectSteps(plstSteps);
      }
    }
  }
  public class Choice_f0i extends InstantBehaviourStep {
    /*package*/ Behaviour behaviour;
    public Choice_f0i(Behaviour behaviour) {
      this.behaviour = behaviour;
    }

    public void execute() {
      if (((patient) behaviour.getSignalTrigger().GetData("patient")).LabPCRCOVIDResult == "Positive") {
        ArrayList<BehaviourStep> plstSteps = new ArrayList();
        plstSteps.add(new SendSignalAction_a0f0i(behaviour));
        behaviour.injectSteps(plstSteps);
      } else {
        ArrayList<BehaviourStep> plstSteps = new ArrayList();
        behaviour.injectSteps(plstSteps);
      }
    }
  }
  public class StayAction_g0i extends BehaviourStep {
    /*package*/ Behaviour behaviour;
    /*package*/ int timeExecuted = 0;
    public StayAction_g0i(Behaviour behaviour) {
      this.behaviour = behaviour;
    }

    public void execute() {
      // Do nothing 
      timeExecuted++;
    }

    public boolean finishCondition() {
      return timeExecuted == 1;
    }
  }
  public class StayAction_a0i_1 extends PassiveBehaviourStep {
    /*package*/ Behaviour behaviour;
    /*package*/ int testingTime = LabPCR.getInstance().getProcessingTime();
    /*package*/ int timeExecuted = 0;
    public StayAction_a0i_1(Behaviour behaviour) {
      this.behaviour = behaviour;
    }

    public void execute() {
      // Do nothing 
      timeExecuted++;
    }

    public boolean finishCondition() {
      return timeExecuted == testingTime;
    }
  }
  public class Choice_b0i_1 extends InstantBehaviourStep {
    /*package*/ Behaviour behaviour;
    public Choice_b0i_1(Behaviour behaviour) {
      this.behaviour = behaviour;
    }

    public void execute() {
      if ((((patient) behaviour.getSignalTrigger().GetData("patient")).COVIDInfectionStatus == "Symptomatic") || (((patient) behaviour.getSignalTrigger().GetData("patient")).COVIDInfectionStatus == "Asymptomatic")) {
        ArrayList<BehaviourStep> plstSteps = new ArrayList();
        plstSteps.add(new Choice_a0b0i(behaviour));
        behaviour.injectSteps(plstSteps);
      } else {
        ArrayList<BehaviourStep> plstSteps = new ArrayList();
        plstSteps.add(new Choice_a0b0i_3(behaviour));
        behaviour.injectSteps(plstSteps);
      }
    }
  }
  public class Choice_a0b0i extends InstantBehaviourStep {
    /*package*/ Behaviour behaviour;
    public Choice_a0b0i(Behaviour behaviour) {
      this.behaviour = behaviour;
    }

    public void execute() {
      if (Dice(100)) {
        ArrayList<BehaviourStep> plstSteps = new ArrayList();
        plstSteps.add(new Consequence_a0a0b0i(behaviour));
        behaviour.injectSteps(plstSteps);
      } else {
        ArrayList<BehaviourStep> plstSteps = new ArrayList();
        plstSteps.add(new Consequence_a0a0b0i_1(behaviour));
        behaviour.injectSteps(plstSteps);
      }
    }
  }
  public class Choice_a0b0i_1 extends InstantBehaviourStep {
    /*package*/ Behaviour behaviour;
    public Choice_a0b0i_1(Behaviour behaviour) {
      this.behaviour = behaviour;
    }

    public void execute() {
      if (Dice(100)) {
        ArrayList<BehaviourStep> plstSteps = new ArrayList();
        plstSteps.add(new Consequence_a0a0b0i(behaviour));
        behaviour.injectSteps(plstSteps);
      } else {
        ArrayList<BehaviourStep> plstSteps = new ArrayList();
        plstSteps.add(new Consequence_a0a0b0i_1(behaviour));
        behaviour.injectSteps(plstSteps);
      }
    }
  }
  public class Consequence_a0a0b0i extends InstantBehaviourStep {
    /*package*/ Behaviour behaviour;
    public Consequence_a0a0b0i(Behaviour behaviour) {
      this.behaviour = behaviour;
    }

    public void execute() {
      ((patient) behaviour.getSignalTrigger().GetData("patient")).LabPCRCOVIDResult = "Positive";

    }
  }
  public class Consequence_a0a0b0i_0 extends InstantBehaviourStep {
    /*package*/ Behaviour behaviour;
    public Consequence_a0a0b0i_0(Behaviour behaviour) {
      this.behaviour = behaviour;
    }

    public void execute() {
      ((patient) behaviour.getSignalTrigger().GetData("patient")).LabPCRCOVIDResult = "Positive";

    }
  }
  public class Consequence_a0a0b0i_1 extends InstantBehaviourStep {
    /*package*/ Behaviour behaviour;
    public Consequence_a0a0b0i_1(Behaviour behaviour) {
      this.behaviour = behaviour;
    }

    public void execute() {
      ((patient) behaviour.getSignalTrigger().GetData("patient")).LabPCRCOVIDResult = "Negative";

    }
  }
  public class Consequence_a0a0b0i_2 extends InstantBehaviourStep {
    /*package*/ Behaviour behaviour;
    public Consequence_a0a0b0i_2(Behaviour behaviour) {
      this.behaviour = behaviour;
    }

    public void execute() {
      ((patient) behaviour.getSignalTrigger().GetData("patient")).LabPCRCOVIDResult = "Negative";

    }
  }
  public class Choice_a0b0i_3 extends InstantBehaviourStep {
    /*package*/ Behaviour behaviour;
    public Choice_a0b0i_3(Behaviour behaviour) {
      this.behaviour = behaviour;
    }

    public void execute() {
      if (Dice(100)) {
        ArrayList<BehaviourStep> plstSteps = new ArrayList();
        plstSteps.add(new Consequence_a0a0b0i_3(behaviour));
        behaviour.injectSteps(plstSteps);
      } else {
        ArrayList<BehaviourStep> plstSteps = new ArrayList();
        plstSteps.add(new Consequence_a0a0b0i_5(behaviour));
        behaviour.injectSteps(plstSteps);
      }
    }
  }
  public class Choice_a0b0i_5 extends InstantBehaviourStep {
    /*package*/ Behaviour behaviour;
    public Choice_a0b0i_5(Behaviour behaviour) {
      this.behaviour = behaviour;
    }

    public void execute() {
      if (Dice(100)) {
        ArrayList<BehaviourStep> plstSteps = new ArrayList();
        plstSteps.add(new Consequence_a0a0b0i_3(behaviour));
        behaviour.injectSteps(plstSteps);
      } else {
        ArrayList<BehaviourStep> plstSteps = new ArrayList();
        plstSteps.add(new Consequence_a0a0b0i_5(behaviour));
        behaviour.injectSteps(plstSteps);
      }
    }
  }
  public class Consequence_a0a0b0i_3 extends InstantBehaviourStep {
    /*package*/ Behaviour behaviour;
    public Consequence_a0a0b0i_3(Behaviour behaviour) {
      this.behaviour = behaviour;
    }

    public void execute() {
      ((patient) behaviour.getSignalTrigger().GetData("patient")).LabPCRCOVIDResult = "Negative";

    }
  }
  public class Consequence_a0a0b0i_4 extends InstantBehaviourStep {
    /*package*/ Behaviour behaviour;
    public Consequence_a0a0b0i_4(Behaviour behaviour) {
      this.behaviour = behaviour;
    }

    public void execute() {
      ((patient) behaviour.getSignalTrigger().GetData("patient")).LabPCRCOVIDResult = "Negative";

    }
  }
  public class Consequence_a0a0b0i_5 extends InstantBehaviourStep {
    /*package*/ Behaviour behaviour;
    public Consequence_a0a0b0i_5(Behaviour behaviour) {
      this.behaviour = behaviour;
    }

    public void execute() {
      ((patient) behaviour.getSignalTrigger().GetData("patient")).LabPCRCOVIDResult = "Positive";

    }
  }
  public class Consequence_a0a0b0i_6 extends InstantBehaviourStep {
    /*package*/ Behaviour behaviour;
    public Consequence_a0a0b0i_6(Behaviour behaviour) {
      this.behaviour = behaviour;
    }

    public void execute() {
      ((patient) behaviour.getSignalTrigger().GetData("patient")).LabPCRCOVIDResult = "Positive";

    }
  }
  public class Choice_c0i_1 extends InstantBehaviourStep {
    /*package*/ Behaviour behaviour;
    public Choice_c0i_1(Behaviour behaviour) {
      this.behaviour = behaviour;
    }

    public void execute() {
      if ((((patient) behaviour.getSignalTrigger().GetData("patient")).FluAInfectionStatus == "Symptomatic") || (((patient) behaviour.getSignalTrigger().GetData("patient")).FluAInfectionStatus == "Asymptomatic")) {
        ArrayList<BehaviourStep> plstSteps = new ArrayList();
        plstSteps.add(new Choice_a0c0i(behaviour));
        behaviour.injectSteps(plstSteps);
      } else {
        ArrayList<BehaviourStep> plstSteps = new ArrayList();
        plstSteps.add(new Choice_a0c0i_3(behaviour));
        behaviour.injectSteps(plstSteps);
      }
    }
  }
  public class Choice_a0c0i extends InstantBehaviourStep {
    /*package*/ Behaviour behaviour;
    public Choice_a0c0i(Behaviour behaviour) {
      this.behaviour = behaviour;
    }

    public void execute() {
      if (Dice(100)) {
        ArrayList<BehaviourStep> plstSteps = new ArrayList();
        plstSteps.add(new Consequence_a0a0c0i(behaviour));
        behaviour.injectSteps(plstSteps);
      } else {
        ArrayList<BehaviourStep> plstSteps = new ArrayList();
        plstSteps.add(new Consequence_a0a0c0i_1(behaviour));
        behaviour.injectSteps(plstSteps);
      }
    }
  }
  public class Choice_a0c0i_1 extends InstantBehaviourStep {
    /*package*/ Behaviour behaviour;
    public Choice_a0c0i_1(Behaviour behaviour) {
      this.behaviour = behaviour;
    }

    public void execute() {
      if (Dice(100)) {
        ArrayList<BehaviourStep> plstSteps = new ArrayList();
        plstSteps.add(new Consequence_a0a0c0i(behaviour));
        behaviour.injectSteps(plstSteps);
      } else {
        ArrayList<BehaviourStep> plstSteps = new ArrayList();
        plstSteps.add(new Consequence_a0a0c0i_1(behaviour));
        behaviour.injectSteps(plstSteps);
      }
    }
  }
  public class Consequence_a0a0c0i extends InstantBehaviourStep {
    /*package*/ Behaviour behaviour;
    public Consequence_a0a0c0i(Behaviour behaviour) {
      this.behaviour = behaviour;
    }

    public void execute() {
      ((patient) behaviour.getSignalTrigger().GetData("patient")).LabPCRFluAResult = "Positive";

    }
  }
  public class Consequence_a0a0c0i_0 extends InstantBehaviourStep {
    /*package*/ Behaviour behaviour;
    public Consequence_a0a0c0i_0(Behaviour behaviour) {
      this.behaviour = behaviour;
    }

    public void execute() {
      ((patient) behaviour.getSignalTrigger().GetData("patient")).LabPCRFluAResult = "Positive";

    }
  }
  public class Consequence_a0a0c0i_1 extends InstantBehaviourStep {
    /*package*/ Behaviour behaviour;
    public Consequence_a0a0c0i_1(Behaviour behaviour) {
      this.behaviour = behaviour;
    }

    public void execute() {
      ((patient) behaviour.getSignalTrigger().GetData("patient")).LabPCRFluAResult = "Negative";

    }
  }
  public class Consequence_a0a0c0i_2 extends InstantBehaviourStep {
    /*package*/ Behaviour behaviour;
    public Consequence_a0a0c0i_2(Behaviour behaviour) {
      this.behaviour = behaviour;
    }

    public void execute() {
      ((patient) behaviour.getSignalTrigger().GetData("patient")).LabPCRFluAResult = "Negative";

    }
  }
  public class Choice_a0c0i_3 extends InstantBehaviourStep {
    /*package*/ Behaviour behaviour;
    public Choice_a0c0i_3(Behaviour behaviour) {
      this.behaviour = behaviour;
    }

    public void execute() {
      if (Dice(100)) {
        ArrayList<BehaviourStep> plstSteps = new ArrayList();
        plstSteps.add(new Consequence_a0a0c0i_3(behaviour));
        behaviour.injectSteps(plstSteps);
      } else {
        ArrayList<BehaviourStep> plstSteps = new ArrayList();
        plstSteps.add(new Consequence_a0a0c0i_5(behaviour));
        behaviour.injectSteps(plstSteps);
      }
    }
  }
  public class Choice_a0c0i_5 extends InstantBehaviourStep {
    /*package*/ Behaviour behaviour;
    public Choice_a0c0i_5(Behaviour behaviour) {
      this.behaviour = behaviour;
    }

    public void execute() {
      if (Dice(100)) {
        ArrayList<BehaviourStep> plstSteps = new ArrayList();
        plstSteps.add(new Consequence_a0a0c0i_3(behaviour));
        behaviour.injectSteps(plstSteps);
      } else {
        ArrayList<BehaviourStep> plstSteps = new ArrayList();
        plstSteps.add(new Consequence_a0a0c0i_5(behaviour));
        behaviour.injectSteps(plstSteps);
      }
    }
  }
  public class Consequence_a0a0c0i_3 extends InstantBehaviourStep {
    /*package*/ Behaviour behaviour;
    public Consequence_a0a0c0i_3(Behaviour behaviour) {
      this.behaviour = behaviour;
    }

    public void execute() {
      ((patient) behaviour.getSignalTrigger().GetData("patient")).LabPCRFluAResult = "Negative";

    }
  }
  public class Consequence_a0a0c0i_4 extends InstantBehaviourStep {
    /*package*/ Behaviour behaviour;
    public Consequence_a0a0c0i_4(Behaviour behaviour) {
      this.behaviour = behaviour;
    }

    public void execute() {
      ((patient) behaviour.getSignalTrigger().GetData("patient")).LabPCRFluAResult = "Negative";

    }
  }
  public class Consequence_a0a0c0i_5 extends InstantBehaviourStep {
    /*package*/ Behaviour behaviour;
    public Consequence_a0a0c0i_5(Behaviour behaviour) {
      this.behaviour = behaviour;
    }

    public void execute() {
      ((patient) behaviour.getSignalTrigger().GetData("patient")).LabPCRFluAResult = "Positive";

    }
  }
  public class Consequence_a0a0c0i_6 extends InstantBehaviourStep {
    /*package*/ Behaviour behaviour;
    public Consequence_a0a0c0i_6(Behaviour behaviour) {
      this.behaviour = behaviour;
    }

    public void execute() {
      ((patient) behaviour.getSignalTrigger().GetData("patient")).LabPCRFluAResult = "Positive";

    }
  }
  public class Choice_d0i_1 extends InstantBehaviourStep {
    /*package*/ Behaviour behaviour;
    public Choice_d0i_1(Behaviour behaviour) {
      this.behaviour = behaviour;
    }

    public void execute() {
      if ((((patient) behaviour.getSignalTrigger().GetData("patient")).FluBInfectionStatus == "Symptomatic") || (((patient) behaviour.getSignalTrigger().GetData("patient")).FluBInfectionStatus == "Asymptomatic")) {
        ArrayList<BehaviourStep> plstSteps = new ArrayList();
        plstSteps.add(new Choice_a0d0i(behaviour));
        behaviour.injectSteps(plstSteps);
      } else {
        ArrayList<BehaviourStep> plstSteps = new ArrayList();
        plstSteps.add(new Choice_a0d0i_3(behaviour));
        behaviour.injectSteps(plstSteps);
      }
    }
  }
  public class Choice_a0d0i extends InstantBehaviourStep {
    /*package*/ Behaviour behaviour;
    public Choice_a0d0i(Behaviour behaviour) {
      this.behaviour = behaviour;
    }

    public void execute() {
      if (Dice(100)) {
        ArrayList<BehaviourStep> plstSteps = new ArrayList();
        plstSteps.add(new Consequence_a0a0d0i(behaviour));
        behaviour.injectSteps(plstSteps);
      } else {
        ArrayList<BehaviourStep> plstSteps = new ArrayList();
        plstSteps.add(new Consequence_a0a0d0i_1(behaviour));
        behaviour.injectSteps(plstSteps);
      }
    }
  }
  public class Choice_a0d0i_1 extends InstantBehaviourStep {
    /*package*/ Behaviour behaviour;
    public Choice_a0d0i_1(Behaviour behaviour) {
      this.behaviour = behaviour;
    }

    public void execute() {
      if (Dice(100)) {
        ArrayList<BehaviourStep> plstSteps = new ArrayList();
        plstSteps.add(new Consequence_a0a0d0i(behaviour));
        behaviour.injectSteps(plstSteps);
      } else {
        ArrayList<BehaviourStep> plstSteps = new ArrayList();
        plstSteps.add(new Consequence_a0a0d0i_1(behaviour));
        behaviour.injectSteps(plstSteps);
      }
    }
  }
  public class Consequence_a0a0d0i extends InstantBehaviourStep {
    /*package*/ Behaviour behaviour;
    public Consequence_a0a0d0i(Behaviour behaviour) {
      this.behaviour = behaviour;
    }

    public void execute() {
      ((patient) behaviour.getSignalTrigger().GetData("patient")).LabPCRFluBResult = "Positive";

    }
  }
  public class Consequence_a0a0d0i_0 extends InstantBehaviourStep {
    /*package*/ Behaviour behaviour;
    public Consequence_a0a0d0i_0(Behaviour behaviour) {
      this.behaviour = behaviour;
    }

    public void execute() {
      ((patient) behaviour.getSignalTrigger().GetData("patient")).LabPCRFluBResult = "Positive";

    }
  }
  public class Consequence_a0a0d0i_1 extends InstantBehaviourStep {
    /*package*/ Behaviour behaviour;
    public Consequence_a0a0d0i_1(Behaviour behaviour) {
      this.behaviour = behaviour;
    }

    public void execute() {
      ((patient) behaviour.getSignalTrigger().GetData("patient")).LabPCRFluBResult = "Negative";

    }
  }
  public class Consequence_a0a0d0i_2 extends InstantBehaviourStep {
    /*package*/ Behaviour behaviour;
    public Consequence_a0a0d0i_2(Behaviour behaviour) {
      this.behaviour = behaviour;
    }

    public void execute() {
      ((patient) behaviour.getSignalTrigger().GetData("patient")).LabPCRFluBResult = "Negative";

    }
  }
  public class Choice_a0d0i_3 extends InstantBehaviourStep {
    /*package*/ Behaviour behaviour;
    public Choice_a0d0i_3(Behaviour behaviour) {
      this.behaviour = behaviour;
    }

    public void execute() {
      if (Dice(100)) {
        ArrayList<BehaviourStep> plstSteps = new ArrayList();
        plstSteps.add(new Consequence_a0a0d0i_3(behaviour));
        behaviour.injectSteps(plstSteps);
      } else {
        ArrayList<BehaviourStep> plstSteps = new ArrayList();
        plstSteps.add(new Consequence_a0a0d0i_5(behaviour));
        behaviour.injectSteps(plstSteps);
      }
    }
  }
  public class Choice_a0d0i_5 extends InstantBehaviourStep {
    /*package*/ Behaviour behaviour;
    public Choice_a0d0i_5(Behaviour behaviour) {
      this.behaviour = behaviour;
    }

    public void execute() {
      if (Dice(100)) {
        ArrayList<BehaviourStep> plstSteps = new ArrayList();
        plstSteps.add(new Consequence_a0a0d0i_3(behaviour));
        behaviour.injectSteps(plstSteps);
      } else {
        ArrayList<BehaviourStep> plstSteps = new ArrayList();
        plstSteps.add(new Consequence_a0a0d0i_5(behaviour));
        behaviour.injectSteps(plstSteps);
      }
    }
  }
  public class Consequence_a0a0d0i_3 extends InstantBehaviourStep {
    /*package*/ Behaviour behaviour;
    public Consequence_a0a0d0i_3(Behaviour behaviour) {
      this.behaviour = behaviour;
    }

    public void execute() {
      ((patient) behaviour.getSignalTrigger().GetData("patient")).LabPCRFluBResult = "Negative";

    }
  }
  public class Consequence_a0a0d0i_4 extends InstantBehaviourStep {
    /*package*/ Behaviour behaviour;
    public Consequence_a0a0d0i_4(Behaviour behaviour) {
      this.behaviour = behaviour;
    }

    public void execute() {
      ((patient) behaviour.getSignalTrigger().GetData("patient")).LabPCRFluBResult = "Negative";

    }
  }
  public class Consequence_a0a0d0i_5 extends InstantBehaviourStep {
    /*package*/ Behaviour behaviour;
    public Consequence_a0a0d0i_5(Behaviour behaviour) {
      this.behaviour = behaviour;
    }

    public void execute() {
      ((patient) behaviour.getSignalTrigger().GetData("patient")).LabPCRFluBResult = "Positive";

    }
  }
  public class Consequence_a0a0d0i_6 extends InstantBehaviourStep {
    /*package*/ Behaviour behaviour;
    public Consequence_a0a0d0i_6(Behaviour behaviour) {
      this.behaviour = behaviour;
    }

    public void execute() {
      ((patient) behaviour.getSignalTrigger().GetData("patient")).LabPCRFluBResult = "Positive";

    }
  }
  public class Choice_e0i_1 extends InstantBehaviourStep {
    /*package*/ Behaviour behaviour;
    public Choice_e0i_1(Behaviour behaviour) {
      this.behaviour = behaviour;
    }

    public void execute() {
      if (((patient) behaviour.getSignalTrigger().GetData("patient")).LabPCRCOVIDResult == "Negative") {
        ArrayList<BehaviourStep> plstSteps = new ArrayList();
        plstSteps.add(new SendSignalAction_a0e0i(behaviour));
        behaviour.injectSteps(plstSteps);
      } else {
        ArrayList<BehaviourStep> plstSteps = new ArrayList();
        behaviour.injectSteps(plstSteps);
      }
    }
  }
  public class SendSignalAction_a0e0i extends BehaviourStep {
    /*package*/ Behaviour behaviour;

    public SendSignalAction_a0e0i(Behaviour behaviour) {
      this.behaviour = behaviour;
    }

    public void execute() {
      Board b = ReadBoard();
      Signal sendSignalTemp = new Signal();
      sendSignalTemp = new SignificantCOVIDContactTrigger_hSignal();
      sendSignalTemp.AddData("patient", behaviour.getSignalTrigger().GetData("patient"));

      b.PushMission(sendSignalTemp);
    }
  }
  public class SendSignalAction_a0e0i_1 extends BehaviourStep {
    /*package*/ Behaviour behaviour;

    public SendSignalAction_a0e0i_1(Behaviour behaviour) {
      this.behaviour = behaviour;
    }

    public void execute() {
      Board b = ReadBoard();
      Signal sendSignalTemp = new Signal();
      sendSignalTemp = new SignificantCOVIDContactTrigger_hSignal();
      sendSignalTemp.AddData("patient", behaviour.getSignalTrigger().GetData("patient"));

      b.PushMission(sendSignalTemp);
    }
  }
  public class Choice_f0i_1 extends InstantBehaviourStep {
    /*package*/ Behaviour behaviour;
    public Choice_f0i_1(Behaviour behaviour) {
      this.behaviour = behaviour;
    }

    public void execute() {
      if (((patient) behaviour.getSignalTrigger().GetData("patient")).LabPCRCOVIDResult == "Positive") {
        ArrayList<BehaviourStep> plstSteps = new ArrayList();
        plstSteps.add(new SendSignalAction_a0f0i(behaviour));
        behaviour.injectSteps(plstSteps);
      } else {
        ArrayList<BehaviourStep> plstSteps = new ArrayList();
        behaviour.injectSteps(plstSteps);
      }
    }
  }
  public class SendSignalAction_a0f0i extends BehaviourStep {
    /*package*/ Behaviour behaviour;

    public SendSignalAction_a0f0i(Behaviour behaviour) {
      this.behaviour = behaviour;
    }

    public void execute() {
      Board b = ReadBoard();
      Signal sendSignalTemp = new Signal();
      sendSignalTemp = new TakeabedTrigger_a_2Signal();
      sendSignalTemp.AddData("patient", behaviour.getSignalTrigger().GetData("patient"));

      b.PushMission(sendSignalTemp);
    }
  }
  public class SendSignalAction_a0f0i_1 extends BehaviourStep {
    /*package*/ Behaviour behaviour;

    public SendSignalAction_a0f0i_1(Behaviour behaviour) {
      this.behaviour = behaviour;
    }

    public void execute() {
      Board b = ReadBoard();
      Signal sendSignalTemp = new Signal();
      sendSignalTemp = new TakeabedTrigger_a_2Signal();
      sendSignalTemp.AddData("patient", behaviour.getSignalTrigger().GetData("patient"));

      b.PushMission(sendSignalTemp);
    }
  }
  public class StayAction_g0i_1 extends BehaviourStep {
    /*package*/ Behaviour behaviour;
    /*package*/ int timeExecuted = 0;
    public StayAction_g0i_1(Behaviour behaviour) {
      this.behaviour = behaviour;
    }

    public void execute() {
      // Do nothing 
      timeExecuted++;
    }

    public boolean finishCondition() {
      return timeExecuted == 1;
    }
  }


  public void InitRespiratorysymptomspresent_b(Signal s) {
    behaviourBuilder.setSignalTrigger(s);
    ArrayList<BehaviourStep> plstSteps = new ArrayList();
    plstSteps.add(new MoveAction_a0a_1(behaviourBuilder));
    plstSteps.add(new OrderAction_b0a_1(behaviourBuilder));
    plstSteps.add(new StayAction_c0a_2(behaviourBuilder));
    plstSteps.add(new SendSignalAction_d0a(behaviourBuilder));
    plstSteps.add(new StayAction_e0a(behaviourBuilder));
    behaviourBuilder.setSteps(plstSteps);

    Signal sendSignalTemp = new Signal();

  }
  public void InitRespiratorysymptomsabsent_c(Signal s) {
    behaviourBuilder.setSignalTrigger(s);
    ArrayList<BehaviourStep> plstSteps = new ArrayList();
    plstSteps.add(new MoveAction_a0b_0(behaviourBuilder));
    plstSteps.add(new OrderAction_b0b_1(behaviourBuilder));
    plstSteps.add(new StayAction_c0b_0(behaviourBuilder));
    plstSteps.add(new SendSignalAction_d0b(behaviourBuilder));
    plstSteps.add(new StayAction_e0b(behaviourBuilder));
    behaviourBuilder.setSteps(plstSteps);

    Signal sendSignalTemp = new Signal();

  }
  public void InitCOVIDandFluLFD_d(Signal s) {
    behaviourBuilder.setSignalTrigger(s);
    ArrayList<BehaviourStep> plstSteps = new ArrayList();
    plstSteps.add(new MoveAction_a0c(behaviourBuilder));
    plstSteps.add(new OrderAction_b0c(behaviourBuilder));
    plstSteps.add(new StayAction_c0c(behaviourBuilder));
    plstSteps.add(new StayAction_d0c(behaviourBuilder));
    plstSteps.add(new Choice_e0c(behaviourBuilder));
    plstSteps.add(new Choice_f0c(behaviourBuilder));
    plstSteps.add(new Choice_g0c(behaviourBuilder));
    plstSteps.add(new Choice_h0c(behaviourBuilder));
    plstSteps.add(new Choice_i0c(behaviourBuilder));
    plstSteps.add(new Choice_j0c(behaviourBuilder));
    plstSteps.add(new Choice_k0c(behaviourBuilder));
    plstSteps.add(new StayAction_l0c(behaviourBuilder));
    behaviourBuilder.setSteps(plstSteps);

    Signal sendSignalTemp = new Signal();

  }
  public void InitCOVIDLFD_e(Signal s) {
    behaviourBuilder.setSignalTrigger(s);
    ArrayList<BehaviourStep> plstSteps = new ArrayList();
    plstSteps.add(new MoveAction_a0d_7(behaviourBuilder));
    plstSteps.add(new OrderAction_b0d(behaviourBuilder));
    plstSteps.add(new StayAction_c0d_3(behaviourBuilder));
    plstSteps.add(new StayAction_d0d_3(behaviourBuilder));
    plstSteps.add(new Choice_e0d(behaviourBuilder));
    plstSteps.add(new Choice_f0d(behaviourBuilder));
    plstSteps.add(new Choice_g0d(behaviourBuilder));
    plstSteps.add(new Choice_h0d(behaviourBuilder));
    plstSteps.add(new Choice_i0d(behaviourBuilder));
    plstSteps.add(new StayAction_j0d(behaviourBuilder));
    behaviourBuilder.setSteps(plstSteps);

    Signal sendSignalTemp = new Signal();

  }
  public void InitDoConfirmatoryPCR_f(Signal s) {
    behaviourBuilder.setSignalTrigger(s);
    ArrayList<BehaviourStep> plstSteps = new ArrayList();
    plstSteps.add(new MoveAction_a0e_7(behaviourBuilder));
    plstSteps.add(new OrderAction_b0e_3(behaviourBuilder));
    plstSteps.add(new StayAction_c0e_7(behaviourBuilder));
    plstSteps.add(new StayAction_d0e(behaviourBuilder));
    plstSteps.add(new Choice_e0e_3(behaviourBuilder));
    plstSteps.add(new Choice_f0e_3(behaviourBuilder));
    plstSteps.add(new Choice_g0e(behaviourBuilder));
    plstSteps.add(new SendSignalAction_h0e(behaviourBuilder));
    plstSteps.add(new StayAction_i0e(behaviourBuilder));
    behaviourBuilder.setSteps(plstSteps);

    Signal sendSignalTemp = new Signal();

  }
  public void InitSignificantCOVIDcontact_g(Signal s) {
    behaviourBuilder.setSignalTrigger(s);
    ArrayList<BehaviourStep> plstSteps = new ArrayList();
    plstSteps.add(new MoveAction_a0f_7(behaviourBuilder));
    plstSteps.add(new OrderAction_b0f(behaviourBuilder));
    plstSteps.add(new StayAction_c0f_3(behaviourBuilder));
    plstSteps.add(new Choice_d0f_5(behaviourBuilder));
    plstSteps.add(new Choice_e0f_3(behaviourBuilder));
    plstSteps.add(new StayAction_f0f(behaviourBuilder));
    behaviourBuilder.setSteps(plstSteps);

    Signal sendSignalTemp = new Signal();

  }
  public void InitSignificantCOVIDContact_h(Signal s) {
    behaviourBuilder.setSignalTrigger(s);
    ArrayList<BehaviourStep> plstSteps = new ArrayList();
    plstSteps.add(new MoveAction_a0g_7(behaviourBuilder));
    plstSteps.add(new OrderAction_b0g_3(behaviourBuilder));
    plstSteps.add(new StayAction_c0g_3(behaviourBuilder));
    plstSteps.add(new Choice_d0g_3(behaviourBuilder));
    plstSteps.add(new Choice_e0g_3(behaviourBuilder));
    plstSteps.add(new StayAction_f0g(behaviourBuilder));
    behaviourBuilder.setSteps(plstSteps);

    Signal sendSignalTemp = new Signal();

  }
  public void InitCOVIDRiskCheck_i(Signal s) {
    behaviourBuilder.setSignalTrigger(s);
    ArrayList<BehaviourStep> plstSteps = new ArrayList();
    plstSteps.add(new MoveAction_a0h_3(behaviourBuilder));
    plstSteps.add(new OrderAction_b0h(behaviourBuilder));
    plstSteps.add(new StayAction_c0h(behaviourBuilder));
    plstSteps.add(new Choice_d0h(behaviourBuilder));
    plstSteps.add(new Choice_e0h(behaviourBuilder));
    plstSteps.add(new StayAction_f0h(behaviourBuilder));
    behaviourBuilder.setSteps(plstSteps);

    Signal sendSignalTemp = new Signal();

  }
  public void InitConfirmwithPCR_j(Signal s) {
    behaviourBuilder.setSignalTrigger(s);
    ArrayList<BehaviourStep> plstSteps = new ArrayList();
    plstSteps.add(new StayAction_a0i(behaviourBuilder));
    plstSteps.add(new Choice_b0i(behaviourBuilder));
    plstSteps.add(new Choice_c0i(behaviourBuilder));
    plstSteps.add(new Choice_d0i(behaviourBuilder));
    plstSteps.add(new Choice_e0i(behaviourBuilder));
    plstSteps.add(new Choice_f0i(behaviourBuilder));
    plstSteps.add(new StayAction_g0i(behaviourBuilder));
    behaviourBuilder.setSteps(plstSteps);

    Signal sendSignalTemp = new Signal();

  }

}
