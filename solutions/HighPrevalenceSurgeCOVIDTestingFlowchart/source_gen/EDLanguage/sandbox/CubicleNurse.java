package EDLanguage.sandbox;

/*Generated by MPS */

import simcore.agents.Actor;
import simcore.action.Behaviour;
import repast.simphony.space.continuous.ContinuousSpace;
import repast.simphony.space.grid.Grid;
import repast.simphony.context.Context;
import simcore.Signals.Signal;
import java.util.List;
import java.util.function.Predicate;
import repast.simphony.space.graph.Network;
import simcore.action.BehaviourStep;
import simcore.action.InstantBehaviourStep;
import java.util.ArrayList;
import simcore.basicStructures.Board;
import simcore.Signals.Orders.MoveToOrder;
import simcore.basicStructures.RoomType;
import simcore.basicStructures.Room;
import simcore.action.PassiveBehaviourStep;

public class CubicleNurse extends Actor {

  public Behaviour behaviourBuilder;

  public CubicleNurse(ContinuousSpace<Object> space, Grid<Object> grid, Context<Object> context) {
    super(space, grid, context);
    mintMyMaxPatients = 1;
  }

  public CubicleNurse(ContinuousSpace<Object> space, Grid<Object> grid, String pstrStartLocation) {
    super(space, grid, pstrStartLocation);
  }

  protected Signal selectSignal(List<Signal> plstSignals) {
    if (!(plstSignals.isEmpty())) {
      if (plstSignals.stream().filter(new Predicate<Signal>() {
        public boolean test(Signal s) {
          return ((Network) context.getProjection("CurrentPatientAllocations")).getEdge(CubicleNurse.this, s.GetData("patient")) != null;
        }
      }).findFirst().orElse(null) != null) {
        return plstSignals.stream().filter(new Predicate<Signal>() {
          public boolean test(Signal s) {
            return ((Network) context.getProjection("CurrentPatientAllocations")).getEdge(CubicleNurse.this, s.GetData("patient")) != null;
          }
        }).findFirst().orElse(null);
      }
      if (plstSignals.stream().filter(new Predicate<Signal>() {
        public boolean test(Signal s) {
          return ((Network) context.getProjection("CurrentPatientAllocations")).getEdges(s.GetData("patient")) != null;
        }
      }).findFirst().orElse(null) != null) {
        return plstSignals.stream().filter(new Predicate<Signal>() {
          public boolean test(Signal s) {
            return ((Network) context.getProjection("CurrentPatientAllocations")).getEdges(s.GetData("patient")) != null;
          }
        }).findFirst().orElse(null);
      }
    }
    return null;
  }



  public Behaviour BuildActionFromSignal(Signal s) {
    switch (s.getName()) {
      case "":
        break;
      case "LateralFlowTestTrigger_a":
        behaviourBuilder = new Behaviour("LateralFlowTestTrigger_a");
        this.InitLateralFlowTest_a(s);
        break;
      case "CheckSymptomsTrigger_b":
        behaviourBuilder = new Behaviour("CheckSymptomsTrigger_b");
        this.InitCheckSymptoms_b(s);
        break;
      case "CheckSymptomsTrigger_c":
        behaviourBuilder = new Behaviour("CheckSymptomsTrigger_c");
        this.InitCheckSymptoms_c(s);
        break;
      case "LIATTrigger_d":
        behaviourBuilder = new Behaviour("LIATTrigger_d");
        this.InitLIAT_d(s);
        break;
      case "CepheidTrigger_a":
        behaviourBuilder = new Behaviour("CepheidTrigger_a");
        this.InitCepheid_e(s);
        break;
      case "CheckCOVIDContactTrigger_g":
        behaviourBuilder = new Behaviour("CheckCOVIDContactTrigger_g");
        this.InitCheckCOVIDContact_g(s);
        break;
      default:
        System.out.println("Set mission: " + s.getName() + " failed!");
        return behaviourBuilder;
    }
    return behaviourBuilder;
  }



  public class StayAction_a0a_3 extends BehaviourStep {
    /*package*/ Behaviour behaviour;
    /*package*/ int timeExecuted = 0;
    public StayAction_a0a_3(Behaviour behaviour) {
      this.behaviour = behaviour;
    }

    public void execute() {
      // Do nothing 
      timeExecuted++;
    }

    public boolean finishCondition() {
      return timeExecuted == 5;
    }
  }
  public class Choice_b0a_3 extends InstantBehaviourStep {
    /*package*/ Behaviour behaviour;
    public Choice_b0a_3(Behaviour behaviour) {
      this.behaviour = behaviour;
    }

    public void execute() {
      if (((patient) behaviour.getSignalTrigger().GetData("patient")).LFDCOVIDResult == "Negative") {
        ArrayList<BehaviourStep> plstSteps = new ArrayList();
        plstSteps.add(new SendSignalAction_a0b0a_3(behaviour));
        behaviour.injectSteps(plstSteps);
      } else {
        ArrayList<BehaviourStep> plstSteps = new ArrayList();
        behaviour.injectSteps(plstSteps);
      }
    }
  }
  public class Choice_c0a_3 extends InstantBehaviourStep {
    /*package*/ Behaviour behaviour;
    public Choice_c0a_3(Behaviour behaviour) {
      this.behaviour = behaviour;
    }

    public void execute() {
      if (((patient) behaviour.getSignalTrigger().GetData("patient")).LFDCOVIDResult == "Positive") {
        ArrayList<BehaviourStep> plstSteps = new ArrayList();
        plstSteps.add(new SendSignalAction_a0c0a_3(behaviour));
        behaviour.injectSteps(plstSteps);
      } else {
        ArrayList<BehaviourStep> plstSteps = new ArrayList();
        behaviour.injectSteps(plstSteps);
      }
    }
  }
  public class StayAction_d0a_3 extends BehaviourStep {
    /*package*/ Behaviour behaviour;
    /*package*/ int timeExecuted = 0;
    public StayAction_d0a_3(Behaviour behaviour) {
      this.behaviour = behaviour;
    }

    public void execute() {
      // Do nothing 
      timeExecuted++;
    }

    public boolean finishCondition() {
      return timeExecuted == 1;
    }
  }
  public class StayAction_a0a_5 extends BehaviourStep {
    /*package*/ Behaviour behaviour;
    /*package*/ int timeExecuted = 0;
    public StayAction_a0a_5(Behaviour behaviour) {
      this.behaviour = behaviour;
    }

    public void execute() {
      // Do nothing 
      timeExecuted++;
    }

    public boolean finishCondition() {
      return timeExecuted == 5;
    }
  }
  public class Choice_b0a_5 extends InstantBehaviourStep {
    /*package*/ Behaviour behaviour;
    public Choice_b0a_5(Behaviour behaviour) {
      this.behaviour = behaviour;
    }

    public void execute() {
      if (((patient) behaviour.getSignalTrigger().GetData("patient")).LFDCOVIDResult == "Negative") {
        ArrayList<BehaviourStep> plstSteps = new ArrayList();
        plstSteps.add(new SendSignalAction_a0b0a_3(behaviour));
        behaviour.injectSteps(plstSteps);
      } else {
        ArrayList<BehaviourStep> plstSteps = new ArrayList();
        behaviour.injectSteps(plstSteps);
      }
    }
  }
  public class SendSignalAction_a0b0a_3 extends BehaviourStep {
    /*package*/ Behaviour behaviour;

    public SendSignalAction_a0b0a_3(Behaviour behaviour) {
      this.behaviour = behaviour;
    }

    public void execute() {
      Board b = ReadBoard();
      Signal sendSignalTemp = new Signal();
      sendSignalTemp = new CheckSymptomsTrigger_cSignal();
      sendSignalTemp.AddData("patient", behaviour.getSignalTrigger().GetData("patient"));

      b.PushMission(sendSignalTemp);
    }
  }
  public class SendSignalAction_a0b0a_5 extends BehaviourStep {
    /*package*/ Behaviour behaviour;

    public SendSignalAction_a0b0a_5(Behaviour behaviour) {
      this.behaviour = behaviour;
    }

    public void execute() {
      Board b = ReadBoard();
      Signal sendSignalTemp = new Signal();
      sendSignalTemp = new CheckSymptomsTrigger_cSignal();
      sendSignalTemp.AddData("patient", behaviour.getSignalTrigger().GetData("patient"));

      b.PushMission(sendSignalTemp);
    }
  }
  public class Choice_c0a_5 extends InstantBehaviourStep {
    /*package*/ Behaviour behaviour;
    public Choice_c0a_5(Behaviour behaviour) {
      this.behaviour = behaviour;
    }

    public void execute() {
      if (((patient) behaviour.getSignalTrigger().GetData("patient")).LFDCOVIDResult == "Positive") {
        ArrayList<BehaviourStep> plstSteps = new ArrayList();
        plstSteps.add(new SendSignalAction_a0c0a_3(behaviour));
        behaviour.injectSteps(plstSteps);
      } else {
        ArrayList<BehaviourStep> plstSteps = new ArrayList();
        behaviour.injectSteps(plstSteps);
      }
    }
  }
  public class SendSignalAction_a0c0a_3 extends BehaviourStep {
    /*package*/ Behaviour behaviour;

    public SendSignalAction_a0c0a_3(Behaviour behaviour) {
      this.behaviour = behaviour;
    }

    public void execute() {
      Board b = ReadBoard();
      Signal sendSignalTemp = new Signal();
      sendSignalTemp = new CheckSymptomsTrigger_bSignal();
      sendSignalTemp.AddData("patient", behaviour.getSignalTrigger().GetData("patient"));

      b.PushMission(sendSignalTemp);
    }
  }
  public class SendSignalAction_a0c0a_5 extends BehaviourStep {
    /*package*/ Behaviour behaviour;

    public SendSignalAction_a0c0a_5(Behaviour behaviour) {
      this.behaviour = behaviour;
    }

    public void execute() {
      Board b = ReadBoard();
      Signal sendSignalTemp = new Signal();
      sendSignalTemp = new CheckSymptomsTrigger_bSignal();
      sendSignalTemp.AddData("patient", behaviour.getSignalTrigger().GetData("patient"));

      b.PushMission(sendSignalTemp);
    }
  }
  public class StayAction_d0a_5 extends BehaviourStep {
    /*package*/ Behaviour behaviour;
    /*package*/ int timeExecuted = 0;
    public StayAction_d0a_5(Behaviour behaviour) {
      this.behaviour = behaviour;
    }

    public void execute() {
      // Do nothing 
      timeExecuted++;
    }

    public boolean finishCondition() {
      return timeExecuted == 1;
    }
  }
  public class OrderAction_a0b extends BehaviourStep {
    /*package*/ Behaviour behaviour;
    public OrderAction_a0b(Behaviour behaviour) {
      this.behaviour = behaviour;
    }

    public void execute() {
      Actor a = (Actor) behaviour.getSignalTrigger().GetData("patient");

      a.TakeOrder(new MoveToOrder().WithDestination(CubicleNurse.this));
    }
  }
  public class StayAction_b0b extends BehaviourStep {
    /*package*/ Behaviour behaviour;
    /*package*/ int timeExecuted = 0;
    public StayAction_b0b(Behaviour behaviour) {
      this.behaviour = behaviour;
    }

    public void execute() {
      // Do nothing 
      timeExecuted++;
    }

    public boolean finishCondition() {
      return timeExecuted == 5;
    }
  }
  public class Choice_c0b extends InstantBehaviourStep {
    /*package*/ Behaviour behaviour;
    public Choice_c0b(Behaviour behaviour) {
      this.behaviour = behaviour;
    }

    public void execute() {
      if (((patient) behaviour.getSignalTrigger().GetData("patient")).PHEThreeResult == "Negative" && ((patient) behaviour.getSignalTrigger().GetData("patient")).RecentCovidContact == "No") {
        ArrayList<BehaviourStep> plstSteps = new ArrayList();
        plstSteps.add(new SendSignalAction_a0c0b(behaviour));
        behaviour.injectSteps(plstSteps);
      } else {
        ArrayList<BehaviourStep> plstSteps = new ArrayList();
        behaviour.injectSteps(plstSteps);
      }
    }
  }
  public class Choice_d0b extends InstantBehaviourStep {
    /*package*/ Behaviour behaviour;
    public Choice_d0b(Behaviour behaviour) {
      this.behaviour = behaviour;
    }

    public void execute() {
      if (((patient) behaviour.getSignalTrigger().GetData("patient")).PHEThreeResult == "Positive" || ((patient) behaviour.getSignalTrigger().GetData("patient")).RecentCovidContact == "Yes") {
        ArrayList<BehaviourStep> plstSteps = new ArrayList();
        plstSteps.add(new SendSignalAction_a0d0b(behaviour));
        behaviour.injectSteps(plstSteps);
      } else {
        ArrayList<BehaviourStep> plstSteps = new ArrayList();
        behaviour.injectSteps(plstSteps);
      }
    }
  }
  public class StayAction_e0b_3 extends BehaviourStep {
    /*package*/ Behaviour behaviour;
    /*package*/ int timeExecuted = 0;
    public StayAction_e0b_3(Behaviour behaviour) {
      this.behaviour = behaviour;
    }

    public void execute() {
      // Do nothing 
      timeExecuted++;
    }

    public boolean finishCondition() {
      return timeExecuted == 1;
    }
  }
  public class OrderAction_a0b_1 extends BehaviourStep {
    /*package*/ Behaviour behaviour;
    public OrderAction_a0b_1(Behaviour behaviour) {
      this.behaviour = behaviour;
    }

    public void execute() {
      Actor a = (Actor) behaviour.getSignalTrigger().GetData("patient");

      a.TakeOrder(new MoveToOrder().WithDestination(CubicleNurse.this));
    }
  }
  public class StayAction_b0b_1 extends BehaviourStep {
    /*package*/ Behaviour behaviour;
    /*package*/ int timeExecuted = 0;
    public StayAction_b0b_1(Behaviour behaviour) {
      this.behaviour = behaviour;
    }

    public void execute() {
      // Do nothing 
      timeExecuted++;
    }

    public boolean finishCondition() {
      return timeExecuted == 5;
    }
  }
  public class Choice_c0b_1 extends InstantBehaviourStep {
    /*package*/ Behaviour behaviour;
    public Choice_c0b_1(Behaviour behaviour) {
      this.behaviour = behaviour;
    }

    public void execute() {
      if (((patient) behaviour.getSignalTrigger().GetData("patient")).PHEThreeResult == "Negative" && ((patient) behaviour.getSignalTrigger().GetData("patient")).RecentCovidContact == "No") {
        ArrayList<BehaviourStep> plstSteps = new ArrayList();
        plstSteps.add(new SendSignalAction_a0c0b(behaviour));
        behaviour.injectSteps(plstSteps);
      } else {
        ArrayList<BehaviourStep> plstSteps = new ArrayList();
        behaviour.injectSteps(plstSteps);
      }
    }
  }
  public class SendSignalAction_a0c0b extends BehaviourStep {
    /*package*/ Behaviour behaviour;

    public SendSignalAction_a0c0b(Behaviour behaviour) {
      this.behaviour = behaviour;
    }

    public void execute() {
      Board b = ReadBoard();
      Signal sendSignalTemp = new Signal();
      sendSignalTemp = new DecideonPoCTestTrigger_fSignal();
      sendSignalTemp.AddData("patient", behaviour.getSignalTrigger().GetData("patient"));

      b.PushMission(sendSignalTemp);
    }
  }
  public class SendSignalAction_a0c0b_1 extends BehaviourStep {
    /*package*/ Behaviour behaviour;

    public SendSignalAction_a0c0b_1(Behaviour behaviour) {
      this.behaviour = behaviour;
    }

    public void execute() {
      Board b = ReadBoard();
      Signal sendSignalTemp = new Signal();
      sendSignalTemp = new DecideonPoCTestTrigger_fSignal();
      sendSignalTemp.AddData("patient", behaviour.getSignalTrigger().GetData("patient"));

      b.PushMission(sendSignalTemp);
    }
  }
  public class Choice_d0b_1 extends InstantBehaviourStep {
    /*package*/ Behaviour behaviour;
    public Choice_d0b_1(Behaviour behaviour) {
      this.behaviour = behaviour;
    }

    public void execute() {
      if (((patient) behaviour.getSignalTrigger().GetData("patient")).PHEThreeResult == "Positive" || ((patient) behaviour.getSignalTrigger().GetData("patient")).RecentCovidContact == "Yes") {
        ArrayList<BehaviourStep> plstSteps = new ArrayList();
        plstSteps.add(new SendSignalAction_a0d0b(behaviour));
        behaviour.injectSteps(plstSteps);
      } else {
        ArrayList<BehaviourStep> plstSteps = new ArrayList();
        behaviour.injectSteps(plstSteps);
      }
    }
  }
  public class SendSignalAction_a0d0b extends BehaviourStep {
    /*package*/ Behaviour behaviour;

    public SendSignalAction_a0d0b(Behaviour behaviour) {
      this.behaviour = behaviour;
    }

    public void execute() {
      Board b = ReadBoard();
      Signal sendSignalTemp = new Signal();
      sendSignalTemp = new TakeabedTrigger_aSignal();
      sendSignalTemp.AddData("patient", behaviour.getSignalTrigger().GetData("patient"));

      b.PushMission(sendSignalTemp);
    }
  }
  public class SendSignalAction_a0d0b_1 extends BehaviourStep {
    /*package*/ Behaviour behaviour;

    public SendSignalAction_a0d0b_1(Behaviour behaviour) {
      this.behaviour = behaviour;
    }

    public void execute() {
      Board b = ReadBoard();
      Signal sendSignalTemp = new Signal();
      sendSignalTemp = new TakeabedTrigger_aSignal();
      sendSignalTemp.AddData("patient", behaviour.getSignalTrigger().GetData("patient"));

      b.PushMission(sendSignalTemp);
    }
  }
  public class StayAction_e0b_5 extends BehaviourStep {
    /*package*/ Behaviour behaviour;
    /*package*/ int timeExecuted = 0;
    public StayAction_e0b_5(Behaviour behaviour) {
      this.behaviour = behaviour;
    }

    public void execute() {
      // Do nothing 
      timeExecuted++;
    }

    public boolean finishCondition() {
      return timeExecuted == 1;
    }
  }
  public class OrderAction_a0c extends BehaviourStep {
    /*package*/ Behaviour behaviour;
    public OrderAction_a0c(Behaviour behaviour) {
      this.behaviour = behaviour;
    }

    public void execute() {
      Actor a = (Actor) behaviour.getSignalTrigger().GetData("patient");

      a.TakeOrder(new MoveToOrder().WithDestination(CubicleNurse.this));
    }
  }
  public class StayAction_b0c extends BehaviourStep {
    /*package*/ Behaviour behaviour;
    /*package*/ int timeExecuted = 0;
    public StayAction_b0c(Behaviour behaviour) {
      this.behaviour = behaviour;
    }

    public void execute() {
      // Do nothing 
      timeExecuted++;
    }

    public boolean finishCondition() {
      return timeExecuted == 5;
    }
  }
  public class Choice_c0c extends InstantBehaviourStep {
    /*package*/ Behaviour behaviour;
    public Choice_c0c(Behaviour behaviour) {
      this.behaviour = behaviour;
    }

    public void execute() {
      if (((patient) behaviour.getSignalTrigger().GetData("patient")).PHEThreeResult == "Positive") {
        ArrayList<BehaviourStep> plstSteps = new ArrayList();
        plstSteps.add(new SendSignalAction_a0c0c(behaviour));
        behaviour.injectSteps(plstSteps);
      } else {
        ArrayList<BehaviourStep> plstSteps = new ArrayList();
        behaviour.injectSteps(plstSteps);
      }
    }
  }
  public class Choice_d0c extends InstantBehaviourStep {
    /*package*/ Behaviour behaviour;
    public Choice_d0c(Behaviour behaviour) {
      this.behaviour = behaviour;
    }

    public void execute() {
      if (((patient) behaviour.getSignalTrigger().GetData("patient")).PHEThreeResult == "Negative") {
        ArrayList<BehaviourStep> plstSteps = new ArrayList();
        plstSteps.add(new SendSignalAction_a0d0c(behaviour));
        behaviour.injectSteps(plstSteps);
      } else {
        ArrayList<BehaviourStep> plstSteps = new ArrayList();
        behaviour.injectSteps(plstSteps);
      }
    }
  }
  public class StayAction_e0c extends BehaviourStep {
    /*package*/ Behaviour behaviour;
    /*package*/ int timeExecuted = 0;
    public StayAction_e0c(Behaviour behaviour) {
      this.behaviour = behaviour;
    }

    public void execute() {
      // Do nothing 
      timeExecuted++;
    }

    public boolean finishCondition() {
      return timeExecuted == 1;
    }
  }
  public class OrderAction_a0c_1 extends BehaviourStep {
    /*package*/ Behaviour behaviour;
    public OrderAction_a0c_1(Behaviour behaviour) {
      this.behaviour = behaviour;
    }

    public void execute() {
      Actor a = (Actor) behaviour.getSignalTrigger().GetData("patient");

      a.TakeOrder(new MoveToOrder().WithDestination(CubicleNurse.this));
    }
  }
  public class StayAction_b0c_1 extends BehaviourStep {
    /*package*/ Behaviour behaviour;
    /*package*/ int timeExecuted = 0;
    public StayAction_b0c_1(Behaviour behaviour) {
      this.behaviour = behaviour;
    }

    public void execute() {
      // Do nothing 
      timeExecuted++;
    }

    public boolean finishCondition() {
      return timeExecuted == 5;
    }
  }
  public class Choice_c0c_1 extends InstantBehaviourStep {
    /*package*/ Behaviour behaviour;
    public Choice_c0c_1(Behaviour behaviour) {
      this.behaviour = behaviour;
    }

    public void execute() {
      if (((patient) behaviour.getSignalTrigger().GetData("patient")).PHEThreeResult == "Positive") {
        ArrayList<BehaviourStep> plstSteps = new ArrayList();
        plstSteps.add(new SendSignalAction_a0c0c(behaviour));
        behaviour.injectSteps(plstSteps);
      } else {
        ArrayList<BehaviourStep> plstSteps = new ArrayList();
        behaviour.injectSteps(plstSteps);
      }
    }
  }
  public class SendSignalAction_a0c0c extends BehaviourStep {
    /*package*/ Behaviour behaviour;

    public SendSignalAction_a0c0c(Behaviour behaviour) {
      this.behaviour = behaviour;
    }

    public void execute() {
      Board b = ReadBoard();
      Signal sendSignalTemp = new Signal();
      sendSignalTemp = new DecideonPoCTestTrigger_fSignal();
      sendSignalTemp.AddData("patient", behaviour.getSignalTrigger().GetData("patient"));

      b.PushMission(sendSignalTemp);
    }
  }
  public class SendSignalAction_a0c0c_1 extends BehaviourStep {
    /*package*/ Behaviour behaviour;

    public SendSignalAction_a0c0c_1(Behaviour behaviour) {
      this.behaviour = behaviour;
    }

    public void execute() {
      Board b = ReadBoard();
      Signal sendSignalTemp = new Signal();
      sendSignalTemp = new DecideonPoCTestTrigger_fSignal();
      sendSignalTemp.AddData("patient", behaviour.getSignalTrigger().GetData("patient"));

      b.PushMission(sendSignalTemp);
    }
  }
  public class Choice_d0c_1 extends InstantBehaviourStep {
    /*package*/ Behaviour behaviour;
    public Choice_d0c_1(Behaviour behaviour) {
      this.behaviour = behaviour;
    }

    public void execute() {
      if (((patient) behaviour.getSignalTrigger().GetData("patient")).PHEThreeResult == "Negative") {
        ArrayList<BehaviourStep> plstSteps = new ArrayList();
        plstSteps.add(new SendSignalAction_a0d0c(behaviour));
        behaviour.injectSteps(plstSteps);
      } else {
        ArrayList<BehaviourStep> plstSteps = new ArrayList();
        behaviour.injectSteps(plstSteps);
      }
    }
  }
  public class SendSignalAction_a0d0c extends BehaviourStep {
    /*package*/ Behaviour behaviour;

    public SendSignalAction_a0d0c(Behaviour behaviour) {
      this.behaviour = behaviour;
    }

    public void execute() {
      Board b = ReadBoard();
      Signal sendSignalTemp = new Signal();
      sendSignalTemp = new CheckCOVIDContactTrigger_gSignal();
      sendSignalTemp.AddData("patient", behaviour.getSignalTrigger().GetData("patient"));

      b.PushMission(sendSignalTemp);
    }
  }
  public class SendSignalAction_a0d0c_1 extends BehaviourStep {
    /*package*/ Behaviour behaviour;

    public SendSignalAction_a0d0c_1(Behaviour behaviour) {
      this.behaviour = behaviour;
    }

    public void execute() {
      Board b = ReadBoard();
      Signal sendSignalTemp = new Signal();
      sendSignalTemp = new CheckCOVIDContactTrigger_gSignal();
      sendSignalTemp.AddData("patient", behaviour.getSignalTrigger().GetData("patient"));

      b.PushMission(sendSignalTemp);
    }
  }
  public class StayAction_e0c_1 extends BehaviourStep {
    /*package*/ Behaviour behaviour;
    /*package*/ int timeExecuted = 0;
    public StayAction_e0c_1(Behaviour behaviour) {
      this.behaviour = behaviour;
    }

    public void execute() {
      // Do nothing 
      timeExecuted++;
    }

    public boolean finishCondition() {
      return timeExecuted == 1;
    }
  }
  public class MoveAction_a0d_1 extends BehaviourStep {
    /*package*/ Behaviour behaviour;
    /*package*/ Object target;
    /*package*/ Object concreteTarget;
    public MoveAction_a0d_1(Behaviour behaviour) {
      target = RespiratoryCubicle.getInstance();
      this.behaviour = behaviour;
    }

    public void execute() {
      if (concreteTarget == null) {
        if (target instanceof RoomType) {
          concreteTarget = SelectLocation(((RoomType) target));
        } else {
          concreteTarget = target;
        }
      }

      if (target instanceof RoomType) {
        if (EvaluateRoomChoice(((Room) concreteTarget)) == 0) {
          concreteTarget = SelectLocation(((RoomType) target));
        }
      }

      MoveTowards(concreteTarget);
    }

    public boolean finishCondition() {
      return ImAt(concreteTarget);
    }
  }
  public class OrderAction_b0d extends BehaviourStep {
    /*package*/ Behaviour behaviour;
    public OrderAction_b0d(Behaviour behaviour) {
      this.behaviour = behaviour;
    }

    public void execute() {
      Actor a = (Actor) behaviour.getSignalTrigger().GetData("patient");

      a.TakeOrder(new MoveToOrder().WithDestination(CubicleNurse.this));
    }
  }
  public class StayAction_c0d_1 extends BehaviourStep {
    /*package*/ Behaviour behaviour;
    /*package*/ int timeExecuted = 0;
    public StayAction_c0d_1(Behaviour behaviour) {
      this.behaviour = behaviour;
    }

    public void execute() {
      // Do nothing 
      timeExecuted++;
    }

    public boolean finishCondition() {
      return timeExecuted == 5;
    }
  }
  public class StayAction_d0d extends PassiveBehaviourStep {
    /*package*/ Behaviour behaviour;
    /*package*/ int testingTime = LIAT.getInstance().getProcessingTime();
    /*package*/ int timeExecuted = 0;
    public StayAction_d0d(Behaviour behaviour) {
      this.behaviour = behaviour;
    }

    public void execute() {
      // Do nothing 
      timeExecuted++;
    }

    public boolean finishCondition() {
      return timeExecuted == testingTime;
    }
  }
  public class Choice_e0d extends InstantBehaviourStep {
    /*package*/ Behaviour behaviour;
    public Choice_e0d(Behaviour behaviour) {
      this.behaviour = behaviour;
    }

    public void execute() {
      if ((((patient) behaviour.getSignalTrigger().GetData("patient")).COVIDInfectionStatus == "Symptomatic") || (((patient) behaviour.getSignalTrigger().GetData("patient")).COVIDInfectionStatus == "Asymptomatic")) {
        ArrayList<BehaviourStep> plstSteps = new ArrayList();
        plstSteps.add(new Choice_a0e0d(behaviour));
        behaviour.injectSteps(plstSteps);
      } else {
        ArrayList<BehaviourStep> plstSteps = new ArrayList();
        plstSteps.add(new Choice_a0e0d_11(behaviour));
        behaviour.injectSteps(plstSteps);
      }
    }
  }
  public class Choice_f0d extends InstantBehaviourStep {
    /*package*/ Behaviour behaviour;
    public Choice_f0d(Behaviour behaviour) {
      this.behaviour = behaviour;
    }

    public void execute() {
      if ((((patient) behaviour.getSignalTrigger().GetData("patient")).FluAInfectionStatus == "Symptomatic") || (((patient) behaviour.getSignalTrigger().GetData("patient")).FluAInfectionStatus == "Asymptomatic")) {
        ArrayList<BehaviourStep> plstSteps = new ArrayList();
        plstSteps.add(new Choice_a0f0d_7(behaviour));
        behaviour.injectSteps(plstSteps);
      } else {
        ArrayList<BehaviourStep> plstSteps = new ArrayList();
        plstSteps.add(new Choice_a0f0d_11(behaviour));
        behaviour.injectSteps(plstSteps);
      }
    }
  }
  public class Choice_g0d extends InstantBehaviourStep {
    /*package*/ Behaviour behaviour;
    public Choice_g0d(Behaviour behaviour) {
      this.behaviour = behaviour;
    }

    public void execute() {
      if ((((patient) behaviour.getSignalTrigger().GetData("patient")).FluBInfectionStatus == "Symptomatic") || (((patient) behaviour.getSignalTrigger().GetData("patient")).FluBInfectionStatus == "Asymptomatic")) {
        ArrayList<BehaviourStep> plstSteps = new ArrayList();
        plstSteps.add(new Choice_a0g0d(behaviour));
        behaviour.injectSteps(plstSteps);
      } else {
        ArrayList<BehaviourStep> plstSteps = new ArrayList();
        plstSteps.add(new Choice_a0g0d_3(behaviour));
        behaviour.injectSteps(plstSteps);
      }
    }
  }
  public class Choice_h0d extends InstantBehaviourStep {
    /*package*/ Behaviour behaviour;
    public Choice_h0d(Behaviour behaviour) {
      this.behaviour = behaviour;
    }

    public void execute() {
      if (((patient) behaviour.getSignalTrigger().GetData("patient")).LIATCOVIDResult == "Negative") {
        ArrayList<BehaviourStep> plstSteps = new ArrayList();
        plstSteps.add(new SendSignalAction_a0h0d(behaviour));
        behaviour.injectSteps(plstSteps);
      } else {
        ArrayList<BehaviourStep> plstSteps = new ArrayList();
        behaviour.injectSteps(plstSteps);
      }
    }
  }
  public class Choice_i0d extends InstantBehaviourStep {
    /*package*/ Behaviour behaviour;
    public Choice_i0d(Behaviour behaviour) {
      this.behaviour = behaviour;
    }

    public void execute() {
      if (((patient) behaviour.getSignalTrigger().GetData("patient")).LIATCOVIDResult == "Positive") {
        ArrayList<BehaviourStep> plstSteps = new ArrayList();
        plstSteps.add(new SendSignalAction_a0i0d(behaviour));
        behaviour.injectSteps(plstSteps);
      } else {
        ArrayList<BehaviourStep> plstSteps = new ArrayList();
        behaviour.injectSteps(plstSteps);
      }
    }
  }
  public class StayAction_j0d extends BehaviourStep {
    /*package*/ Behaviour behaviour;
    /*package*/ int timeExecuted = 0;
    public StayAction_j0d(Behaviour behaviour) {
      this.behaviour = behaviour;
    }

    public void execute() {
      // Do nothing 
      timeExecuted++;
    }

    public boolean finishCondition() {
      return timeExecuted == 1;
    }
  }
  public class MoveAction_a0d_5 extends BehaviourStep {
    /*package*/ Behaviour behaviour;
    /*package*/ Object target;
    /*package*/ Object concreteTarget;
    public MoveAction_a0d_5(Behaviour behaviour) {
      target = RespiratoryCubicle.getInstance();
      this.behaviour = behaviour;
    }

    public void execute() {
      if (concreteTarget == null) {
        if (target instanceof RoomType) {
          concreteTarget = SelectLocation(((RoomType) target));
        } else {
          concreteTarget = target;
        }
      }

      if (target instanceof RoomType) {
        if (EvaluateRoomChoice(((Room) concreteTarget)) == 0) {
          concreteTarget = SelectLocation(((RoomType) target));
        }
      }

      MoveTowards(concreteTarget);
    }

    public boolean finishCondition() {
      return ImAt(concreteTarget);
    }
  }
  public class OrderAction_b0d_1 extends BehaviourStep {
    /*package*/ Behaviour behaviour;
    public OrderAction_b0d_1(Behaviour behaviour) {
      this.behaviour = behaviour;
    }

    public void execute() {
      Actor a = (Actor) behaviour.getSignalTrigger().GetData("patient");

      a.TakeOrder(new MoveToOrder().WithDestination(CubicleNurse.this));
    }
  }
  public class StayAction_c0d_5 extends BehaviourStep {
    /*package*/ Behaviour behaviour;
    /*package*/ int timeExecuted = 0;
    public StayAction_c0d_5(Behaviour behaviour) {
      this.behaviour = behaviour;
    }

    public void execute() {
      // Do nothing 
      timeExecuted++;
    }

    public boolean finishCondition() {
      return timeExecuted == 5;
    }
  }
  public class StayAction_d0d_1 extends PassiveBehaviourStep {
    /*package*/ Behaviour behaviour;
    /*package*/ int testingTime = LIAT.getInstance().getProcessingTime();
    /*package*/ int timeExecuted = 0;
    public StayAction_d0d_1(Behaviour behaviour) {
      this.behaviour = behaviour;
    }

    public void execute() {
      // Do nothing 
      timeExecuted++;
    }

    public boolean finishCondition() {
      return timeExecuted == testingTime;
    }
  }
  public class Choice_e0d_3 extends InstantBehaviourStep {
    /*package*/ Behaviour behaviour;
    public Choice_e0d_3(Behaviour behaviour) {
      this.behaviour = behaviour;
    }

    public void execute() {
      if ((((patient) behaviour.getSignalTrigger().GetData("patient")).COVIDInfectionStatus == "Symptomatic") || (((patient) behaviour.getSignalTrigger().GetData("patient")).COVIDInfectionStatus == "Asymptomatic")) {
        ArrayList<BehaviourStep> plstSteps = new ArrayList();
        plstSteps.add(new Choice_a0e0d(behaviour));
        behaviour.injectSteps(plstSteps);
      } else {
        ArrayList<BehaviourStep> plstSteps = new ArrayList();
        plstSteps.add(new Choice_a0e0d_11(behaviour));
        behaviour.injectSteps(plstSteps);
      }
    }
  }
  public class Choice_a0e0d extends InstantBehaviourStep {
    /*package*/ Behaviour behaviour;
    public Choice_a0e0d(Behaviour behaviour) {
      this.behaviour = behaviour;
    }

    public void execute() {
      if (Dice(100)) {
        ArrayList<BehaviourStep> plstSteps = new ArrayList();
        plstSteps.add(new Consequence_a0a0e0d_0(behaviour));
        behaviour.injectSteps(plstSteps);
      } else {
        ArrayList<BehaviourStep> plstSteps = new ArrayList();
        plstSteps.add(new Consequence_a0a0e0d_5(behaviour));
        behaviour.injectSteps(plstSteps);
      }
    }
  }
  public class Choice_a0e0d_3 extends InstantBehaviourStep {
    /*package*/ Behaviour behaviour;
    public Choice_a0e0d_3(Behaviour behaviour) {
      this.behaviour = behaviour;
    }

    public void execute() {
      if (Dice(100)) {
        ArrayList<BehaviourStep> plstSteps = new ArrayList();
        plstSteps.add(new Consequence_a0a0e0d_0(behaviour));
        behaviour.injectSteps(plstSteps);
      } else {
        ArrayList<BehaviourStep> plstSteps = new ArrayList();
        plstSteps.add(new Consequence_a0a0e0d_5(behaviour));
        behaviour.injectSteps(plstSteps);
      }
    }
  }
  public class Consequence_a0a0e0d_0 extends InstantBehaviourStep {
    /*package*/ Behaviour behaviour;
    public Consequence_a0a0e0d_0(Behaviour behaviour) {
      this.behaviour = behaviour;
    }

    public void execute() {
      ((patient) behaviour.getSignalTrigger().GetData("patient")).LIATCOVIDResult = "Positive";

    }
  }
  public class Consequence_a0a0e0d_3 extends InstantBehaviourStep {
    /*package*/ Behaviour behaviour;
    public Consequence_a0a0e0d_3(Behaviour behaviour) {
      this.behaviour = behaviour;
    }

    public void execute() {
      ((patient) behaviour.getSignalTrigger().GetData("patient")).LIATCOVIDResult = "Positive";

    }
  }
  public class Consequence_a0a0e0d_5 extends InstantBehaviourStep {
    /*package*/ Behaviour behaviour;
    public Consequence_a0a0e0d_5(Behaviour behaviour) {
      this.behaviour = behaviour;
    }

    public void execute() {
      ((patient) behaviour.getSignalTrigger().GetData("patient")).LIATCOVIDResult = "Negative";

    }
  }
  public class Consequence_a0a0e0d_6 extends InstantBehaviourStep {
    /*package*/ Behaviour behaviour;
    public Consequence_a0a0e0d_6(Behaviour behaviour) {
      this.behaviour = behaviour;
    }

    public void execute() {
      ((patient) behaviour.getSignalTrigger().GetData("patient")).LIATCOVIDResult = "Negative";

    }
  }
  public class Choice_a0e0d_11 extends InstantBehaviourStep {
    /*package*/ Behaviour behaviour;
    public Choice_a0e0d_11(Behaviour behaviour) {
      this.behaviour = behaviour;
    }

    public void execute() {
      if (Dice(100)) {
        ArrayList<BehaviourStep> plstSteps = new ArrayList();
        plstSteps.add(new Consequence_a0a0e0d_11(behaviour));
        behaviour.injectSteps(plstSteps);
      } else {
        ArrayList<BehaviourStep> plstSteps = new ArrayList();
        plstSteps.add(new Consequence_a0a0e0d_13(behaviour));
        behaviour.injectSteps(plstSteps);
      }
    }
  }
  public class Choice_a0e0d_13 extends InstantBehaviourStep {
    /*package*/ Behaviour behaviour;
    public Choice_a0e0d_13(Behaviour behaviour) {
      this.behaviour = behaviour;
    }

    public void execute() {
      if (Dice(100)) {
        ArrayList<BehaviourStep> plstSteps = new ArrayList();
        plstSteps.add(new Consequence_a0a0e0d_11(behaviour));
        behaviour.injectSteps(plstSteps);
      } else {
        ArrayList<BehaviourStep> plstSteps = new ArrayList();
        plstSteps.add(new Consequence_a0a0e0d_13(behaviour));
        behaviour.injectSteps(plstSteps);
      }
    }
  }
  public class Consequence_a0a0e0d_11 extends InstantBehaviourStep {
    /*package*/ Behaviour behaviour;
    public Consequence_a0a0e0d_11(Behaviour behaviour) {
      this.behaviour = behaviour;
    }

    public void execute() {
      ((patient) behaviour.getSignalTrigger().GetData("patient")).LIATCOVIDResult = "Negative";

    }
  }
  public class Consequence_a0a0e0d_12 extends InstantBehaviourStep {
    /*package*/ Behaviour behaviour;
    public Consequence_a0a0e0d_12(Behaviour behaviour) {
      this.behaviour = behaviour;
    }

    public void execute() {
      ((patient) behaviour.getSignalTrigger().GetData("patient")).LIATCOVIDResult = "Negative";

    }
  }
  public class Consequence_a0a0e0d_13 extends InstantBehaviourStep {
    /*package*/ Behaviour behaviour;
    public Consequence_a0a0e0d_13(Behaviour behaviour) {
      this.behaviour = behaviour;
    }

    public void execute() {
      ((patient) behaviour.getSignalTrigger().GetData("patient")).LIATCOVIDResult = "Positive";

    }
  }
  public class Consequence_a0a0e0d_14 extends InstantBehaviourStep {
    /*package*/ Behaviour behaviour;
    public Consequence_a0a0e0d_14(Behaviour behaviour) {
      this.behaviour = behaviour;
    }

    public void execute() {
      ((patient) behaviour.getSignalTrigger().GetData("patient")).LIATCOVIDResult = "Positive";

    }
  }
  public class Choice_f0d_5 extends InstantBehaviourStep {
    /*package*/ Behaviour behaviour;
    public Choice_f0d_5(Behaviour behaviour) {
      this.behaviour = behaviour;
    }

    public void execute() {
      if ((((patient) behaviour.getSignalTrigger().GetData("patient")).FluAInfectionStatus == "Symptomatic") || (((patient) behaviour.getSignalTrigger().GetData("patient")).FluAInfectionStatus == "Asymptomatic")) {
        ArrayList<BehaviourStep> plstSteps = new ArrayList();
        plstSteps.add(new Choice_a0f0d_7(behaviour));
        behaviour.injectSteps(plstSteps);
      } else {
        ArrayList<BehaviourStep> plstSteps = new ArrayList();
        plstSteps.add(new Choice_a0f0d_11(behaviour));
        behaviour.injectSteps(plstSteps);
      }
    }
  }
  public class Choice_a0f0d_7 extends InstantBehaviourStep {
    /*package*/ Behaviour behaviour;
    public Choice_a0f0d_7(Behaviour behaviour) {
      this.behaviour = behaviour;
    }

    public void execute() {
      if (Dice(100)) {
        ArrayList<BehaviourStep> plstSteps = new ArrayList();
        plstSteps.add(new Consequence_a0a0f0d_7(behaviour));
        behaviour.injectSteps(plstSteps);
      } else {
        ArrayList<BehaviourStep> plstSteps = new ArrayList();
        plstSteps.add(new Consequence_a0a0f0d_9(behaviour));
        behaviour.injectSteps(plstSteps);
      }
    }
  }
  public class Choice_a0f0d_9 extends InstantBehaviourStep {
    /*package*/ Behaviour behaviour;
    public Choice_a0f0d_9(Behaviour behaviour) {
      this.behaviour = behaviour;
    }

    public void execute() {
      if (Dice(100)) {
        ArrayList<BehaviourStep> plstSteps = new ArrayList();
        plstSteps.add(new Consequence_a0a0f0d_7(behaviour));
        behaviour.injectSteps(plstSteps);
      } else {
        ArrayList<BehaviourStep> plstSteps = new ArrayList();
        plstSteps.add(new Consequence_a0a0f0d_9(behaviour));
        behaviour.injectSteps(plstSteps);
      }
    }
  }
  public class Consequence_a0a0f0d_7 extends InstantBehaviourStep {
    /*package*/ Behaviour behaviour;
    public Consequence_a0a0f0d_7(Behaviour behaviour) {
      this.behaviour = behaviour;
    }

    public void execute() {
      ((patient) behaviour.getSignalTrigger().GetData("patient")).LIATFluAResult = "Positive";

    }
  }
  public class Consequence_a0a0f0d_8 extends InstantBehaviourStep {
    /*package*/ Behaviour behaviour;
    public Consequence_a0a0f0d_8(Behaviour behaviour) {
      this.behaviour = behaviour;
    }

    public void execute() {
      ((patient) behaviour.getSignalTrigger().GetData("patient")).LIATFluAResult = "Positive";

    }
  }
  public class Consequence_a0a0f0d_9 extends InstantBehaviourStep {
    /*package*/ Behaviour behaviour;
    public Consequence_a0a0f0d_9(Behaviour behaviour) {
      this.behaviour = behaviour;
    }

    public void execute() {
      ((patient) behaviour.getSignalTrigger().GetData("patient")).LIATFluAResult = "Negative";

    }
  }
  public class Consequence_a0a0f0d_10 extends InstantBehaviourStep {
    /*package*/ Behaviour behaviour;
    public Consequence_a0a0f0d_10(Behaviour behaviour) {
      this.behaviour = behaviour;
    }

    public void execute() {
      ((patient) behaviour.getSignalTrigger().GetData("patient")).LIATFluAResult = "Negative";

    }
  }
  public class Choice_a0f0d_11 extends InstantBehaviourStep {
    /*package*/ Behaviour behaviour;
    public Choice_a0f0d_11(Behaviour behaviour) {
      this.behaviour = behaviour;
    }

    public void execute() {
      if (Dice(100)) {
        ArrayList<BehaviourStep> plstSteps = new ArrayList();
        plstSteps.add(new Consequence_a0a0f0d_11(behaviour));
        behaviour.injectSteps(plstSteps);
      } else {
        ArrayList<BehaviourStep> plstSteps = new ArrayList();
        plstSteps.add(new Consequence_a0a0f0d_13(behaviour));
        behaviour.injectSteps(plstSteps);
      }
    }
  }
  public class Choice_a0f0d_13 extends InstantBehaviourStep {
    /*package*/ Behaviour behaviour;
    public Choice_a0f0d_13(Behaviour behaviour) {
      this.behaviour = behaviour;
    }

    public void execute() {
      if (Dice(100)) {
        ArrayList<BehaviourStep> plstSteps = new ArrayList();
        plstSteps.add(new Consequence_a0a0f0d_11(behaviour));
        behaviour.injectSteps(plstSteps);
      } else {
        ArrayList<BehaviourStep> plstSteps = new ArrayList();
        plstSteps.add(new Consequence_a0a0f0d_13(behaviour));
        behaviour.injectSteps(plstSteps);
      }
    }
  }
  public class Consequence_a0a0f0d_11 extends InstantBehaviourStep {
    /*package*/ Behaviour behaviour;
    public Consequence_a0a0f0d_11(Behaviour behaviour) {
      this.behaviour = behaviour;
    }

    public void execute() {
      ((patient) behaviour.getSignalTrigger().GetData("patient")).LIATFluAResult = "Negative";

    }
  }
  public class Consequence_a0a0f0d_12 extends InstantBehaviourStep {
    /*package*/ Behaviour behaviour;
    public Consequence_a0a0f0d_12(Behaviour behaviour) {
      this.behaviour = behaviour;
    }

    public void execute() {
      ((patient) behaviour.getSignalTrigger().GetData("patient")).LIATFluAResult = "Negative";

    }
  }
  public class Consequence_a0a0f0d_13 extends InstantBehaviourStep {
    /*package*/ Behaviour behaviour;
    public Consequence_a0a0f0d_13(Behaviour behaviour) {
      this.behaviour = behaviour;
    }

    public void execute() {
      ((patient) behaviour.getSignalTrigger().GetData("patient")).LIATFluAResult = "Positive";

    }
  }
  public class Consequence_a0a0f0d_14 extends InstantBehaviourStep {
    /*package*/ Behaviour behaviour;
    public Consequence_a0a0f0d_14(Behaviour behaviour) {
      this.behaviour = behaviour;
    }

    public void execute() {
      ((patient) behaviour.getSignalTrigger().GetData("patient")).LIATFluAResult = "Positive";

    }
  }
  public class Choice_g0d_1 extends InstantBehaviourStep {
    /*package*/ Behaviour behaviour;
    public Choice_g0d_1(Behaviour behaviour) {
      this.behaviour = behaviour;
    }

    public void execute() {
      if ((((patient) behaviour.getSignalTrigger().GetData("patient")).FluBInfectionStatus == "Symptomatic") || (((patient) behaviour.getSignalTrigger().GetData("patient")).FluBInfectionStatus == "Asymptomatic")) {
        ArrayList<BehaviourStep> plstSteps = new ArrayList();
        plstSteps.add(new Choice_a0g0d(behaviour));
        behaviour.injectSteps(plstSteps);
      } else {
        ArrayList<BehaviourStep> plstSteps = new ArrayList();
        plstSteps.add(new Choice_a0g0d_3(behaviour));
        behaviour.injectSteps(plstSteps);
      }
    }
  }
  public class Choice_a0g0d extends InstantBehaviourStep {
    /*package*/ Behaviour behaviour;
    public Choice_a0g0d(Behaviour behaviour) {
      this.behaviour = behaviour;
    }

    public void execute() {
      if (Dice(100)) {
        ArrayList<BehaviourStep> plstSteps = new ArrayList();
        plstSteps.add(new Consequence_a0a0g0d(behaviour));
        behaviour.injectSteps(plstSteps);
      } else {
        ArrayList<BehaviourStep> plstSteps = new ArrayList();
        plstSteps.add(new Consequence_a0a0g0d_1(behaviour));
        behaviour.injectSteps(plstSteps);
      }
    }
  }
  public class Choice_a0g0d_1 extends InstantBehaviourStep {
    /*package*/ Behaviour behaviour;
    public Choice_a0g0d_1(Behaviour behaviour) {
      this.behaviour = behaviour;
    }

    public void execute() {
      if (Dice(100)) {
        ArrayList<BehaviourStep> plstSteps = new ArrayList();
        plstSteps.add(new Consequence_a0a0g0d(behaviour));
        behaviour.injectSteps(plstSteps);
      } else {
        ArrayList<BehaviourStep> plstSteps = new ArrayList();
        plstSteps.add(new Consequence_a0a0g0d_1(behaviour));
        behaviour.injectSteps(plstSteps);
      }
    }
  }
  public class Consequence_a0a0g0d extends InstantBehaviourStep {
    /*package*/ Behaviour behaviour;
    public Consequence_a0a0g0d(Behaviour behaviour) {
      this.behaviour = behaviour;
    }

    public void execute() {
      ((patient) behaviour.getSignalTrigger().GetData("patient")).LIATFluBResult = "Positive";

    }
  }
  public class Consequence_a0a0g0d_0 extends InstantBehaviourStep {
    /*package*/ Behaviour behaviour;
    public Consequence_a0a0g0d_0(Behaviour behaviour) {
      this.behaviour = behaviour;
    }

    public void execute() {
      ((patient) behaviour.getSignalTrigger().GetData("patient")).LIATFluBResult = "Positive";

    }
  }
  public class Consequence_a0a0g0d_1 extends InstantBehaviourStep {
    /*package*/ Behaviour behaviour;
    public Consequence_a0a0g0d_1(Behaviour behaviour) {
      this.behaviour = behaviour;
    }

    public void execute() {
      ((patient) behaviour.getSignalTrigger().GetData("patient")).LIATFluBResult = "Negative";

    }
  }
  public class Consequence_a0a0g0d_2 extends InstantBehaviourStep {
    /*package*/ Behaviour behaviour;
    public Consequence_a0a0g0d_2(Behaviour behaviour) {
      this.behaviour = behaviour;
    }

    public void execute() {
      ((patient) behaviour.getSignalTrigger().GetData("patient")).LIATFluBResult = "Negative";

    }
  }
  public class Choice_a0g0d_3 extends InstantBehaviourStep {
    /*package*/ Behaviour behaviour;
    public Choice_a0g0d_3(Behaviour behaviour) {
      this.behaviour = behaviour;
    }

    public void execute() {
      if (Dice(100)) {
        ArrayList<BehaviourStep> plstSteps = new ArrayList();
        plstSteps.add(new Consequence_a0a0g0d_3(behaviour));
        behaviour.injectSteps(plstSteps);
      } else {
        ArrayList<BehaviourStep> plstSteps = new ArrayList();
        plstSteps.add(new Consequence_a0a0g0d_5(behaviour));
        behaviour.injectSteps(plstSteps);
      }
    }
  }
  public class Choice_a0g0d_5 extends InstantBehaviourStep {
    /*package*/ Behaviour behaviour;
    public Choice_a0g0d_5(Behaviour behaviour) {
      this.behaviour = behaviour;
    }

    public void execute() {
      if (Dice(100)) {
        ArrayList<BehaviourStep> plstSteps = new ArrayList();
        plstSteps.add(new Consequence_a0a0g0d_3(behaviour));
        behaviour.injectSteps(plstSteps);
      } else {
        ArrayList<BehaviourStep> plstSteps = new ArrayList();
        plstSteps.add(new Consequence_a0a0g0d_5(behaviour));
        behaviour.injectSteps(plstSteps);
      }
    }
  }
  public class Consequence_a0a0g0d_3 extends InstantBehaviourStep {
    /*package*/ Behaviour behaviour;
    public Consequence_a0a0g0d_3(Behaviour behaviour) {
      this.behaviour = behaviour;
    }

    public void execute() {
      ((patient) behaviour.getSignalTrigger().GetData("patient")).LIATFluBResult = "Negative";

    }
  }
  public class Consequence_a0a0g0d_4 extends InstantBehaviourStep {
    /*package*/ Behaviour behaviour;
    public Consequence_a0a0g0d_4(Behaviour behaviour) {
      this.behaviour = behaviour;
    }

    public void execute() {
      ((patient) behaviour.getSignalTrigger().GetData("patient")).LIATFluBResult = "Negative";

    }
  }
  public class Consequence_a0a0g0d_5 extends InstantBehaviourStep {
    /*package*/ Behaviour behaviour;
    public Consequence_a0a0g0d_5(Behaviour behaviour) {
      this.behaviour = behaviour;
    }

    public void execute() {
      ((patient) behaviour.getSignalTrigger().GetData("patient")).LIATFluBResult = "Positive";

    }
  }
  public class Consequence_a0a0g0d_6 extends InstantBehaviourStep {
    /*package*/ Behaviour behaviour;
    public Consequence_a0a0g0d_6(Behaviour behaviour) {
      this.behaviour = behaviour;
    }

    public void execute() {
      ((patient) behaviour.getSignalTrigger().GetData("patient")).LIATFluBResult = "Positive";

    }
  }
  public class Choice_h0d_1 extends InstantBehaviourStep {
    /*package*/ Behaviour behaviour;
    public Choice_h0d_1(Behaviour behaviour) {
      this.behaviour = behaviour;
    }

    public void execute() {
      if (((patient) behaviour.getSignalTrigger().GetData("patient")).LIATCOVIDResult == "Negative") {
        ArrayList<BehaviourStep> plstSteps = new ArrayList();
        plstSteps.add(new SendSignalAction_a0h0d(behaviour));
        behaviour.injectSteps(plstSteps);
      } else {
        ArrayList<BehaviourStep> plstSteps = new ArrayList();
        behaviour.injectSteps(plstSteps);
      }
    }
  }
  public class SendSignalAction_a0h0d extends BehaviourStep {
    /*package*/ Behaviour behaviour;

    public SendSignalAction_a0h0d(Behaviour behaviour) {
      this.behaviour = behaviour;
    }

    public void execute() {
      Board b = ReadBoard();
      Signal sendSignalTemp = new Signal();
      sendSignalTemp = new TakeabedTrigger_a_0Signal();
      sendSignalTemp.AddData("patient", behaviour.getSignalTrigger().GetData("patient"));

      b.PushMission(sendSignalTemp);
    }
  }
  public class SendSignalAction_a0h0d_1 extends BehaviourStep {
    /*package*/ Behaviour behaviour;

    public SendSignalAction_a0h0d_1(Behaviour behaviour) {
      this.behaviour = behaviour;
    }

    public void execute() {
      Board b = ReadBoard();
      Signal sendSignalTemp = new Signal();
      sendSignalTemp = new TakeabedTrigger_a_0Signal();
      sendSignalTemp.AddData("patient", behaviour.getSignalTrigger().GetData("patient"));

      b.PushMission(sendSignalTemp);
    }
  }
  public class Choice_i0d_1 extends InstantBehaviourStep {
    /*package*/ Behaviour behaviour;
    public Choice_i0d_1(Behaviour behaviour) {
      this.behaviour = behaviour;
    }

    public void execute() {
      if (((patient) behaviour.getSignalTrigger().GetData("patient")).LIATCOVIDResult == "Positive") {
        ArrayList<BehaviourStep> plstSteps = new ArrayList();
        plstSteps.add(new SendSignalAction_a0i0d(behaviour));
        behaviour.injectSteps(plstSteps);
      } else {
        ArrayList<BehaviourStep> plstSteps = new ArrayList();
        behaviour.injectSteps(plstSteps);
      }
    }
  }
  public class SendSignalAction_a0i0d extends BehaviourStep {
    /*package*/ Behaviour behaviour;

    public SendSignalAction_a0i0d(Behaviour behaviour) {
      this.behaviour = behaviour;
    }

    public void execute() {
      Board b = ReadBoard();
      Signal sendSignalTemp = new Signal();
      sendSignalTemp = new TakeabedTrigger_aSignal();
      sendSignalTemp.AddData("patient", behaviour.getSignalTrigger().GetData("patient"));

      b.PushMission(sendSignalTemp);
    }
  }
  public class SendSignalAction_a0i0d_1 extends BehaviourStep {
    /*package*/ Behaviour behaviour;

    public SendSignalAction_a0i0d_1(Behaviour behaviour) {
      this.behaviour = behaviour;
    }

    public void execute() {
      Board b = ReadBoard();
      Signal sendSignalTemp = new Signal();
      sendSignalTemp = new TakeabedTrigger_aSignal();
      sendSignalTemp.AddData("patient", behaviour.getSignalTrigger().GetData("patient"));

      b.PushMission(sendSignalTemp);
    }
  }
  public class StayAction_j0d_1 extends BehaviourStep {
    /*package*/ Behaviour behaviour;
    /*package*/ int timeExecuted = 0;
    public StayAction_j0d_1(Behaviour behaviour) {
      this.behaviour = behaviour;
    }

    public void execute() {
      // Do nothing 
      timeExecuted++;
    }

    public boolean finishCondition() {
      return timeExecuted == 1;
    }
  }
  public class MoveAction_a0e_3 extends BehaviourStep {
    /*package*/ Behaviour behaviour;
    /*package*/ Object target;
    /*package*/ Object concreteTarget;
    public MoveAction_a0e_3(Behaviour behaviour) {
      target = RespiratoryCubicle.getInstance();
      this.behaviour = behaviour;
    }

    public void execute() {
      if (concreteTarget == null) {
        if (target instanceof RoomType) {
          concreteTarget = SelectLocation(((RoomType) target));
        } else {
          concreteTarget = target;
        }
      }

      if (target instanceof RoomType) {
        if (EvaluateRoomChoice(((Room) concreteTarget)) == 0) {
          concreteTarget = SelectLocation(((RoomType) target));
        }
      }

      MoveTowards(concreteTarget);
    }

    public boolean finishCondition() {
      return ImAt(concreteTarget);
    }
  }
  public class OrderAction_b0e extends BehaviourStep {
    /*package*/ Behaviour behaviour;
    public OrderAction_b0e(Behaviour behaviour) {
      this.behaviour = behaviour;
    }

    public void execute() {
      Actor a = (Actor) behaviour.getSignalTrigger().GetData("patient");

      a.TakeOrder(new MoveToOrder().WithDestination(CubicleNurse.this));
    }
  }
  public class StayAction_c0e extends BehaviourStep {
    /*package*/ Behaviour behaviour;
    /*package*/ int timeExecuted = 0;
    public StayAction_c0e(Behaviour behaviour) {
      this.behaviour = behaviour;
    }

    public void execute() {
      // Do nothing 
      timeExecuted++;
    }

    public boolean finishCondition() {
      return timeExecuted == 5;
    }
  }
  public class StayAction_d0e extends PassiveBehaviourStep {
    /*package*/ Behaviour behaviour;
    /*package*/ int testingTime = Cepheid.getInstance().getProcessingTime();
    /*package*/ int timeExecuted = 0;
    public StayAction_d0e(Behaviour behaviour) {
      this.behaviour = behaviour;
    }

    public void execute() {
      // Do nothing 
      timeExecuted++;
    }

    public boolean finishCondition() {
      return timeExecuted == testingTime;
    }
  }
  public class Choice_e0e extends InstantBehaviourStep {
    /*package*/ Behaviour behaviour;
    public Choice_e0e(Behaviour behaviour) {
      this.behaviour = behaviour;
    }

    public void execute() {
      if ((((patient) behaviour.getSignalTrigger().GetData("patient")).COVIDInfectionStatus == "Symptomatic") || (((patient) behaviour.getSignalTrigger().GetData("patient")).COVIDInfectionStatus == "Asymptomatic")) {
        ArrayList<BehaviourStep> plstSteps = new ArrayList();
        plstSteps.add(new Choice_a0e0e(behaviour));
        behaviour.injectSteps(plstSteps);
      } else {
        ArrayList<BehaviourStep> plstSteps = new ArrayList();
        plstSteps.add(new Choice_a0e0e_3(behaviour));
        behaviour.injectSteps(plstSteps);
      }
    }
  }
  public class Choice_f0e extends InstantBehaviourStep {
    /*package*/ Behaviour behaviour;
    public Choice_f0e(Behaviour behaviour) {
      this.behaviour = behaviour;
    }

    public void execute() {
      if ((((patient) behaviour.getSignalTrigger().GetData("patient")).FluAInfectionStatus == "Symptomatic") || (((patient) behaviour.getSignalTrigger().GetData("patient")).FluAInfectionStatus == "Asymptomatic")) {
        ArrayList<BehaviourStep> plstSteps = new ArrayList();
        plstSteps.add(new Choice_a0f0e(behaviour));
        behaviour.injectSteps(plstSteps);
      } else {
        ArrayList<BehaviourStep> plstSteps = new ArrayList();
        plstSteps.add(new Choice_a0f0e_3(behaviour));
        behaviour.injectSteps(plstSteps);
      }
    }
  }
  public class Choice_g0e extends InstantBehaviourStep {
    /*package*/ Behaviour behaviour;
    public Choice_g0e(Behaviour behaviour) {
      this.behaviour = behaviour;
    }

    public void execute() {
      if ((((patient) behaviour.getSignalTrigger().GetData("patient")).FluBInfectionStatus == "Symptomatic") || (((patient) behaviour.getSignalTrigger().GetData("patient")).FluBInfectionStatus == "Asymptomatic")) {
        ArrayList<BehaviourStep> plstSteps = new ArrayList();
        plstSteps.add(new Choice_a0g0e(behaviour));
        behaviour.injectSteps(plstSteps);
      } else {
        ArrayList<BehaviourStep> plstSteps = new ArrayList();
        plstSteps.add(new Choice_a0g0e_3(behaviour));
        behaviour.injectSteps(plstSteps);
      }
    }
  }
  public class Choice_h0e extends InstantBehaviourStep {
    /*package*/ Behaviour behaviour;
    public Choice_h0e(Behaviour behaviour) {
      this.behaviour = behaviour;
    }

    public void execute() {
      if (((patient) behaviour.getSignalTrigger().GetData("patient")).CepheidCOVIDResult == "Negative") {
        ArrayList<BehaviourStep> plstSteps = new ArrayList();
        plstSteps.add(new SendSignalAction_a0h0e(behaviour));
        behaviour.injectSteps(plstSteps);
      } else {
        ArrayList<BehaviourStep> plstSteps = new ArrayList();
        behaviour.injectSteps(plstSteps);
      }
    }
  }
  public class Choice_i0e extends InstantBehaviourStep {
    /*package*/ Behaviour behaviour;
    public Choice_i0e(Behaviour behaviour) {
      this.behaviour = behaviour;
    }

    public void execute() {
      if (((patient) behaviour.getSignalTrigger().GetData("patient")).CepheidCOVIDResult == "Positive") {
        ArrayList<BehaviourStep> plstSteps = new ArrayList();
        plstSteps.add(new SendSignalAction_a0i0e(behaviour));
        behaviour.injectSteps(plstSteps);
      } else {
        ArrayList<BehaviourStep> plstSteps = new ArrayList();
        behaviour.injectSteps(plstSteps);
      }
    }
  }
  public class StayAction_j0e extends BehaviourStep {
    /*package*/ Behaviour behaviour;
    /*package*/ int timeExecuted = 0;
    public StayAction_j0e(Behaviour behaviour) {
      this.behaviour = behaviour;
    }

    public void execute() {
      // Do nothing 
      timeExecuted++;
    }

    public boolean finishCondition() {
      return timeExecuted == 1;
    }
  }
  public class MoveAction_a0e_9 extends BehaviourStep {
    /*package*/ Behaviour behaviour;
    /*package*/ Object target;
    /*package*/ Object concreteTarget;
    public MoveAction_a0e_9(Behaviour behaviour) {
      target = RespiratoryCubicle.getInstance();
      this.behaviour = behaviour;
    }

    public void execute() {
      if (concreteTarget == null) {
        if (target instanceof RoomType) {
          concreteTarget = SelectLocation(((RoomType) target));
        } else {
          concreteTarget = target;
        }
      }

      if (target instanceof RoomType) {
        if (EvaluateRoomChoice(((Room) concreteTarget)) == 0) {
          concreteTarget = SelectLocation(((RoomType) target));
        }
      }

      MoveTowards(concreteTarget);
    }

    public boolean finishCondition() {
      return ImAt(concreteTarget);
    }
  }
  public class OrderAction_b0e_5 extends BehaviourStep {
    /*package*/ Behaviour behaviour;
    public OrderAction_b0e_5(Behaviour behaviour) {
      this.behaviour = behaviour;
    }

    public void execute() {
      Actor a = (Actor) behaviour.getSignalTrigger().GetData("patient");

      a.TakeOrder(new MoveToOrder().WithDestination(CubicleNurse.this));
    }
  }
  public class StayAction_c0e_5 extends BehaviourStep {
    /*package*/ Behaviour behaviour;
    /*package*/ int timeExecuted = 0;
    public StayAction_c0e_5(Behaviour behaviour) {
      this.behaviour = behaviour;
    }

    public void execute() {
      // Do nothing 
      timeExecuted++;
    }

    public boolean finishCondition() {
      return timeExecuted == 5;
    }
  }
  public class StayAction_d0e_1 extends PassiveBehaviourStep {
    /*package*/ Behaviour behaviour;
    /*package*/ int testingTime = Cepheid.getInstance().getProcessingTime();
    /*package*/ int timeExecuted = 0;
    public StayAction_d0e_1(Behaviour behaviour) {
      this.behaviour = behaviour;
    }

    public void execute() {
      // Do nothing 
      timeExecuted++;
    }

    public boolean finishCondition() {
      return timeExecuted == testingTime;
    }
  }
  public class Choice_e0e_1 extends InstantBehaviourStep {
    /*package*/ Behaviour behaviour;
    public Choice_e0e_1(Behaviour behaviour) {
      this.behaviour = behaviour;
    }

    public void execute() {
      if ((((patient) behaviour.getSignalTrigger().GetData("patient")).COVIDInfectionStatus == "Symptomatic") || (((patient) behaviour.getSignalTrigger().GetData("patient")).COVIDInfectionStatus == "Asymptomatic")) {
        ArrayList<BehaviourStep> plstSteps = new ArrayList();
        plstSteps.add(new Choice_a0e0e(behaviour));
        behaviour.injectSteps(plstSteps);
      } else {
        ArrayList<BehaviourStep> plstSteps = new ArrayList();
        plstSteps.add(new Choice_a0e0e_3(behaviour));
        behaviour.injectSteps(plstSteps);
      }
    }
  }
  public class Choice_a0e0e extends InstantBehaviourStep {
    /*package*/ Behaviour behaviour;
    public Choice_a0e0e(Behaviour behaviour) {
      this.behaviour = behaviour;
    }

    public void execute() {
      if (Dice(100)) {
        ArrayList<BehaviourStep> plstSteps = new ArrayList();
        plstSteps.add(new Consequence_a0a0e0e(behaviour));
        behaviour.injectSteps(plstSteps);
      } else {
        ArrayList<BehaviourStep> plstSteps = new ArrayList();
        plstSteps.add(new Consequence_a0a0e0e_1(behaviour));
        behaviour.injectSteps(plstSteps);
      }
    }
  }
  public class Choice_a0e0e_1 extends InstantBehaviourStep {
    /*package*/ Behaviour behaviour;
    public Choice_a0e0e_1(Behaviour behaviour) {
      this.behaviour = behaviour;
    }

    public void execute() {
      if (Dice(100)) {
        ArrayList<BehaviourStep> plstSteps = new ArrayList();
        plstSteps.add(new Consequence_a0a0e0e(behaviour));
        behaviour.injectSteps(plstSteps);
      } else {
        ArrayList<BehaviourStep> plstSteps = new ArrayList();
        plstSteps.add(new Consequence_a0a0e0e_1(behaviour));
        behaviour.injectSteps(plstSteps);
      }
    }
  }
  public class Consequence_a0a0e0e extends InstantBehaviourStep {
    /*package*/ Behaviour behaviour;
    public Consequence_a0a0e0e(Behaviour behaviour) {
      this.behaviour = behaviour;
    }

    public void execute() {
      ((patient) behaviour.getSignalTrigger().GetData("patient")).CepheidCOVIDResult = "Positive";

    }
  }
  public class Consequence_a0a0e0e_0 extends InstantBehaviourStep {
    /*package*/ Behaviour behaviour;
    public Consequence_a0a0e0e_0(Behaviour behaviour) {
      this.behaviour = behaviour;
    }

    public void execute() {
      ((patient) behaviour.getSignalTrigger().GetData("patient")).CepheidCOVIDResult = "Positive";

    }
  }
  public class Consequence_a0a0e0e_1 extends InstantBehaviourStep {
    /*package*/ Behaviour behaviour;
    public Consequence_a0a0e0e_1(Behaviour behaviour) {
      this.behaviour = behaviour;
    }

    public void execute() {
      ((patient) behaviour.getSignalTrigger().GetData("patient")).CepheidCOVIDResult = "Negative";

    }
  }
  public class Consequence_a0a0e0e_2 extends InstantBehaviourStep {
    /*package*/ Behaviour behaviour;
    public Consequence_a0a0e0e_2(Behaviour behaviour) {
      this.behaviour = behaviour;
    }

    public void execute() {
      ((patient) behaviour.getSignalTrigger().GetData("patient")).CepheidCOVIDResult = "Negative";

    }
  }
  public class Choice_a0e0e_3 extends InstantBehaviourStep {
    /*package*/ Behaviour behaviour;
    public Choice_a0e0e_3(Behaviour behaviour) {
      this.behaviour = behaviour;
    }

    public void execute() {
      if (Dice(100)) {
        ArrayList<BehaviourStep> plstSteps = new ArrayList();
        plstSteps.add(new Consequence_a0a0e0e_3(behaviour));
        behaviour.injectSteps(plstSteps);
      } else {
        ArrayList<BehaviourStep> plstSteps = new ArrayList();
        plstSteps.add(new Consequence_a0a0e0e_5(behaviour));
        behaviour.injectSteps(plstSteps);
      }
    }
  }
  public class Choice_a0e0e_5 extends InstantBehaviourStep {
    /*package*/ Behaviour behaviour;
    public Choice_a0e0e_5(Behaviour behaviour) {
      this.behaviour = behaviour;
    }

    public void execute() {
      if (Dice(100)) {
        ArrayList<BehaviourStep> plstSteps = new ArrayList();
        plstSteps.add(new Consequence_a0a0e0e_3(behaviour));
        behaviour.injectSteps(plstSteps);
      } else {
        ArrayList<BehaviourStep> plstSteps = new ArrayList();
        plstSteps.add(new Consequence_a0a0e0e_5(behaviour));
        behaviour.injectSteps(plstSteps);
      }
    }
  }
  public class Consequence_a0a0e0e_3 extends InstantBehaviourStep {
    /*package*/ Behaviour behaviour;
    public Consequence_a0a0e0e_3(Behaviour behaviour) {
      this.behaviour = behaviour;
    }

    public void execute() {
      ((patient) behaviour.getSignalTrigger().GetData("patient")).CepheidCOVIDResult = "Negative";

    }
  }
  public class Consequence_a0a0e0e_4 extends InstantBehaviourStep {
    /*package*/ Behaviour behaviour;
    public Consequence_a0a0e0e_4(Behaviour behaviour) {
      this.behaviour = behaviour;
    }

    public void execute() {
      ((patient) behaviour.getSignalTrigger().GetData("patient")).CepheidCOVIDResult = "Negative";

    }
  }
  public class Consequence_a0a0e0e_5 extends InstantBehaviourStep {
    /*package*/ Behaviour behaviour;
    public Consequence_a0a0e0e_5(Behaviour behaviour) {
      this.behaviour = behaviour;
    }

    public void execute() {
      ((patient) behaviour.getSignalTrigger().GetData("patient")).CepheidCOVIDResult = "Positive";

    }
  }
  public class Consequence_a0a0e0e_6 extends InstantBehaviourStep {
    /*package*/ Behaviour behaviour;
    public Consequence_a0a0e0e_6(Behaviour behaviour) {
      this.behaviour = behaviour;
    }

    public void execute() {
      ((patient) behaviour.getSignalTrigger().GetData("patient")).CepheidCOVIDResult = "Positive";

    }
  }
  public class Choice_f0e_1 extends InstantBehaviourStep {
    /*package*/ Behaviour behaviour;
    public Choice_f0e_1(Behaviour behaviour) {
      this.behaviour = behaviour;
    }

    public void execute() {
      if ((((patient) behaviour.getSignalTrigger().GetData("patient")).FluAInfectionStatus == "Symptomatic") || (((patient) behaviour.getSignalTrigger().GetData("patient")).FluAInfectionStatus == "Asymptomatic")) {
        ArrayList<BehaviourStep> plstSteps = new ArrayList();
        plstSteps.add(new Choice_a0f0e(behaviour));
        behaviour.injectSteps(plstSteps);
      } else {
        ArrayList<BehaviourStep> plstSteps = new ArrayList();
        plstSteps.add(new Choice_a0f0e_3(behaviour));
        behaviour.injectSteps(plstSteps);
      }
    }
  }
  public class Choice_a0f0e extends InstantBehaviourStep {
    /*package*/ Behaviour behaviour;
    public Choice_a0f0e(Behaviour behaviour) {
      this.behaviour = behaviour;
    }

    public void execute() {
      if (Dice(100)) {
        ArrayList<BehaviourStep> plstSteps = new ArrayList();
        plstSteps.add(new Consequence_a0a0f0e(behaviour));
        behaviour.injectSteps(plstSteps);
      } else {
        ArrayList<BehaviourStep> plstSteps = new ArrayList();
        plstSteps.add(new Consequence_a0a0f0e_1(behaviour));
        behaviour.injectSteps(plstSteps);
      }
    }
  }
  public class Choice_a0f0e_1 extends InstantBehaviourStep {
    /*package*/ Behaviour behaviour;
    public Choice_a0f0e_1(Behaviour behaviour) {
      this.behaviour = behaviour;
    }

    public void execute() {
      if (Dice(100)) {
        ArrayList<BehaviourStep> plstSteps = new ArrayList();
        plstSteps.add(new Consequence_a0a0f0e(behaviour));
        behaviour.injectSteps(plstSteps);
      } else {
        ArrayList<BehaviourStep> plstSteps = new ArrayList();
        plstSteps.add(new Consequence_a0a0f0e_1(behaviour));
        behaviour.injectSteps(plstSteps);
      }
    }
  }
  public class Consequence_a0a0f0e extends InstantBehaviourStep {
    /*package*/ Behaviour behaviour;
    public Consequence_a0a0f0e(Behaviour behaviour) {
      this.behaviour = behaviour;
    }

    public void execute() {
      ((patient) behaviour.getSignalTrigger().GetData("patient")).CepheidFluAResult = "Positive";

    }
  }
  public class Consequence_a0a0f0e_0 extends InstantBehaviourStep {
    /*package*/ Behaviour behaviour;
    public Consequence_a0a0f0e_0(Behaviour behaviour) {
      this.behaviour = behaviour;
    }

    public void execute() {
      ((patient) behaviour.getSignalTrigger().GetData("patient")).CepheidFluAResult = "Positive";

    }
  }
  public class Consequence_a0a0f0e_1 extends InstantBehaviourStep {
    /*package*/ Behaviour behaviour;
    public Consequence_a0a0f0e_1(Behaviour behaviour) {
      this.behaviour = behaviour;
    }

    public void execute() {
      ((patient) behaviour.getSignalTrigger().GetData("patient")).CepheidFluAResult = "Negative";

    }
  }
  public class Consequence_a0a0f0e_2 extends InstantBehaviourStep {
    /*package*/ Behaviour behaviour;
    public Consequence_a0a0f0e_2(Behaviour behaviour) {
      this.behaviour = behaviour;
    }

    public void execute() {
      ((patient) behaviour.getSignalTrigger().GetData("patient")).CepheidFluAResult = "Negative";

    }
  }
  public class Choice_a0f0e_3 extends InstantBehaviourStep {
    /*package*/ Behaviour behaviour;
    public Choice_a0f0e_3(Behaviour behaviour) {
      this.behaviour = behaviour;
    }

    public void execute() {
      if (Dice(100)) {
        ArrayList<BehaviourStep> plstSteps = new ArrayList();
        plstSteps.add(new Consequence_a0a0f0e_3(behaviour));
        behaviour.injectSteps(plstSteps);
      } else {
        ArrayList<BehaviourStep> plstSteps = new ArrayList();
        plstSteps.add(new Consequence_a0a0f0e_5(behaviour));
        behaviour.injectSteps(plstSteps);
      }
    }
  }
  public class Choice_a0f0e_5 extends InstantBehaviourStep {
    /*package*/ Behaviour behaviour;
    public Choice_a0f0e_5(Behaviour behaviour) {
      this.behaviour = behaviour;
    }

    public void execute() {
      if (Dice(100)) {
        ArrayList<BehaviourStep> plstSteps = new ArrayList();
        plstSteps.add(new Consequence_a0a0f0e_3(behaviour));
        behaviour.injectSteps(plstSteps);
      } else {
        ArrayList<BehaviourStep> plstSteps = new ArrayList();
        plstSteps.add(new Consequence_a0a0f0e_5(behaviour));
        behaviour.injectSteps(plstSteps);
      }
    }
  }
  public class Consequence_a0a0f0e_3 extends InstantBehaviourStep {
    /*package*/ Behaviour behaviour;
    public Consequence_a0a0f0e_3(Behaviour behaviour) {
      this.behaviour = behaviour;
    }

    public void execute() {
      ((patient) behaviour.getSignalTrigger().GetData("patient")).CepheidFluAResult = "Negative";

    }
  }
  public class Consequence_a0a0f0e_4 extends InstantBehaviourStep {
    /*package*/ Behaviour behaviour;
    public Consequence_a0a0f0e_4(Behaviour behaviour) {
      this.behaviour = behaviour;
    }

    public void execute() {
      ((patient) behaviour.getSignalTrigger().GetData("patient")).CepheidFluAResult = "Negative";

    }
  }
  public class Consequence_a0a0f0e_5 extends InstantBehaviourStep {
    /*package*/ Behaviour behaviour;
    public Consequence_a0a0f0e_5(Behaviour behaviour) {
      this.behaviour = behaviour;
    }

    public void execute() {
      ((patient) behaviour.getSignalTrigger().GetData("patient")).CepheidFluAResult = "Positive";

    }
  }
  public class Consequence_a0a0f0e_6 extends InstantBehaviourStep {
    /*package*/ Behaviour behaviour;
    public Consequence_a0a0f0e_6(Behaviour behaviour) {
      this.behaviour = behaviour;
    }

    public void execute() {
      ((patient) behaviour.getSignalTrigger().GetData("patient")).CepheidFluAResult = "Positive";

    }
  }
  public class Choice_g0e_1 extends InstantBehaviourStep {
    /*package*/ Behaviour behaviour;
    public Choice_g0e_1(Behaviour behaviour) {
      this.behaviour = behaviour;
    }

    public void execute() {
      if ((((patient) behaviour.getSignalTrigger().GetData("patient")).FluBInfectionStatus == "Symptomatic") || (((patient) behaviour.getSignalTrigger().GetData("patient")).FluBInfectionStatus == "Asymptomatic")) {
        ArrayList<BehaviourStep> plstSteps = new ArrayList();
        plstSteps.add(new Choice_a0g0e(behaviour));
        behaviour.injectSteps(plstSteps);
      } else {
        ArrayList<BehaviourStep> plstSteps = new ArrayList();
        plstSteps.add(new Choice_a0g0e_3(behaviour));
        behaviour.injectSteps(plstSteps);
      }
    }
  }
  public class Choice_a0g0e extends InstantBehaviourStep {
    /*package*/ Behaviour behaviour;
    public Choice_a0g0e(Behaviour behaviour) {
      this.behaviour = behaviour;
    }

    public void execute() {
      if (Dice(100)) {
        ArrayList<BehaviourStep> plstSteps = new ArrayList();
        plstSteps.add(new Consequence_a0a0g0e(behaviour));
        behaviour.injectSteps(plstSteps);
      } else {
        ArrayList<BehaviourStep> plstSteps = new ArrayList();
        plstSteps.add(new Consequence_a0a0g0e_1(behaviour));
        behaviour.injectSteps(plstSteps);
      }
    }
  }
  public class Choice_a0g0e_1 extends InstantBehaviourStep {
    /*package*/ Behaviour behaviour;
    public Choice_a0g0e_1(Behaviour behaviour) {
      this.behaviour = behaviour;
    }

    public void execute() {
      if (Dice(100)) {
        ArrayList<BehaviourStep> plstSteps = new ArrayList();
        plstSteps.add(new Consequence_a0a0g0e(behaviour));
        behaviour.injectSteps(plstSteps);
      } else {
        ArrayList<BehaviourStep> plstSteps = new ArrayList();
        plstSteps.add(new Consequence_a0a0g0e_1(behaviour));
        behaviour.injectSteps(plstSteps);
      }
    }
  }
  public class Consequence_a0a0g0e extends InstantBehaviourStep {
    /*package*/ Behaviour behaviour;
    public Consequence_a0a0g0e(Behaviour behaviour) {
      this.behaviour = behaviour;
    }

    public void execute() {
      ((patient) behaviour.getSignalTrigger().GetData("patient")).CepheidFluBResult = "Positive";

    }
  }
  public class Consequence_a0a0g0e_0 extends InstantBehaviourStep {
    /*package*/ Behaviour behaviour;
    public Consequence_a0a0g0e_0(Behaviour behaviour) {
      this.behaviour = behaviour;
    }

    public void execute() {
      ((patient) behaviour.getSignalTrigger().GetData("patient")).CepheidFluBResult = "Positive";

    }
  }
  public class Consequence_a0a0g0e_1 extends InstantBehaviourStep {
    /*package*/ Behaviour behaviour;
    public Consequence_a0a0g0e_1(Behaviour behaviour) {
      this.behaviour = behaviour;
    }

    public void execute() {
      ((patient) behaviour.getSignalTrigger().GetData("patient")).CepheidFluBResult = "Negative";

    }
  }
  public class Consequence_a0a0g0e_2 extends InstantBehaviourStep {
    /*package*/ Behaviour behaviour;
    public Consequence_a0a0g0e_2(Behaviour behaviour) {
      this.behaviour = behaviour;
    }

    public void execute() {
      ((patient) behaviour.getSignalTrigger().GetData("patient")).CepheidFluBResult = "Negative";

    }
  }
  public class Choice_a0g0e_3 extends InstantBehaviourStep {
    /*package*/ Behaviour behaviour;
    public Choice_a0g0e_3(Behaviour behaviour) {
      this.behaviour = behaviour;
    }

    public void execute() {
      if (Dice(100)) {
        ArrayList<BehaviourStep> plstSteps = new ArrayList();
        plstSteps.add(new Consequence_a0a0g0e_3(behaviour));
        behaviour.injectSteps(plstSteps);
      } else {
        ArrayList<BehaviourStep> plstSteps = new ArrayList();
        plstSteps.add(new Consequence_a0a0g0e_5(behaviour));
        behaviour.injectSteps(plstSteps);
      }
    }
  }
  public class Choice_a0g0e_5 extends InstantBehaviourStep {
    /*package*/ Behaviour behaviour;
    public Choice_a0g0e_5(Behaviour behaviour) {
      this.behaviour = behaviour;
    }

    public void execute() {
      if (Dice(100)) {
        ArrayList<BehaviourStep> plstSteps = new ArrayList();
        plstSteps.add(new Consequence_a0a0g0e_3(behaviour));
        behaviour.injectSteps(plstSteps);
      } else {
        ArrayList<BehaviourStep> plstSteps = new ArrayList();
        plstSteps.add(new Consequence_a0a0g0e_5(behaviour));
        behaviour.injectSteps(plstSteps);
      }
    }
  }
  public class Consequence_a0a0g0e_3 extends InstantBehaviourStep {
    /*package*/ Behaviour behaviour;
    public Consequence_a0a0g0e_3(Behaviour behaviour) {
      this.behaviour = behaviour;
    }

    public void execute() {
      ((patient) behaviour.getSignalTrigger().GetData("patient")).CepheidFluBResult = "Negative";

    }
  }
  public class Consequence_a0a0g0e_4 extends InstantBehaviourStep {
    /*package*/ Behaviour behaviour;
    public Consequence_a0a0g0e_4(Behaviour behaviour) {
      this.behaviour = behaviour;
    }

    public void execute() {
      ((patient) behaviour.getSignalTrigger().GetData("patient")).CepheidFluBResult = "Negative";

    }
  }
  public class Consequence_a0a0g0e_5 extends InstantBehaviourStep {
    /*package*/ Behaviour behaviour;
    public Consequence_a0a0g0e_5(Behaviour behaviour) {
      this.behaviour = behaviour;
    }

    public void execute() {
      ((patient) behaviour.getSignalTrigger().GetData("patient")).CepheidFluBResult = "Positive";

    }
  }
  public class Consequence_a0a0g0e_6 extends InstantBehaviourStep {
    /*package*/ Behaviour behaviour;
    public Consequence_a0a0g0e_6(Behaviour behaviour) {
      this.behaviour = behaviour;
    }

    public void execute() {
      ((patient) behaviour.getSignalTrigger().GetData("patient")).CepheidFluBResult = "Positive";

    }
  }
  public class Choice_h0e_1 extends InstantBehaviourStep {
    /*package*/ Behaviour behaviour;
    public Choice_h0e_1(Behaviour behaviour) {
      this.behaviour = behaviour;
    }

    public void execute() {
      if (((patient) behaviour.getSignalTrigger().GetData("patient")).CepheidCOVIDResult == "Negative") {
        ArrayList<BehaviourStep> plstSteps = new ArrayList();
        plstSteps.add(new SendSignalAction_a0h0e(behaviour));
        behaviour.injectSteps(plstSteps);
      } else {
        ArrayList<BehaviourStep> plstSteps = new ArrayList();
        behaviour.injectSteps(plstSteps);
      }
    }
  }
  public class SendSignalAction_a0h0e extends BehaviourStep {
    /*package*/ Behaviour behaviour;

    public SendSignalAction_a0h0e(Behaviour behaviour) {
      this.behaviour = behaviour;
    }

    public void execute() {
      Board b = ReadBoard();
      Signal sendSignalTemp = new Signal();
      sendSignalTemp = new TakeabedTrigger_a_0Signal();
      sendSignalTemp.AddData("patient", behaviour.getSignalTrigger().GetData("patient"));

      b.PushMission(sendSignalTemp);
    }
  }
  public class SendSignalAction_a0h0e_1 extends BehaviourStep {
    /*package*/ Behaviour behaviour;

    public SendSignalAction_a0h0e_1(Behaviour behaviour) {
      this.behaviour = behaviour;
    }

    public void execute() {
      Board b = ReadBoard();
      Signal sendSignalTemp = new Signal();
      sendSignalTemp = new TakeabedTrigger_a_0Signal();
      sendSignalTemp.AddData("patient", behaviour.getSignalTrigger().GetData("patient"));

      b.PushMission(sendSignalTemp);
    }
  }
  public class Choice_i0e_1 extends InstantBehaviourStep {
    /*package*/ Behaviour behaviour;
    public Choice_i0e_1(Behaviour behaviour) {
      this.behaviour = behaviour;
    }

    public void execute() {
      if (((patient) behaviour.getSignalTrigger().GetData("patient")).CepheidCOVIDResult == "Positive") {
        ArrayList<BehaviourStep> plstSteps = new ArrayList();
        plstSteps.add(new SendSignalAction_a0i0e(behaviour));
        behaviour.injectSteps(plstSteps);
      } else {
        ArrayList<BehaviourStep> plstSteps = new ArrayList();
        behaviour.injectSteps(plstSteps);
      }
    }
  }
  public class SendSignalAction_a0i0e extends BehaviourStep {
    /*package*/ Behaviour behaviour;

    public SendSignalAction_a0i0e(Behaviour behaviour) {
      this.behaviour = behaviour;
    }

    public void execute() {
      Board b = ReadBoard();
      Signal sendSignalTemp = new Signal();
      sendSignalTemp = new TakeabedTrigger_aSignal();
      sendSignalTemp.AddData("patient", behaviour.getSignalTrigger().GetData("patient"));

      b.PushMission(sendSignalTemp);
    }
  }
  public class SendSignalAction_a0i0e_1 extends BehaviourStep {
    /*package*/ Behaviour behaviour;

    public SendSignalAction_a0i0e_1(Behaviour behaviour) {
      this.behaviour = behaviour;
    }

    public void execute() {
      Board b = ReadBoard();
      Signal sendSignalTemp = new Signal();
      sendSignalTemp = new TakeabedTrigger_aSignal();
      sendSignalTemp.AddData("patient", behaviour.getSignalTrigger().GetData("patient"));

      b.PushMission(sendSignalTemp);
    }
  }
  public class StayAction_j0e_1 extends BehaviourStep {
    /*package*/ Behaviour behaviour;
    /*package*/ int timeExecuted = 0;
    public StayAction_j0e_1(Behaviour behaviour) {
      this.behaviour = behaviour;
    }

    public void execute() {
      // Do nothing 
      timeExecuted++;
    }

    public boolean finishCondition() {
      return timeExecuted == 1;
    }
  }
  public class OrderAction_a0f extends BehaviourStep {
    /*package*/ Behaviour behaviour;
    public OrderAction_a0f(Behaviour behaviour) {
      this.behaviour = behaviour;
    }

    public void execute() {
      Actor a = (Actor) behaviour.getSignalTrigger().GetData("patient");

      a.TakeOrder(new MoveToOrder().WithDestination(CubicleNurse.this));
    }
  }
  public class StayAction_b0f_7 extends BehaviourStep {
    /*package*/ Behaviour behaviour;
    /*package*/ int timeExecuted = 0;
    public StayAction_b0f_7(Behaviour behaviour) {
      this.behaviour = behaviour;
    }

    public void execute() {
      // Do nothing 
      timeExecuted++;
    }

    public boolean finishCondition() {
      return timeExecuted == 2;
    }
  }
  public class Choice_c0f extends InstantBehaviourStep {
    /*package*/ Behaviour behaviour;
    public Choice_c0f(Behaviour behaviour) {
      this.behaviour = behaviour;
    }

    public void execute() {
      if (((patient) behaviour.getSignalTrigger().GetData("patient")).RecentCovidContact == "No") {
        ArrayList<BehaviourStep> plstSteps = new ArrayList();
        plstSteps.add(new SendSignalAction_a0c0f(behaviour));
        behaviour.injectSteps(plstSteps);
      } else {
        ArrayList<BehaviourStep> plstSteps = new ArrayList();
        behaviour.injectSteps(plstSteps);
      }
    }
  }
  public class Choice_d0f_7 extends InstantBehaviourStep {
    /*package*/ Behaviour behaviour;
    public Choice_d0f_7(Behaviour behaviour) {
      this.behaviour = behaviour;
    }

    public void execute() {
      if (((patient) behaviour.getSignalTrigger().GetData("patient")).RecentCovidContact == "Yes") {
        ArrayList<BehaviourStep> plstSteps = new ArrayList();
        plstSteps.add(new SendSignalAction_a0d0f(behaviour));
        behaviour.injectSteps(plstSteps);
      } else {
        ArrayList<BehaviourStep> plstSteps = new ArrayList();
        behaviour.injectSteps(plstSteps);
      }
    }
  }
  public class StayAction_e0f extends BehaviourStep {
    /*package*/ Behaviour behaviour;
    /*package*/ int timeExecuted = 0;
    public StayAction_e0f(Behaviour behaviour) {
      this.behaviour = behaviour;
    }

    public void execute() {
      // Do nothing 
      timeExecuted++;
    }

    public boolean finishCondition() {
      return timeExecuted == 1;
    }
  }
  public class OrderAction_a0f_1 extends BehaviourStep {
    /*package*/ Behaviour behaviour;
    public OrderAction_a0f_1(Behaviour behaviour) {
      this.behaviour = behaviour;
    }

    public void execute() {
      Actor a = (Actor) behaviour.getSignalTrigger().GetData("patient");

      a.TakeOrder(new MoveToOrder().WithDestination(CubicleNurse.this));
    }
  }
  public class StayAction_b0f_9 extends BehaviourStep {
    /*package*/ Behaviour behaviour;
    /*package*/ int timeExecuted = 0;
    public StayAction_b0f_9(Behaviour behaviour) {
      this.behaviour = behaviour;
    }

    public void execute() {
      // Do nothing 
      timeExecuted++;
    }

    public boolean finishCondition() {
      return timeExecuted == 2;
    }
  }
  public class Choice_c0f_1 extends InstantBehaviourStep {
    /*package*/ Behaviour behaviour;
    public Choice_c0f_1(Behaviour behaviour) {
      this.behaviour = behaviour;
    }

    public void execute() {
      if (((patient) behaviour.getSignalTrigger().GetData("patient")).RecentCovidContact == "No") {
        ArrayList<BehaviourStep> plstSteps = new ArrayList();
        plstSteps.add(new SendSignalAction_a0c0f(behaviour));
        behaviour.injectSteps(plstSteps);
      } else {
        ArrayList<BehaviourStep> plstSteps = new ArrayList();
        behaviour.injectSteps(plstSteps);
      }
    }
  }
  public class SendSignalAction_a0c0f extends BehaviourStep {
    /*package*/ Behaviour behaviour;

    public SendSignalAction_a0c0f(Behaviour behaviour) {
      this.behaviour = behaviour;
    }

    public void execute() {
      Board b = ReadBoard();
      Signal sendSignalTemp = new Signal();
      sendSignalTemp = new TakeabedTrigger_a_2Signal();
      sendSignalTemp.AddData("patient", behaviour.getSignalTrigger().GetData("patient"));

      b.PushMission(sendSignalTemp);
    }
  }
  public class SendSignalAction_a0c0f_1 extends BehaviourStep {
    /*package*/ Behaviour behaviour;

    public SendSignalAction_a0c0f_1(Behaviour behaviour) {
      this.behaviour = behaviour;
    }

    public void execute() {
      Board b = ReadBoard();
      Signal sendSignalTemp = new Signal();
      sendSignalTemp = new TakeabedTrigger_a_2Signal();
      sendSignalTemp.AddData("patient", behaviour.getSignalTrigger().GetData("patient"));

      b.PushMission(sendSignalTemp);
    }
  }
  public class Choice_d0f_9 extends InstantBehaviourStep {
    /*package*/ Behaviour behaviour;
    public Choice_d0f_9(Behaviour behaviour) {
      this.behaviour = behaviour;
    }

    public void execute() {
      if (((patient) behaviour.getSignalTrigger().GetData("patient")).RecentCovidContact == "Yes") {
        ArrayList<BehaviourStep> plstSteps = new ArrayList();
        plstSteps.add(new SendSignalAction_a0d0f(behaviour));
        behaviour.injectSteps(plstSteps);
      } else {
        ArrayList<BehaviourStep> plstSteps = new ArrayList();
        behaviour.injectSteps(plstSteps);
      }
    }
  }
  public class SendSignalAction_a0d0f extends BehaviourStep {
    /*package*/ Behaviour behaviour;

    public SendSignalAction_a0d0f(Behaviour behaviour) {
      this.behaviour = behaviour;
    }

    public void execute() {
      Board b = ReadBoard();
      Signal sendSignalTemp = new Signal();
      sendSignalTemp = new TakeabedTrigger_a_1Signal();
      sendSignalTemp.AddData("patient", behaviour.getSignalTrigger().GetData("patient"));

      b.PushMission(sendSignalTemp);
    }
  }
  public class SendSignalAction_a0d0f_1 extends BehaviourStep {
    /*package*/ Behaviour behaviour;

    public SendSignalAction_a0d0f_1(Behaviour behaviour) {
      this.behaviour = behaviour;
    }

    public void execute() {
      Board b = ReadBoard();
      Signal sendSignalTemp = new Signal();
      sendSignalTemp = new TakeabedTrigger_a_1Signal();
      sendSignalTemp.AddData("patient", behaviour.getSignalTrigger().GetData("patient"));

      b.PushMission(sendSignalTemp);
    }
  }
  public class StayAction_e0f_1 extends BehaviourStep {
    /*package*/ Behaviour behaviour;
    /*package*/ int timeExecuted = 0;
    public StayAction_e0f_1(Behaviour behaviour) {
      this.behaviour = behaviour;
    }

    public void execute() {
      // Do nothing 
      timeExecuted++;
    }

    public boolean finishCondition() {
      return timeExecuted == 1;
    }
  }


  public void InitLateralFlowTest_a(Signal s) {
    behaviourBuilder.setSignalTrigger(s);
    ArrayList<BehaviourStep> plstSteps = new ArrayList();
    plstSteps.add(new StayAction_a0a_3(behaviourBuilder));
    plstSteps.add(new Choice_b0a_3(behaviourBuilder));
    plstSteps.add(new Choice_c0a_3(behaviourBuilder));
    plstSteps.add(new StayAction_d0a_3(behaviourBuilder));
    behaviourBuilder.setSteps(plstSteps);

    Signal sendSignalTemp = new Signal();

  }
  public void InitCheckSymptoms_b(Signal s) {
    behaviourBuilder.setSignalTrigger(s);
    ArrayList<BehaviourStep> plstSteps = new ArrayList();
    plstSteps.add(new OrderAction_a0b(behaviourBuilder));
    plstSteps.add(new StayAction_b0b(behaviourBuilder));
    plstSteps.add(new Choice_c0b(behaviourBuilder));
    plstSteps.add(new Choice_d0b(behaviourBuilder));
    plstSteps.add(new StayAction_e0b_3(behaviourBuilder));
    behaviourBuilder.setSteps(plstSteps);

    Signal sendSignalTemp = new Signal();

  }
  public void InitCheckSymptoms_c(Signal s) {
    behaviourBuilder.setSignalTrigger(s);
    ArrayList<BehaviourStep> plstSteps = new ArrayList();
    plstSteps.add(new OrderAction_a0c(behaviourBuilder));
    plstSteps.add(new StayAction_b0c(behaviourBuilder));
    plstSteps.add(new Choice_c0c(behaviourBuilder));
    plstSteps.add(new Choice_d0c(behaviourBuilder));
    plstSteps.add(new StayAction_e0c(behaviourBuilder));
    behaviourBuilder.setSteps(plstSteps);

    Signal sendSignalTemp = new Signal();

  }
  public void InitLIAT_d(Signal s) {
    behaviourBuilder.setSignalTrigger(s);
    ArrayList<BehaviourStep> plstSteps = new ArrayList();
    plstSteps.add(new MoveAction_a0d_1(behaviourBuilder));
    plstSteps.add(new OrderAction_b0d(behaviourBuilder));
    plstSteps.add(new StayAction_c0d_1(behaviourBuilder));
    plstSteps.add(new StayAction_d0d(behaviourBuilder));
    plstSteps.add(new Choice_e0d(behaviourBuilder));
    plstSteps.add(new Choice_f0d(behaviourBuilder));
    plstSteps.add(new Choice_g0d(behaviourBuilder));
    plstSteps.add(new Choice_h0d(behaviourBuilder));
    plstSteps.add(new Choice_i0d(behaviourBuilder));
    plstSteps.add(new StayAction_j0d(behaviourBuilder));
    behaviourBuilder.setSteps(plstSteps);

    Signal sendSignalTemp = new Signal();

  }
  public void InitCepheid_e(Signal s) {
    behaviourBuilder.setSignalTrigger(s);
    ArrayList<BehaviourStep> plstSteps = new ArrayList();
    plstSteps.add(new MoveAction_a0e_3(behaviourBuilder));
    plstSteps.add(new OrderAction_b0e(behaviourBuilder));
    plstSteps.add(new StayAction_c0e(behaviourBuilder));
    plstSteps.add(new StayAction_d0e(behaviourBuilder));
    plstSteps.add(new Choice_e0e(behaviourBuilder));
    plstSteps.add(new Choice_f0e(behaviourBuilder));
    plstSteps.add(new Choice_g0e(behaviourBuilder));
    plstSteps.add(new Choice_h0e(behaviourBuilder));
    plstSteps.add(new Choice_i0e(behaviourBuilder));
    plstSteps.add(new StayAction_j0e(behaviourBuilder));
    behaviourBuilder.setSteps(plstSteps);

    Signal sendSignalTemp = new Signal();

  }
  public void InitCheckCOVIDContact_g(Signal s) {
    behaviourBuilder.setSignalTrigger(s);
    ArrayList<BehaviourStep> plstSteps = new ArrayList();
    plstSteps.add(new OrderAction_a0f(behaviourBuilder));
    plstSteps.add(new StayAction_b0f_7(behaviourBuilder));
    plstSteps.add(new Choice_c0f(behaviourBuilder));
    plstSteps.add(new Choice_d0f_7(behaviourBuilder));
    plstSteps.add(new StayAction_e0f(behaviourBuilder));
    behaviourBuilder.setSteps(plstSteps);

    Signal sendSignalTemp = new Signal();

  }

}
