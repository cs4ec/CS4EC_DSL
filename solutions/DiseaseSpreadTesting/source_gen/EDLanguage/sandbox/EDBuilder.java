package EDLanguage.sandbox;

/*Generated by MPS */

import repast.simphony.dataLoader.ContextBuilder;
import repast.simphony.context.Context;
import simcore.basicStructures.ToolBox;
import repast.simphony.parameter.Parameters;
import repast.simphony.engine.environment.RunEnvironment;
import simcore.utilities.ModelParameterStore;
import repast.simphony.context.space.continuous.ContinuousSpaceFactory;
import repast.simphony.context.space.continuous.ContinuousSpaceFactoryFinder;
import repast.simphony.space.continuous.ContinuousSpace;
import simcore.utilities.StaffAdder;
import repast.simphony.space.continuous.StrictBorders;
import repast.simphony.context.space.grid.GridFactory;
import repast.simphony.context.space.grid.GridFactoryFinder;
import repast.simphony.space.grid.Grid;
import repast.simphony.space.grid.GridBuilderParameters;
import repast.simphony.space.grid.SimpleGridAdder;
import simcore.basicStructures.Board;
import repast.simphony.valueLayer.GridValueLayer;
import simcore.basicStructures.Area;
import java.awt.Color;
import simcore.basicStructures.Room;
import repast.simphony.space.continuous.NdPoint;
import repast.simphony.context.space.graph.NetworkBuilder;
import repast.simphony.engine.schedule.ISchedule;
import repast.simphony.engine.schedule.ScheduleParameters;
import java.util.HashMap;
import simcore.utilities.PatientArrivalStore;
import java.util.Map;
import simcore.basicStructures.Wall;
import simcore.agents.Agent;
import java.util.ArrayList;

public class EDBuilder implements ContextBuilder<Object> {

  public Context context;

  public Context build(Context<Object> context) {
    this.context = context;

    // Reset log contents
    new ToolBox(this).GetLog().clearOldContents();
    ToolBox.grids.clear();

    context.setId("EDProject");
    int mapWidth = 75;
    int mapHeight = 155;

    Parameters params = RunEnvironment.getInstance().getParameters();

    Boolean pBool = params.getBoolean("UsePathFinding");
    ModelParameterStore.UsePathFinding = false;

    RunEnvironment.getInstance().endAt(86400 / params.getInteger("SecondsPerTick"));

    CreatePatientArrivalMap();

    ContinuousSpaceFactory spaceFactory = ContinuousSpaceFactoryFinder.createContinuousSpaceFactory(null);
    ContinuousSpace<Object> space = spaceFactory.createContinuousSpace("space", context, new StaffAdder<Object>(), new StrictBorders(), mapWidth, mapHeight);

    GridFactory gridFactory = GridFactoryFinder.createGridFactory(null);
    Grid<Object> grid = gridFactory.createGrid("grid", context, new GridBuilderParameters<Object>(new repast.simphony.space.grid.StrictBorders(), new SimpleGridAdder<Object>(), true, mapWidth, mapHeight));

    Grid<Object> COVIDBreadcrumbgrid = gridFactory.createGrid("COVIDBreadcrumb", context, new GridBuilderParameters<Object>(new repast.simphony.space.grid.StrictBorders(), new SimpleGridAdder<Object>(), true, mapWidth, mapHeight));
    Grid<Object> FluABreadcrumbgrid = gridFactory.createGrid("FluABreadcrumb", context, new GridBuilderParameters<Object>(new repast.simphony.space.grid.StrictBorders(), new SimpleGridAdder<Object>(), true, mapWidth, mapHeight));
    Grid<Object> FluBBreadcrumbgrid = gridFactory.createGrid("FluBBreadcrumb", context, new GridBuilderParameters<Object>(new repast.simphony.space.grid.StrictBorders(), new SimpleGridAdder<Object>(), true, mapWidth, mapHeight));
    ToolBox.grids.add(COVIDBreadcrumbgrid);
    ToolBox.grids.add(FluABreadcrumbgrid);
    ToolBox.grids.add(FluBBreadcrumbgrid);


    context.add(new patientGenerator_0(space, grid, context));
    context.add(new Board());

    // add Agents
    for (int i = 0; i < 10; i++) {
      context.add(new Doctor(space, grid, context));
    }
    for (int i = 0; i < 9; i++) {
      context.add(new CubicleNurse(space, grid, context));
    }
    for (int i = 0; i < 5; i++) {
      context.add(new TriageNurse(space, grid, context));
    }
    for (int i = 0; i < 5; i++) {
      context.add(new PreAdmissionStaff(space, grid, context));
    }
    for (int i = 0; i < 7; i++) {
      context.add(new LabTechnician(space, grid, context));
    }
    for (int i = 0; i < 10; i++) {
      context.add(new WardNurse(space, grid, context));
    }


    GridValueLayer vl = new GridValueLayer("cellbox", true, new repast.simphony.space.grid.StrictBorders(), mapWidth, mapHeight);
    context.addValueLayer(vl);

    // add Locations here

    Area EmergencyDepartment_0 = new Area(context, space, grid, 1, 1, 20, 15, Color.WHITE);
    EmergencyDepartment_0.addResource(LabPCR.getInstance(), 1000);
    EmergencyDepartment_0.addResource(LateralFlow.getInstance(), 1000);
    EmergencyDepartment_0.addResource(LIAT.getInstance(), 1000);
    EmergencyDepartment_0.addResource(Cepheid.getInstance(), 1000);
    EmergencyDepartment_0.addResource(PHEThree.getInstance(), 1000);
    EmergencyDepartment_0.setReplenishAmount(LabPCR.getInstance(), 1000);
    EmergencyDepartment_0.setReplenishAmount(LateralFlow.getInstance(), 1000);
    EmergencyDepartment_0.setReplenishAmount(LIAT.getInstance(), 1000);
    EmergencyDepartment_0.setReplenishAmount(Cepheid.getInstance(), 1000);
    EmergencyDepartment_0.setReplenishAmount(PHEThree.getInstance(), 1000);
    EmergencyDepartment_0.setReplenishFrequency(LabPCR.getInstance(), 1);
    EmergencyDepartment_0.setReplenishFrequency(LateralFlow.getInstance(), 1);
    EmergencyDepartment_0.setReplenishFrequency(LIAT.getInstance(), 1);
    EmergencyDepartment_0.setReplenishFrequency(Cepheid.getInstance(), 1);
    EmergencyDepartment_0.setReplenishFrequency(PHEThree.getInstance(), 1);
    Room Entrance_a = new Room("Entrance", context, space, grid, 15, 10, 5, 5, 1, 10000, MainEntrance.getInstance(), Color.GRAY, EmergencyDepartment_0);
    Room MajorsABOne_b = new Room("MajorsABOne", context, space, grid, 15, 10, 5, 5, 1, 10, MajorsAB_Cubicle.getInstance(), Color.GREEN, EmergencyDepartment_0);
    Room MajorsABTwo_c = new Room("MajorsABTwo", context, space, grid, 15, 10, 5, 5, 1, 10, MajorsAB_Cubicle.getInstance(), Color.GREEN, EmergencyDepartment_0);
    Room MajorsABThree_d = new Room("MajorsABThree", context, space, grid, 15, 10, 5, 5, 1, 10, MajorsAB_Cubicle.getInstance(), Color.GREEN, EmergencyDepartment_0);
    Room MajorsABFour_e = new Room("MajorsABFour", context, space, grid, 15, 10, 5, 5, 1, 10, MajorsAB_Cubicle.getInstance(), Color.GREEN, EmergencyDepartment_0);

    try {
      MajorsABOne_b.addOccupiable(new Bed(context, space, grid, 22, 102, MajorsABOne_b));
      MajorsABTwo_c.addOccupiable(new Bed(context, space, grid, 28, 102, MajorsABTwo_c));
      MajorsABThree_d.addOccupiable(new Bed(context, space, grid, 62, 102, MajorsABThree_d));
      MajorsABFour_e.addOccupiable(new Bed(context, space, grid, 68, 102, MajorsABFour_e));

    } catch (NumberFormatException e) {
    }

    createWallBetween(25, 100, 25, 105, context, space, grid);

    for (Object obj : context) {
      NdPoint pt = space.getLocation(obj);
      grid.moveTo(obj, (int) pt.getX(), (int) pt.getY());
    }

    new NetworkBuilder("CurrentPatientAllocations", context, true).buildNetwork();
    new NetworkBuilder("HistoricalPatientAllocations", context, true).buildNetwork();

    ISchedule schedule = RunEnvironment.getInstance().getCurrentSchedule();
    ScheduleParameters stop = ScheduleParameters.createRepeating((86400 / params.getInteger("SecondsPerTick")), (86400 / params.getInteger("SecondsPerTick")), ScheduleParameters.FIRST_PRIORITY);
    schedule.schedule(stop, this, "printActivityHistories");

    ScheduleParameters midPoint = ScheduleParameters.createRepeating((86400 / params.getInteger("SecondsPerTick")), (86400 / params.getInteger("SecondsPerTick")), ScheduleParameters.LAST_PRIORITY);
    schedule.schedule(midPoint, this, "emptyDeSpawnedAgents");


    return context;
  }

  public void CreatePatientArrivalMap() {
    HashMap ArrivalPerHour = new HashMap();
    ArrivalPerHour.putIfAbsent(1, 5);
    ArrivalPerHour.putIfAbsent(2, 8);
    ArrivalPerHour.putIfAbsent(3, 8);
    ArrivalPerHour.putIfAbsent(4, 4);
    ArrivalPerHour.putIfAbsent(5, 4);
    ArrivalPerHour.putIfAbsent(6, 9);
    ArrivalPerHour.putIfAbsent(7, 3);
    ArrivalPerHour.putIfAbsent(8, 3);
    ArrivalPerHour.putIfAbsent(9, 6);
    ArrivalPerHour.putIfAbsent(10, 13);
    ArrivalPerHour.putIfAbsent(11, 13);
    ArrivalPerHour.putIfAbsent(12, 16);
    ArrivalPerHour.putIfAbsent(13, 16);
    ArrivalPerHour.putIfAbsent(14, 18);
    ArrivalPerHour.putIfAbsent(15, 19);
    ArrivalPerHour.putIfAbsent(16, 20);
    ArrivalPerHour.putIfAbsent(17, 18);
    ArrivalPerHour.putIfAbsent(18, 16);
    ArrivalPerHour.putIfAbsent(19, 11);
    ArrivalPerHour.putIfAbsent(20, 9);
    ArrivalPerHour.putIfAbsent(21, 10);
    ArrivalPerHour.putIfAbsent(22, 9);
    ArrivalPerHour.putIfAbsent(23, 13);
    ArrivalPerHour.putIfAbsent(24, 4);
    PatientArrivalStore.Initialise((Map<Integer, Integer>) ArrivalPerHour);
  }

  private void createWallBetween(int x1, int y1, int x2, int y2, Context<Object> context, ContinuousSpace<Object> space, Grid<Object> grid) {
    if (x1 == x2) {
      for (int i = y1; i < y2; i++) {
        Wall pWall = new Wall("", context, space, grid, x1, i);
      }
    } else {
      float ratio = (y2 - y1) / (x2 - x1);
      int width = x2 - x1;
      for (int i = 0; i < width; i++) {
        float x = x1 + i;
        float y = y1 + (ratio * i);
        Wall pWall = new Wall("", context, space, grid, ((int) x), ((int) y));
      }

    }
  }

  public void printActivityHistories() {
    for (Object object : context.getObjects(Agent.class)) {
      Agent a = (Agent) object;
      a.printActivityHistory();
    }
  }

  public void emptyDeSpawnedAgents() {
    ArrayList<Object> listAgents = new ArrayList();
    for (Object object : context.getObjects(Agent.class)) {
      listAgents.add(object);
    }
    for (Object agent : listAgents) {
      if (((Agent) agent).deSpawnTime != null) {
        context.remove(agent);
      }
    }
  }


}
