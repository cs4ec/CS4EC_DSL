package EDLanguage.sandbox;

/*Generated by MPS */

import simcore.basicStructures.AgentGenerator;
import repast.simphony.space.continuous.ContinuousSpace;
import repast.simphony.space.grid.Grid;
import repast.simphony.context.Context;
import repast.simphony.engine.schedule.ScheduledMethod;
import simcore.basicStructures.Board;
import simcore.basicStructures.ToolBox;
import simcore.Signals.Signal;
import simcore.Signals.ActorTypeSignal;
import repast.simphony.random.RandomHelper;
import repast.simphony.engine.environment.RunEnvironment;
import java.util.HashMap;

public class patientGenerator_0 extends AgentGenerator {
  public patientGenerator_0(ContinuousSpace<Object> space, Grid<Object> grid, Context<Object> context) {
    super(space, grid, context);
    spawnRoomType = MainEntrance.getInstance();
    initialiseArrivalMap();
  }

  @ScheduledMethod(start = 1, interval = 1)
  public void step() {
    tick();
  }

  public Object onGenerate() {
    patient a = new patient(space, grid, context);
    Board b = new ToolBox(this).ReadBoard();

    Signal sendSignalTemp = new ActorTypeSignal();

    sendSignalTemp.setName("");
    sendSignalTemp.AddData("patient", a);
    sendSignalTemp.AddActor("");


    // For each agent attribute
    // For each attribute value option
    // Assign the value based on probability function
    double rndDouble = RandomHelper.nextDouble();

    this.generateAttribute_a(a);
    this.generateAttribute_b(a);
    this.generateAttribute_c(a);
    this.generateAttribute_d(a);

    b.PushMission(sendSignalTemp);

    return a;
  }

  public void generateAttribute_a(patient agent) {
    double rndDouble = RandomHelper.nextDouble();

    double runningTotal = 0;

    runningTotal = (RunEnvironment.getInstance().getParameters().getDouble("NormalPatientsSeveritymoderate"));
    if (rndDouble < (runningTotal / 100)) {
      agent.Severity = "moderate";
      return;
    }
    if (rndDouble < ((RunEnvironment.getInstance().getParameters().getDouble("NormalPatientsSeveritysevere") + runningTotal) / 100)) {
      agent.Severity = "severe";
      runningTotal += RunEnvironment.getInstance().getParameters().getDouble("NormalPatientsSeveritysevere");
      return;
    } else {
      runningTotal += RunEnvironment.getInstance().getParameters().getDouble("NormalPatientsSeveritysevere");
    }
    if (rndDouble < ((RunEnvironment.getInstance().getParameters().getDouble("NormalPatientsSeveritylow") + runningTotal) / 100)) {
      agent.Severity = "low";
      runningTotal += RunEnvironment.getInstance().getParameters().getDouble("NormalPatientsSeveritylow");
      return;
    } else {
      runningTotal += RunEnvironment.getInstance().getParameters().getDouble("NormalPatientsSeveritylow");
    }

  }
  public void generateAttribute_b(patient agent) {
    double rndDouble = RandomHelper.nextDouble();

    double runningTotal = 0;

    runningTotal = (RunEnvironment.getInstance().getParameters().getDouble("NormalPatientsImmunocompromisedNo"));
    if (rndDouble < (runningTotal / 100)) {
      agent.Immunocompromised = "No";
      return;
    }
    if (rndDouble < ((RunEnvironment.getInstance().getParameters().getDouble("NormalPatientsImmunocompromisedYes") + runningTotal) / 100)) {
      agent.Immunocompromised = "Yes";
      runningTotal += RunEnvironment.getInstance().getParameters().getDouble("NormalPatientsImmunocompromisedYes");
      return;
    } else {
      runningTotal += RunEnvironment.getInstance().getParameters().getDouble("NormalPatientsImmunocompromisedYes");
    }

  }
  public void generateAttribute_c(patient agent) {
    double rndDouble = RandomHelper.nextDouble();

    double runningTotal = 0;

    runningTotal = (RunEnvironment.getInstance().getParameters().getDouble("NormalPatientsRecentCovidContactYes"));
    if (rndDouble < (runningTotal / 100)) {
      agent.RecentCovidContact = "Yes";
      return;
    }
    if (rndDouble < ((RunEnvironment.getInstance().getParameters().getDouble("NormalPatientsRecentCovidContactNo") + runningTotal) / 100)) {
      agent.RecentCovidContact = "No";
      runningTotal += RunEnvironment.getInstance().getParameters().getDouble("NormalPatientsRecentCovidContactNo");
      return;
    } else {
      runningTotal += RunEnvironment.getInstance().getParameters().getDouble("NormalPatientsRecentCovidContactNo");
    }

  }
  public void generateAttribute_d(patient agent) {
    double rndDouble = RandomHelper.nextDouble();

    double runningTotal = 0;

    runningTotal = (RunEnvironment.getInstance().getParameters().getDouble("NormalPatientsadmissionRouteEmergencyAttendance"));
    if (rndDouble < (runningTotal / 100)) {
      agent.admissionRoute = "EmergencyAttendance";
      return;
    }

  }

  public void initialiseArrivalMap() {
    ArrivalPerHour = new HashMap<Integer, Integer>();
    ArrivalPerHour.put(1, 2);
    ArrivalPerHour.put(2, 2);
    ArrivalPerHour.put(3, 2);
    ArrivalPerHour.put(4, 3);
    ArrivalPerHour.put(5, 2);
    ArrivalPerHour.put(6, 2);
    ArrivalPerHour.put(7, 6);
    ArrivalPerHour.put(8, 6);
    ArrivalPerHour.put(9, 6);
    ArrivalPerHour.put(10, 6);
    ArrivalPerHour.put(11, 6);
    ArrivalPerHour.put(12, 6);
    ArrivalPerHour.put(13, 9);
    ArrivalPerHour.put(14, 9);
    ArrivalPerHour.put(15, 9);
    ArrivalPerHour.put(16, 9);
    ArrivalPerHour.put(17, 9);
    ArrivalPerHour.put(18, 9);
    ArrivalPerHour.put(19, 4);
    ArrivalPerHour.put(20, 5);
    ArrivalPerHour.put(21, 4);
    ArrivalPerHour.put(22, 5);
    ArrivalPerHour.put(23, 4);
    ArrivalPerHour.put(24, 5);



  }
}
